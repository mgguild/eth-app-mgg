{"version":3,"sources":["state/index.ts","state/types.ts","config/constants/pools.ts","utils/formatBalance.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/fetchVaultPublic.ts","state/pools/fetchVaultUser.ts","state/pools/index.ts","state/predictions/helpers.ts","state/predictions/queries.ts","config/localization/languages.ts","utils/web3.ts","state/profile/helpers.ts","state/profile/getProfile.ts","state/profile/index.tsx","config/constants/tokens.ts","state/teams/index.tsx","config/constants/nfts.ts","config/constants/endpoints.ts","hooks/useEagerConnect.ts","views/Farms/Redirects.tsx","style/Global.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/SuspenseWithChunkError/index.tsx","components/ToastListener/index.tsx","components/EasterEgg/EasterEgg.tsx","App.tsx","Providers.tsx","index.tsx","state/actions.ts","contexts/Localization/helpers.ts","contexts/Localization/Provider.tsx","contexts/Localization/useTranslation.ts","config/constants/priceHelperLps.ts","state/farms/fetchPublicFarmData.ts","state/farms/fetchFarm.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","config/constants/contracts.ts","utils/addressHelpers.ts","utils/getRpcUrl.ts","config/constants/farms.ts","hooks/useRefresh.ts","utils/web3React.ts","config/constants/index.ts","config/constants/teams.ts","state/teams/helpers.ts","state/pools/helpers.ts","config/constants/campaigns.ts","state/hooks.ts","hooks/useToast.ts","hooks/useAuth.ts","utils/collectibles.ts","config/constants/ifo.ts","config/index.ts","state/block/index.ts","state/collectibles/index.ts","state/achievements/helpers.ts","state/achievements/index.ts","contexts/ThemeContext.tsx","contexts/ToastsContext/Provider.tsx","hooks/useTabVisibility.ts","contexts/RefreshContext.tsx","utils/compoundApyHelpers.ts","utils/achievements.ts","state/predictions/index.ts","views/Pools/helpers.tsx","utils/bigNumber.ts","config/constants/meta.ts","components/layout/Page.tsx","hooks/useTheme.ts","components/layout/Container.tsx","utils/apr.ts","components/PageLoader.tsx","utils/wallet.ts","utils/farmHelpers.ts","utils/multicall.ts","config/constants/types.ts","utils/contractHelpers.ts"],"names":["store","configureStore","devTools","process","reducer","achievements","achievementsReducer","block","blockReducer","farms","farmsReducer","pools","poolsReducer","predictions","predictionsReducer","profile","profileReducer","teams","teamsReducer","collectibles","collectiblesReducer","useAppDispatch","useDispatch","BetPosition","PredictionStatus","HistoryFilter","mainPool","sousId","stakingToken","tokens","mgg","earningToken","contractAddress","97","56","1","3","poolCategory","PoolCategory","CORE","harvest","tokenPerBlock","sortOrder","isFinished","chainId","getDecimalAmount","amount","decimals","BigNumber","times","BIG_TEN","pow","getBalanceAmount","dividedBy","getBalanceNumber","balance","toNumber","getFullDisplayBalance","decimalsToAppear","toFixed","formatNumber","number","minPrecision","maxPrecision","options","minimumFractionDigits","maximumFractionDigits","toLocaleString","undefined","fetchPoolsBlockLimits","a","poolsWithEnd","poolsConfig","filter","p","callsStartBlock","map","poolConfig","address","getAddress","name","callsEndBlock","multicall","sousChefABI","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStaking","nonBnbPools","symbol","bnbPool","callsNonBnbPools","params","callsBnbPools","getWbnbAddress","sousChefV2","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","fetchPoolStakingLimit","sousContract","getSouschefV2Contract","methods","poolLimitPerUser","call","stakingLimit","BIG_ZERO","fetchPoolsStakingLimits","poolsWithStakingLimit","validPools","includes","stakingLimitPromises","validPool","Promise","all","stakingLimits","reduce","accum","bnbPools","nonMasterPools","fetchPoolsAllowance","getMasterchefContract","account","calls","erc20ABI","allowances","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","web3NoAccount","eth","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","_hex","fetchUserPendingRewards","res","pendingRewards","fetchPublicVaultData","method","getCakeVaultAddress","multicallv2","cakeVaultAbi","sharePrice","shares","estimatedCakeBountyReward","totalPendingCakeHarvest","totalSharesAsBigNumber","toString","sharePriceAsBigNumber","totalCakeInVaultEstimate","convertSharesToCake","totalShares","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","cakeVaultContract","getCakeVaultContract","fetchVaultUser","userContractResponse","isLoading","userShares","lastDepositedTime","lastUserActionTime","cakeAtLastUserAction","initialState","data","userDataLoaded","cakeVault","fees","userData","fetchPoolsPublicDataAsync","currentBlock","dispatch","getState","blockLimits","totalStakings","prices","getTokenPricesFromFarm","liveData","blockLimit","find","entry","totalStaking","isPoolEndBlockExceeded","Number","isPoolFinished","stakingTokenAddress","toLowerCase","stakingTokenPrice","earningTokenAddress","earningTokenPrice","apr","getPoolApr","parseFloat","setPoolsPublicData","fetchPoolsStakingLimitsAsync","stakingLimitData","fetchPoolsUserDataAsync","stakingTokenBalances","allowance","stakingTokenBalance","stakedBalance","pendingReward","setPoolsUserData","updateUserAllowance","updatePoolsUserData","field","value","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","fetchCakeVaultPublicData","createAsyncThunk","publicVaultInfo","fetchCakeVaultFees","vaultFees","fetchCakeVaultUserData","PoolsSlice","createSlice","reducers","state","action","livePoolsData","payload","livePoolData","userPoolData","findIndex","extraReducers","builder","addCase","fulfilled","actions","Result","numberOrNull","valueNum","isNaN","makeFutureRoundResponse","epoch","id","failed","startAt","lockAt","lockBlock","lockPrice","closePrice","totalBets","totalAmount","bearBets","bullBets","bearAmount","bullAmount","position","bets","transformBetResponse","betResponse","bet","hash","BULL","BEAR","claimed","claimedHash","user","totalBNB","round","transformRoundResponse","roundResponse","positionResponse","makeRoundData","rounds","getRoundResult","currentEpoch","CANCELED","LIVE","roundResultPosition","WIN","LOSE","getCanClaim","getUnclaimedWinningBets","getStaticPredictionsData","getPredictionsAddress","predictionsAbi","intervalBlocks","minBetAmount","isPaused","bufferBlocks","status","PAUSED","getMarketData","request","GRAPH_API_PREDICTION","gql","response","market","marketResponse","paused","getBetHistory","where","first","skip","getBet","betId","EN","locale","language","code","languages","languageList","Object","values","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","archivedHttpProvider","ARCHIVED_NODE","web3WithArchivedNodeProvider","getWeb3NoAccount","chainID","RPC_URL2","httpProvider2","transformProfileResponse","profileResponse","userId","numberPoints","teamId","nftAddress","tokenId","isActive","points","profileContract","getProfileContract","profileApi","REACT_APP_API_PROFILE","getUsername","fetch","ok","json","username","getProfile","hasRegistered","getUserProfile","getTeam","team","getNftByTokenId","nft","Cookies","set","avatar","images","sm","domain","secure","expires","isInitialized","profileSlice","profileFetchStart","profileFetchSucceeded","_state","profileFetchFailed","profileClear","addPoints","fetchProfile","sfuel","projectLink","bnb","cake","txl","cos","bunny","alice","for","bux","nuls","belt","ramp","bfi","dexe","bel","tpt","watch","xmark","bmxx","iotx","bor","bopen","dodo","swingby","bry","zee","swgb","swg","sfp","lina","lit","hget","bdo","egld","ust","wsote","front","helmet","btcst","bscx","ten","balbt","asr","atm","og","reef","ditto","juv","psg","vai","wbnb","blink","unfi","twt","hard","broobee","stax","nar","nya","ctk","inj","sxp","alpha","xvs","sushi","comp","syrup","bifi","dusk","busd","beth","mamzn","mgoogl","mnflx","mtsla","ltc","usdc","dai","ada","band","dot","eos","link","usdt","btcb","xrp","atom","yfii","xtz","bch","yfi","uni","fil","bake","burger","bdigg","bbadger","trade","pnt","mir","pbtc","lto","pcws","zil","lien","swth","dft","gum","dego","nrv","easy","oddz","hoo","apys","bondly","tko","itam","arpa","eps","jgn","tlm","perl","alpa","hzn","suter","cgg","mix","hakka","xed","τbtc","alpaca","dfd","lmt","btt","trx","win","mcoin","math","kun","qsd","hyfi","oin","doge","fine","one","pmon","hotcross","τdoge","btr","ubxt","wmass","rfox","xend","cyc","chr","kalm","deri","well","popen","ez","vrt","tusd","mtrg","ktn","qkc","bcfx","mx","ata","mbox","boring","marsh","ampl","o3","hai","htb","woo","$dg","iconExtension","srkb","ttkb","own","kclp","kroot","bglg","kgo","tipsy","gzila","flash","bhc","hps","teamsList","teamsSlice","fetchStart","fetchFailed","teamFetchSucceeded","teamsFetchSucceeded","fetchTeam","fetchTeams","getTeams","IPFS_GATEWAY","nftSources","NftType","PANCAKE","identifierKey","MIXIE","Nfts","description","lg","md","ipfs","identifier","type","variationId","video","webm","mp4","blur","GRAPH_API_PROFILE","_binanceChainListener","resolve","defineProperty","window","get","this","bsc","useEagerConnect","login","useAuth","useEffect","connectorId","localStorage","getItem","connectorLocalStorageKey","isConnectorBinanceChain","ConnectorNames","BSC","isBinanceChainDefined","Reflect","has","then","RedirectToFarms","location","to","pathname","GlobalStyle","createGlobalStyle","theme","colors","background","config","label","icon","items","href","Menu","props","useWeb3React","logout","useTheme","isDark","toggleTheme","useTranslation","currentLanguage","setLanguage","network","currentLang","langs","setLang","links","SuspenseWithChunkError","hasError","error","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","history","nextState","replaceState","reload","fallback","React","Component","ToastListener","useToast","toasts","remove","onRemove","EasterEgg","useState","show","setShow","startFalling","useCallback","useKonamiCheatCode","onAnimationEnd","memo","Farms","lazy","Pools","ComingSoon","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","usePollBlockNumber","useFetchProfile","usePollCoreFarmData","Global","PageLoader","path","exact","title","component","iterations","Providers","children","getLibrary","ThemeContext","RefreshContext","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById","LS_KEY","fetchLocale","getLanguageCodeFromLS","isFetching","languageMap","Map","translations","LanguageContext","createContext","LanguageProvider","codeFromStorage","setState","enLocale","currentLocale","prevState","fetchInitialLocales","setItem","translate","key","translatedText","match","interpolatedText","keys","forEach","dataKey","templateKey","RegExp","replace","Provider","t","languageContext","useContext","Error","priceHelperLps","fetchFarm","farm","pid","lpAddresses","token","quoteToken","stakingAddresses","chain","lpAddress","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpStakingCalls","lpStaking","totalSupply","periodFinish","rewardRate","totalDeposits","totalRewardRate","endDate","Date","setUTCSeconds","hasEnded","now","remainingDays","Math","max","ceil","lpTokenRatio","div","tokenAmountTotal","quoteTokenAmountTotal","tokenAmountMc","quoteTokenAmountMc","lpTotalInQuoteToken","allocPoint","poolWeight","tokenPriceVsQuote","multiplier","fetchPublicFarmData","farmPublicData","fetchFarms","farmsToFetch","farmConfig","fetchFarmUserAllowances","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","lpStakingAbi","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsConfig","loadArchivedFarmsData","nonArchivedFarms","isArchivedPid","fetchFarmsPublicDataAsync","pids","farmsWithPriceHelpers","concat","priceHelperLpsConfig","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","farmsSlice","setLoadArchivedFarmsData","liveFarmData","farmData","userDataEl","MAINNET_CHAIN_ID","getCakeAddress","getMasterChefAddress","addresses","getMulticallAddress","getLotteryAddress","getLotteryTicketAddress","getLotteryV2Address","getPancakeProfileAddress","getPancakeRabbitsAddress","getBunnyFactoryAddress","getClaimRefundAddress","getPointCenterIfoAddress","getBunnySpecialAddress","getTradingCompetitionAddress","getEasterNftAddress","getChainlinkOracleAddress","nodes","ethnodes","ropsnodes","getNodeUrl","randomIndex","random","length","isMain","lpSymbol","pairToken","isPromoted","useRefresh","fastRefresh","fast","slowRefresh","slow","rpcUrl","parseInt","ethMainChainId","MAINNET_ETH_CHAIN_ID","ropsChainId","ROPSTEN_CHAIN_ID","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","bscConnector","BscConnector","connectorsByName","Injected","WalletConnect","provider","alt","textColor","users","getTeamProfile","teamName","numberUsers","isJoinable","staticTeamInfo","staticTeam","merge","teamsById","numberTeams","nbTeams","i","push","profileABI","teamData","onChainTeamData","transformUserData","transformPool","rest","quoteTokenAddress","toLocaleLowerCase","tokenAddress","busdPrice","campaigns","badge","campaignMap","campaign","usePollFarmsData","includeArchive","farmToFetch","interval","setInterval","getBlockNumber","blockNumber","setBlock","clearInterval","useFarms","useSelector","useFarmFromPid","f","useFarmUser","useBusdPriceFromPid","useLpTokenPrice","farmTokenPriceInUsd","lpTokenPrice","overallValueOfAllTokensInFarm","totalLpTokens","useFetchPublicPoolsData","fetchPoolsPublicData","usePools","useFetchCakeVault","useCakeVault","totalSharesAsString","pricePerFullShareAsString","totalCakeInVaultAsString","estimatedCakeBountyRewardAsString","totalPendingCakeHarvestAsString","userSharesAsString","cakeAtLastUserActionAsString","useMemo","useProfile","hasProfile","useTeam","useTeams","useFetchAchievements","fetchAchievements","useAchievements","usePriceBnbBusd","usePriceCakeBusd","useBlock","useInitialBlock","initialBlock","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetRounds","useGetSortedRounds","roundData","orderBy","useGetCurrentEpoch","useGetIntervalBlocks","useGetTotalIntervalBlocks","useGetPredictionsStatus","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","useGetBetByRoundId","roundId","useBetCanClaim","useGetLastOraclePrice","lastOraclePrice","useGetCollectibles","identifiers","fetchWalletNfts","tokenIds","nftsInWallet","toastContext","ToastsContext","activate","deactivate","toastError","connectorID","connector","UnsupportedChainIdError","setupNetwork","removeItem","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","walletConnectProvider","message","close","getIdentifierKeyFromAddress","nftSource","nftSourceEntry","getTokenUrl","tokenUri","startsWith","slice","getAddressByType","getTokenUriData","contract","getErc721Contract","tokenURI","uriDataResponse","uriData","console","ifos","BSC_BLOCK_TIME","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","CAKE_PER_YEAR","BASE_URL","BASE_EXCHANGE_URL","BASE_INFO_URL","BASE_ADD_LIQUIDITY_URL","BASE_SWAP_URL","BASE_BSC_SCAN_URL","BASE_ETH_SCAN_URL","LOTTERY_TICKET_PRICE","DEFAULT_TOKEN_DECIMAL","DEFAULT_GAS_LIMIT","DEFAULT_GAS_PRICE","TESTNET_CHAIN_ID","EPOCH_PER_YEAR","BASE_BSC_SCAN_URLS","BASE_ETH_SCAN_URLS","blockSlice","nftSourcePromises","nftSourceType","addressObj","getTokenIdAndData","tokenOfOwnerByIndex","walletNft","balanceOf","balanceOfResponse","nftDataFetchPromises","nftData","nftSourceData","flat","collectiblesSlice","pending","association","getUserPointIncreaseEvents","getAchievements","pointIncreaseEvents","userPoint","campaignMeta","campaignId","getAchievementTitle","getAchievementDescription","achievementSlice","addAchievement","addAchievements","setAchievements","clearAchievements","CACHE_KEY","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","stringify","dark","light","ToastsProvider","setToasts","toast","prevToasts","kebabCase","currentToasts","prevToast","clear","toastTypes","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","useTabVisibility","tabVisibleRef","useRef","onVisibilityChange","current","hidden","addEventListener","removeEventListener","RefreshContextProvider","setSlow","setFast","prev","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","getRoi","amountEarned","amountInvested","getClaimableIfoData","ifoCampaigns","ifosList","ifoItem","ifoCampaignAddresses","pointCenterContract","getPointCenterIfoContract","checkClaimStatuses","claimStatuses","pointCenterIfoABI","claimStatus","claimableIfoData","claimableIfoDataItem","ifoCampaign","INITIAL","ALL","fetchBet","fetchRoundBet","betResponses","fetchCurrentBets","roundIds","round_in","fetchHistory","predictionsSlice","setPredictionStatus","setHistoryPaneState","setChartPaneState","setHistoryFilter","initialize","updateMarketData","newRoundData","incomingCurrentRound","maxBy","newestRound","futureRound","setCurrentEpoch","markBetAsCollected","accountBets","markPositionAsEntered","setLastOraclePrice","betData","currentBet","rejected","cakePerFullShare","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsDisplayBalance","convertCakeToShares","amountInShares","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","getAprData","isAutoVault","isHighValueToken","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","getCakeVaultEarnings","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","autoUsdToDisplay","getPoolBlockInfo","shouldShowBlockCountdown","Boolean","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","BIG_NINE","DEFAULT_META","image","StyledPage","styled","Container","mediaQueries","PageMeta","pageMeta","getCustomMeta","useLocation","property","content","Page","StyledThemeContext","rewardTokenPrice","totalRewardPricePerYear","totalStakingTokenInPool","isFinite","getFarmV2Apr","LPTokenPrice","getFarmApr","cakePriceUsd","poolLiquidityUsd","Wrapper","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","registerToken","tokenSymbol","tokenImage","tokenAdded","calculateUserRewardRate","Token","ChainId","MAINNET","rewardsToken","rewardRateAmount","TokenAmount","stakedAmount","token0","token1","dummyPair","Pair","totalStakedAmount","liquidityToken","JSBI","BigInt","raw","greaterThan","divide","multiply","toSignificant","abi","multi","getMulticallContract","web3","itf","Interface","calldata","encodeFunctionData","aggregate","returnData","decodeFunctionResult","tryAggregate","requireSuccess","result","PoolIds","getContract","Contract","getBep20Contract","bep20Abi","erc721Abi","getLpStakingContract","getIfoV1Contract","ifoV1Abi","getIfoV2Contract","ifoV2Abi","getSouschefContract","BINANCE","sousChefBnb","sousChef","pointCenterIfo","getCakeContract","cakeAbi","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","getLotteryContract","lotteryAbi","getLotteryTicketContract","lotteryTicketAbi","getLotteryV2Contract","lotteryV2Abi","masterChef","getClaimRefundContract","claimRefundAbi","getTradingCompetitionContract","tradingCompetitionAbi","getEasterNftContract","easterNftAbi","getPredictionsContract","getChainlinkOracleContract","chainlinkOracleAbi","MultiCallAbi"],"mappings":"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","file":"static/js/main.63a96abf.chunk.js","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\r\nimport { useDispatch } from 'react-redux'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport predictionsReducer from './predictions'\r\nimport profileReducer from './profile'\r\nimport teamsReducer from './teams'\r\nimport achievementsReducer from './achievements'\r\nimport blockReducer from './block'\r\nimport collectiblesReducer from './collectibles'\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    achievements: achievementsReducer,\r\n    block: blockReducer,\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    predictions: predictionsReducer,\r\n    profile: profileReducer,\r\n    teams: teamsReducer,\r\n    collectibles: collectiblesReducer,\r\n  },\r\n})\r\n\r\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport default store\r\n","import { ThunkAction } from 'redux-thunk'\r\nimport { AnyAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CampaignType, FarmConfig, Nft, PoolConfig, Team } from 'config/constants/types'\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, State, unknown, AnyAction>\r\n\r\nexport type TranslatableText =\r\n  | string\r\n  | {\r\n      key: string\r\n      data?: {\r\n        [key: string]: string | number\r\n      }\r\n    }\r\n\r\nexport type SerializedBigNumber = string\r\n\r\nexport interface Farm extends FarmConfig {\r\n  totalDeposits?: string\r\n  rewardRate?: SerializedBigNumber\r\n  totalRewardRate?: SerializedBigNumber\r\n  hasEnded?: boolean\r\n  remainingDays?: string\r\n  tokenAmountMc?: SerializedBigNumber\r\n  quoteTokenAmountMc?: SerializedBigNumber\r\n  tokenAmountTotal?: SerializedBigNumber\r\n  quoteTokenAmountTotal?: SerializedBigNumber\r\n  lpTotalInQuoteToken?: SerializedBigNumber\r\n  lpTotalSupply?: SerializedBigNumber\r\n  tokenPriceVsQuote?: SerializedBigNumber\r\n  poolWeight?: SerializedBigNumber\r\n  isPromoted?: number\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n  }\r\n}\r\n\r\nexport interface Pool extends PoolConfig {\r\n  totalStaked?: BigNumber\r\n  stakingLimit?: BigNumber\r\n  startBlock?: number\r\n  endBlock?: number\r\n  apr?: number\r\n  stakingTokenPrice?: number\r\n  earningTokenPrice?: number\r\n  isAutoVault?: boolean\r\n  userData?: {\r\n    allowance: BigNumber\r\n    stakingTokenBalance: BigNumber\r\n    stakedBalance: BigNumber\r\n    pendingReward: BigNumber\r\n  }\r\n}\r\n\r\nexport interface Profile {\r\n  userId: number\r\n  points: number\r\n  teamId: number\r\n  nftAddress: string\r\n  tokenId: number\r\n  isActive: boolean\r\n  username: string\r\n  nft?: Nft\r\n  team: Team\r\n  hasRegistered: boolean\r\n}\r\n\r\n// Slices states\r\n\r\nexport interface FarmsState {\r\n  data: Farm[]\r\n  loadArchivedFarmsData: boolean\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport interface VaultFees {\r\n  performanceFee: number\r\n  callFee: number\r\n  withdrawalFee: number\r\n  withdrawalFeePeriod: number\r\n}\r\n\r\nexport interface VaultUser {\r\n  isLoading: boolean\r\n  userShares: string\r\n  cakeAtLastUserAction: string\r\n  lastDepositedTime: string\r\n  lastUserActionTime: string\r\n}\r\nexport interface CakeVault {\r\n  totalShares?: string\r\n  pricePerFullShare?: string\r\n  totalCakeInVault?: string\r\n  estimatedCakeBountyReward?: string\r\n  totalPendingCakeHarvest?: string\r\n  fees?: VaultFees\r\n  userData?: VaultUser\r\n}\r\n\r\nexport interface PoolsState {\r\n  data: Pool[]\r\n  cakeVault: CakeVault\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport interface ProfileState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  hasRegistered: boolean\r\n  data: Profile\r\n}\r\n\r\nexport type TeamResponse = {\r\n  0: string\r\n  1: string\r\n  2: string\r\n  3: string\r\n  4: boolean\r\n}\r\n\r\nexport type TeamsById = {\r\n  [key: string]: Team\r\n}\r\n\r\nexport interface TeamsState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  data: TeamsById\r\n}\r\n\r\nexport interface Achievement {\r\n  id: string\r\n  type: CampaignType\r\n  address: string\r\n  title: TranslatableText\r\n  description?: TranslatableText\r\n  badge: string\r\n  points: number\r\n}\r\n\r\nexport interface AchievementState {\r\n  data: Achievement[]\r\n}\r\n\r\n// Block\r\n\r\nexport interface BlockState {\r\n  currentBlock: number\r\n  initialBlock: number\r\n}\r\n\r\n// Collectibles\r\n\r\nexport interface CollectiblesState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  data: {\r\n    [key: string]: number[]\r\n  }\r\n}\r\n\r\n// Predictions\r\n\r\nexport enum BetPosition {\r\n  BULL = 'Bull',\r\n  BEAR = 'Bear',\r\n  HOUSE = 'House',\r\n}\r\n\r\nexport enum PredictionStatus {\r\n  INITIAL = 'initial',\r\n  LIVE = 'live',\r\n  PAUSED = 'paused',\r\n  ERROR = 'error',\r\n}\r\n\r\nexport interface Round {\r\n  id: string\r\n  epoch: number\r\n  failed?: boolean\r\n  startBlock: number\r\n  startAt: number\r\n  lockAt: number\r\n  lockBlock: number\r\n  lockPrice: number\r\n  endBlock: number\r\n  closePrice: number\r\n  totalBets: number\r\n  totalAmount: number\r\n  bullBets: number\r\n  bearBets: number\r\n  bearAmount: number\r\n  bullAmount: number\r\n  position: BetPosition\r\n  bets?: Bet[]\r\n}\r\n\r\nexport interface Market {\r\n  id: string\r\n  paused: boolean\r\n  epoch: number\r\n}\r\n\r\nexport interface Bet {\r\n  id?: string\r\n  hash?: string\r\n  amount: number\r\n  position: BetPosition\r\n  claimed: boolean\r\n  claimedHash: string\r\n  user?: PredictionUser\r\n  round: Round\r\n}\r\n\r\nexport interface PredictionUser {\r\n  id: string\r\n  address: string\r\n  block: number\r\n  totalBets: number\r\n  totalBNB: number\r\n}\r\n\r\nexport interface RoundData {\r\n  [key: string]: Round\r\n}\r\n\r\nexport interface HistoryData {\r\n  [key: string]: Bet[]\r\n}\r\n\r\nexport interface BetData {\r\n  [key: string]: {\r\n    [key: string]: Bet\r\n  }\r\n}\r\n\r\nexport enum HistoryFilter {\r\n  ALL = 'all',\r\n  COLLECTED = 'collected',\r\n  UNCOLLECTED = 'uncollected',\r\n}\r\n\r\nexport interface PredictionsState {\r\n  status: PredictionStatus\r\n  isLoading: boolean\r\n  isHistoryPaneOpen: boolean\r\n  isChartPaneOpen: boolean\r\n  isFetchingHistory: boolean\r\n  historyFilter: HistoryFilter\r\n  currentEpoch: number\r\n  currentRoundStartBlockNumber: number\r\n  intervalBlocks: number\r\n  bufferBlocks: number\r\n  minBetAmount: string\r\n  lastOraclePrice: string\r\n  rounds: RoundData\r\n  history: HistoryData\r\n  bets: BetData\r\n}\r\n\r\n// Global state\r\n\r\nexport interface State {\r\n  achievements: AchievementState\r\n  block: BlockState\r\n  farms: FarmsState\r\n  pools: PoolsState\r\n  predictions: PredictionsState\r\n  profile: ProfileState\r\n  teams: TeamsState\r\n  collectibles: CollectiblesState\r\n}\r\n","// import { externalPools } from './external_pools'\r\nimport tokens from './tokens'\r\nimport { PoolConfig, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  {\r\n    mainPool: true,\r\n    sousId: 9,\r\n    stakingToken: tokens.mgg,\r\n    earningToken: tokens.mgg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '',\r\n      1: '0xE048Bd9212F00CCDcAc578820c8934F5e1Bf7e97',\r\n      3: '0xF8a9146047B7B7B48483125343fC00A1585ed1e1'\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '100000000000000000000',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n    chainId: 1\r\n  },\r\n]\r\n\r\nexport default pools\r\n","import BigNumber from 'bignumber.js'\r\nimport { BIG_TEN } from './bigNumber'\r\n\r\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n}\r\n\r\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\r\n}\r\n\r\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  return getBalanceAmount(balance, decimals).toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, decimalsToAppear?: number) => {\r\n  return getBalanceAmount(balance, decimals).toFixed(decimalsToAppear)\r\n}\r\n\r\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\r\n  const options = {\r\n    minimumFractionDigits: minPrecision,\r\n    maximumFractionDigits: maxPrecision,\r\n  }\r\n  return number.toLocaleString(undefined, options)\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport sousChefV2 from 'config/abi/sousChefV2.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getSouschefV2Contract } from 'utils/contractHelpers'\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStaking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'totalDeposit',\r\n      params: [],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(sousChefV2, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n\r\nexport const fetchPoolStakingLimit = async (sousId: number): Promise<BigNumber> => {\r\n  try {\r\n    const sousContract = getSouschefV2Contract(sousId)\r\n    const stakingLimit = await sousContract.methods.poolLimitPerUser().call()\r\n    return new BigNumber(stakingLimit)\r\n  } catch (error) {\r\n    return BIG_ZERO\r\n  }\r\n}\r\n\r\nexport const fetchPoolsStakingLimits = async (\r\n  poolsWithStakingLimit: number[],\r\n): Promise<{ [key: string]: BigNumber }> => {\r\n  const validPools = poolsConfig\r\n    .filter((p) => p.stakingToken.symbol !== 'BNB' && !p.isFinished)\r\n    .filter((p) => !poolsWithStakingLimit.includes(p.sousId))\r\n\r\n  // Get the staking limit for each valid pool\r\n  // Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\r\n  const stakingLimitPromises = validPools.map((validPool) => fetchPoolStakingLimit(validPool.sousId))\r\n  const stakingLimits = await Promise.all(stakingLimitPromises)\r\n\r\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\r\n    return {\r\n      ...accum,\r\n      [validPools[index].sousId]: stakingLimit,\r\n    }\r\n  }, {})\r\n}\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterchefContract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport web3NoAccount from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst masterChefContract = getMasterchefContract()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3NoAccount.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  // const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances,}\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  // const pendingReward = await masterChefContract.methods.pendingCake('0', account).call()\r\n\r\n  return { ...pendingRewards, }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nexport const fetchPublicVaultData = async () => {\r\n  try {\r\n    const calls = [\r\n      'getPricePerFullShare',\r\n      'totalShares',\r\n      'calculateHarvestCakeRewards',\r\n      'calculateTotalPendingCakeRewards',\r\n    ].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\r\n      cakeVaultAbi,\r\n      calls,\r\n    )\r\n\r\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\r\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\r\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n    return {\r\n      totalShares: totalSharesAsBigNumber.toJSON(),\r\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\r\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\r\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\r\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      totalShares: null,\r\n      pricePerFullShare: null,\r\n      totalCakeInVault: null,\r\n      estimatedCakeBountyReward: null,\r\n      totalPendingCakeHarvest: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchVaultFees = async () => {\r\n  try {\r\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\r\n\r\n    return {\r\n      performanceFee: performanceFee.toNumber(),\r\n      callFee: callFee.toNumber(),\r\n      withdrawalFee: withdrawalFee.toNumber(),\r\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPublicVaultData\r\n","import BigNumber from 'bignumber.js'\r\nimport { getCakeVaultContract } from 'utils/contractHelpers'\r\n\r\nconst cakeVaultContract = getCakeVaultContract()\r\n\r\nconst fetchVaultUser = async (account: string) => {\r\n  try {\r\n    const userContractResponse = await cakeVaultContract.methods.userInfo(account).call()\r\n    return {\r\n      isLoading: false,\r\n      userShares: new BigNumber(userContractResponse.shares).toJSON(),\r\n      lastDepositedTime: userContractResponse.lastDepositedTime as string,\r\n      lastUserActionTime: userContractResponse.lastUserActionTime as string,\r\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isLoading: true,\r\n      userShares: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n      cakeAtLastUserAction: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchVaultUser\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { PoolsState, Pool, CakeVault, VaultFees, VaultUser, AppThunk } from 'state/types'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\r\nimport fetchVaultUser from './fetchVaultUser'\r\nimport { getTokenPricesFromFarm } from './helpers'\r\n\r\nconst initialState: PoolsState = {\r\n  data: [...poolsConfig],\r\n  userDataLoaded: false,\r\n  cakeVault: {\r\n    totalShares: null,\r\n    pricePerFullShare: null,\r\n    totalCakeInVault: null,\r\n    estimatedCakeBountyReward: null,\r\n    totalPendingCakeHarvest: null,\r\n    fees: {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    },\r\n    userData: {\r\n      isLoading: true,\r\n      userShares: null,\r\n      cakeAtLastUserAction: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n    },\r\n  },\r\n}\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = (currentBlock: number) => async (dispatch, getState) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n\r\n  const prices = getTokenPricesFromFarm(getState().farms.data)\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false\r\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded\r\n\r\n    const stakingTokenAddress = pool.stakingToken.address ? getAddress(pool.stakingToken.address).toLowerCase() : null\r\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\r\n\r\n    const earningTokenAddress = pool.earningToken.address ? getAddress(pool.earningToken.address).toLowerCase() : null\r\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\r\n    const apr = !isPoolFinished\r\n      ? getPoolApr(\r\n          stakingTokenPrice,\r\n          earningTokenPrice,\r\n          getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals),\r\n          parseFloat(pool.tokenPerBlock),\r\n        )\r\n      : 0\r\n\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n      stakingTokenPrice,\r\n      earningTokenPrice,\r\n      apr,\r\n      isFinished: isPoolFinished,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\r\n  const poolsWithStakingLimit = getState()\r\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\r\n    .map((pool) => pool.sousId)\r\n\r\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\r\n\r\n  const stakingLimitData = poolsConfig.map((pool) => {\r\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\r\n      return { sousId: pool.sousId }\r\n    }\r\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\r\n    return {\r\n      sousId: pool.sousId,\r\n      stakingLimit: stakingLimit.toJSON(),\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(stakingLimitData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync =\r\n  (account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    const stakingTokenBalances = await fetchUserBalances(account)\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n    const userData = poolsConfig.map((pool) => ({\r\n      sousId: pool.sousId,\r\n      allowance: allowances[pool.sousId],\r\n      stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n      stakedBalance: stakedBalances[pool.sousId],\r\n      pendingReward: pendingRewards[pool.sousId],\r\n    }))\r\n\r\n    dispatch(setPoolsUserData(userData))\r\n  }\r\n\r\nexport const updateUserAllowance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n  }\r\n\r\nexport const updateUserBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const tokenBalances = await fetchUserBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserStakedBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserPendingReward =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n  }\r\n\r\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\r\n  const publicVaultInfo = await fetchPublicVaultData()\r\n  return publicVaultInfo\r\n})\r\n\r\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\r\n  const vaultFees = await fetchVaultFees()\r\n  return vaultFees\r\n})\r\n\r\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\r\n  'cakeVault/fetchUser',\r\n  async ({ account }) => {\r\n    const userData = await fetchVaultUser(account)\r\n    return userData\r\n  },\r\n)\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n      state.userDataLoaded = true\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n\r\n      if (index >= 0) {\r\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Vault public data that updates frequently\r\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\r\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\r\n    })\r\n    // Vault fees\r\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\r\n      const fees = action.payload\r\n      state.cakeVault = { ...state.cakeVault, fees }\r\n    })\r\n    // Vault user data\r\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\r\n      const userData = action.payload\r\n      userData.isLoading = false\r\n      state.cakeVault = { ...state.cakeVault, userData }\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\nexport default PoolsSlice.reducer\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\r\nimport { Bet, BetPosition, Market, PredictionStatus, Round, RoundData } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport { getPredictionsAddress } from 'utils/addressHelpers'\r\nimport {\r\n  BetResponse,\r\n  getRoundBaseFields,\r\n  getBetBaseFields,\r\n  getUserBaseFields,\r\n  RoundResponse,\r\n  MarketResponse,\r\n  TotalWonMarketResponse,\r\n  TotalWonRoundResponse,\r\n} from './queries'\r\n\r\nexport enum Result {\r\n  WIN = 'win',\r\n  LOSE = 'lose',\r\n  CANCELED = 'canceled',\r\n  LIVE = 'live',\r\n}\r\n\r\nexport const numberOrNull = (value: string) => {\r\n  if (value === null) {\r\n    return null\r\n  }\r\n\r\n  const valueNum = Number(value)\r\n  return Number.isNaN(valueNum) ? null : valueNum\r\n}\r\n\r\nexport const makeFutureRoundResponse = (epoch: number, startBlock: number): RoundResponse => {\r\n  return {\r\n    id: epoch.toString(),\r\n    epoch: epoch.toString(),\r\n    startBlock: startBlock.toString(),\r\n    failed: null,\r\n    startAt: null,\r\n    lockAt: null,\r\n    lockBlock: null,\r\n    lockPrice: null,\r\n    endBlock: null,\r\n    closePrice: null,\r\n    totalBets: '0',\r\n    totalAmount: '0',\r\n    bearBets: '0',\r\n    bullBets: '0',\r\n    bearAmount: '0',\r\n    bullAmount: '0',\r\n    position: null,\r\n    bets: [],\r\n  }\r\n}\r\n\r\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\r\n  const bet = {\r\n    id: betResponse.id,\r\n    hash: betResponse.hash,\r\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\r\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\r\n    claimed: betResponse.claimed,\r\n    claimedHash: betResponse.claimedHash,\r\n    user: {\r\n      id: betResponse.user.id,\r\n      address: betResponse.user.address,\r\n      block: numberOrNull(betResponse.user.block),\r\n      totalBets: numberOrNull(betResponse.user.totalBets),\r\n      totalBNB: numberOrNull(betResponse.user.totalBNB),\r\n    },\r\n  } as Bet\r\n\r\n  if (betResponse.round) {\r\n    bet.round = transformRoundResponse(betResponse.round)\r\n  }\r\n\r\n  return bet\r\n}\r\n\r\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\r\n  const {\r\n    id,\r\n    epoch,\r\n    failed,\r\n    startBlock,\r\n    startAt,\r\n    lockAt,\r\n    lockBlock,\r\n    lockPrice,\r\n    endBlock,\r\n    closePrice,\r\n    totalBets,\r\n    totalAmount,\r\n    bullBets,\r\n    bearBets,\r\n    bearAmount,\r\n    bullAmount,\r\n    position,\r\n    bets = [],\r\n  } = roundResponse\r\n\r\n  const getRoundPosition = (positionResponse: string) => {\r\n    if (positionResponse === 'Bull') {\r\n      return BetPosition.BULL\r\n    }\r\n\r\n    if (positionResponse === 'Bear') {\r\n      return BetPosition.BEAR\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return {\r\n    id,\r\n    failed,\r\n    epoch: numberOrNull(epoch),\r\n    startBlock: numberOrNull(startBlock),\r\n    startAt: numberOrNull(startAt),\r\n    lockAt: numberOrNull(lockAt),\r\n    lockBlock: numberOrNull(lockBlock),\r\n    lockPrice: lockPrice ? parseFloat(lockPrice) : null,\r\n    endBlock: numberOrNull(endBlock),\r\n    closePrice: closePrice ? parseFloat(closePrice) : null,\r\n    totalBets: numberOrNull(totalBets),\r\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\r\n    bullBets: numberOrNull(bullBets),\r\n    bearBets: numberOrNull(bearBets),\r\n    bearAmount: numberOrNull(bearAmount),\r\n    bullAmount: numberOrNull(bullAmount),\r\n    position: getRoundPosition(position),\r\n    bets: bets.map(transformBetResponse),\r\n  }\r\n}\r\n\r\nexport const transformMarketResponse = (marketResponse: MarketResponse): Market => {\r\n  return {\r\n    id: marketResponse.id,\r\n    paused: marketResponse.paused,\r\n    epoch: Number(marketResponse.epoch.epoch),\r\n  }\r\n}\r\n\r\nexport const transformTotalWonResponse = (\r\n  marketResponse: TotalWonMarketResponse,\r\n  roundResponse: TotalWonRoundResponse[],\r\n): number => {\r\n  const houseRounds = roundResponse.reduce((accum, round) => {\r\n    return accum + (round.totalAmount ? parseFloat(round.totalAmount) : 0)\r\n  }, 0)\r\n\r\n  const totalBNB = marketResponse.totalBNB ? parseFloat(marketResponse.totalBNB) : 0\r\n  const totalBNBTreasury = marketResponse.totalBNBTreasury ? parseFloat(marketResponse.totalBNBTreasury) : 0\r\n\r\n  return Math.max(totalBNB - (totalBNBTreasury + houseRounds), 0)\r\n}\r\n\r\nexport const makeRoundData = (rounds: Round[]): RoundData => {\r\n  return rounds.reduce((accum, round) => {\r\n    return {\r\n      ...accum,\r\n      [round.id]: round,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\r\n  const { round } = bet\r\n  if (round.failed) {\r\n    return Result.CANCELED\r\n  }\r\n\r\n  if (round.epoch >= currentEpoch - 1) {\r\n    return Result.LIVE\r\n  }\r\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n\r\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\r\n}\r\n\r\n/**\r\n * Given a bet object, check if it is eligible to be claimed or refunded\r\n */\r\nexport const getCanClaim = (bet: Bet) => {\r\n  return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\r\n}\r\n\r\n/**\r\n * Returns only bets where the user has won.\r\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\r\n */\r\nexport const getUnclaimedWinningBets = (bets: Bet[]): Bet[] => {\r\n  return bets.filter(getCanClaim)\r\n}\r\n\r\n/**\r\n * Gets static data from the contract\r\n */\r\nexport const getStaticPredictionsData = async () => {\r\n  const calls = ['currentEpoch', 'intervalBlocks', 'minBetAmount', 'paused', 'bufferBlocks'].map((method) => ({\r\n    address: getPredictionsAddress(),\r\n    name: method,\r\n  }))\r\n  const [[currentEpoch], [intervalBlocks], [minBetAmount], [isPaused], [bufferBlocks]] = await multicallv2(\r\n    predictionsAbi,\r\n    calls,\r\n  )\r\n\r\n  return {\r\n    status: isPaused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\r\n    currentEpoch: currentEpoch.toNumber(),\r\n    intervalBlocks: intervalBlocks.toNumber(),\r\n    bufferBlocks: bufferBlocks.toNumber(),\r\n    minBetAmount: minBetAmount.toNumber(),\r\n  }\r\n}\r\n\r\nexport const getMarketData = async (): Promise<{\r\n  rounds: Round[]\r\n  market: Market\r\n}> => {\r\n  const response = (await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getMarketData {\r\n        rounds(first: 5, orderBy: epoch, orderDirection: desc) {\r\n          ${getRoundBaseFields()}\r\n        }\r\n        market(id: 1) {\r\n          id\r\n          paused\r\n          epoch {\r\n            epoch\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  )) as { rounds: RoundResponse[]; market: MarketResponse }\r\n\r\n  return {\r\n    rounds: response.rounds.map(transformRoundResponse),\r\n    market: transformMarketResponse(response.market),\r\n  }\r\n}\r\n\r\nexport const getTotalWon = async (): Promise<number> => {\r\n  const response = (await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getTotalWonData($position: String) {\r\n        market(id: 1) {\r\n          totalBNB\r\n          totalBNBTreasury\r\n        }\r\n        rounds(where: { position: $position }) {\r\n          totalAmount\r\n        }\r\n      }\r\n    `,\r\n    { position: BetPosition.HOUSE },\r\n  )) as { market: TotalWonMarketResponse; rounds: TotalWonRoundResponse[] }\r\n\r\n  return transformTotalWonResponse(response.market, response.rounds)\r\n}\r\n\r\nexport const getRound = async (id: string) => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getRound($id: ID!) {\r\n        round(id: $id) {\r\n          ${getRoundBaseFields()}\r\n          bets {\r\n           ${getBetBaseFields()}\r\n            user {\r\n             ${getUserBaseFields()}\r\n            }\r\n          }\r\n        }\r\n      }\r\n  `,\r\n    { id },\r\n  )\r\n  return response.round\r\n}\r\n\r\ntype BetHistoryWhereClause = Record<string, string | number | boolean | string[]>\r\n\r\nexport const getBetHistory = async (\r\n  where: BetHistoryWhereClause = {},\r\n  first = 1000,\r\n  skip = 0,\r\n): Promise<BetResponse[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\r\n        bets(first: $first, skip: $skip, where: $where) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getBet = async (betId: string): Promise<BetResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBet($id: ID!) {\r\n        bet(id: $id) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: betId.toLowerCase(),\r\n    },\r\n  )\r\n  return response.bet\r\n}\r\n","export interface UserResponse {\r\n  id: string\r\n  address: string\r\n  block: string\r\n  totalBets: string\r\n  totalBNB: string\r\n  bets?: BetResponse[]\r\n}\r\n\r\nexport interface BetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  claimedHash: string\r\n  user?: UserResponse\r\n  round?: RoundResponse\r\n}\r\n\r\nexport interface HistoricalBetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  user?: UserResponse\r\n  round: {\r\n    id: string\r\n    epoch: string\r\n  }\r\n}\r\n\r\nexport interface RoundResponse {\r\n  id: string\r\n  epoch: string\r\n  failed: boolean\r\n  startBlock: string\r\n  startAt: string\r\n  lockAt: string\r\n  lockBlock: string\r\n  lockPrice: string\r\n  endBlock: string\r\n  closePrice: string\r\n  totalBets: string\r\n  totalAmount: string\r\n  bearBets: string\r\n  bullBets: string\r\n  bearAmount: string\r\n  bullAmount: string\r\n  position: string\r\n  bets: BetResponse[]\r\n}\r\n\r\nexport interface MarketResponse {\r\n  id: string\r\n  paused: boolean\r\n  epoch: {\r\n    epoch: string\r\n  }\r\n}\r\n\r\nexport interface TotalWonMarketResponse {\r\n  totalBNB: string\r\n  totalBNBTreasury: string\r\n}\r\n\r\nexport interface TotalWonRoundResponse {\r\n  totalAmount: string\r\n}\r\n\r\n/**\r\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\r\n */\r\nexport const getRoundBaseFields = () => `\r\n  id\r\n  epoch\r\n  failed\r\n  startAt\r\n  startBlock\r\n  lockAt\r\n  lockBlock\r\n  lockPrice\r\n  endAt\r\n  endBlock\r\n  closePrice\r\n  totalBets\r\n  totalAmount\r\n  bullBets\r\n  bullAmount\r\n  bearBets\r\n  bearAmount\r\n  position\r\n`\r\n\r\nexport const getBetBaseFields = () => `\r\n  id\r\n  hash  \r\n  amount\r\n  position\r\n  claimed\r\n  claimedHash\r\n`\r\n\r\nexport const getUserBaseFields = () => `\r\n  id\r\n  address\r\n  block\r\n  totalBets\r\n  totalBNB\r\n`\r\n","import { Language } from '@pancakeswap/uikit'\r\n\r\nexport const AR: Language = { locale: 'ar-SA', language: 'العربية', code: 'ar' }\r\nexport const BN: Language = { locale: 'bn-BD', language: 'বাংলা', code: 'bn' }\r\nexport const EN: Language = { locale: 'en-US', language: 'English', code: 'en' }\r\nexport const DE: Language = { locale: 'de-DE', language: 'Deutsch', code: 'de' }\r\nexport const EL: Language = { locale: 'el-GR', language: 'Ελληνικά', code: 'el' }\r\nexport const ESES: Language = { locale: 'es-ES', language: 'Español', code: 'es-ES' }\r\nexport const FI: Language = { locale: 'fi-FI', language: 'Suomalainen', code: 'fi' }\r\nexport const FIL: Language = { locale: 'fil-PH', language: 'Filipino', code: 'fil' }\r\nexport const FR: Language = { locale: 'fr-FR', language: 'Français', code: 'fr' }\r\nexport const HI: Language = { locale: 'hi-IN', language: 'हिंदी', code: 'hi' }\r\nexport const HU: Language = { locale: 'hu-HU', language: 'Magyar', code: 'hu' }\r\nexport const ID: Language = { locale: 'id-ID', language: 'Bahasa Indonesia', code: 'id' }\r\nexport const IT: Language = { locale: 'it-IT', language: 'Italiano', code: 'it' }\r\nexport const JA: Language = { locale: 'ja-JP', language: '日本語', code: 'ja' }\r\nexport const KO: Language = { locale: 'ko-KR', language: '한국어', code: 'ko' }\r\nexport const NL: Language = { locale: 'nl-NL', language: 'Nederlands', code: 'nl' }\r\nexport const PL: Language = { locale: 'pl-PL', language: 'Polski', code: 'pl' }\r\nexport const PTBR: Language = { locale: 'pt-BR', language: 'Português (Brazil)', code: 'pt-br' }\r\nexport const PTPT: Language = { locale: 'pt-PT', language: 'Português', code: 'pt-pt' }\r\nexport const RO: Language = { locale: 'ro-RO', language: 'Română', code: 'ro' }\r\nexport const RU: Language = { locale: 'ru-RU', language: 'Русский', code: 'ru' }\r\nexport const SVSE: Language = { locale: 'sv-SE', language: 'Svenska', code: 'sv' }\r\nexport const TA: Language = { locale: 'ta-IN', language: 'தமிழ்', code: 'ta' }\r\nexport const TR: Language = { locale: 'tr-TR', language: 'Türkçe', code: 'tr' }\r\nexport const UK: Language = { locale: 'uk-UA', language: 'Українська', code: 'uk' }\r\nexport const VI: Language = { locale: 'vi-VN', language: 'Tiếng Việt', code: 'vi' }\r\nexport const ZHCN: Language = { locale: 'zh-CN', language: '简体中文', code: 'zh-cn' }\r\nexport const ZHTW: Language = { locale: 'zh-TW', language: '繁體中文', code: 'zh-tw' }\r\n\r\nexport const languages = {\r\n  'ar-SA': AR,\r\n  'bn-BD': BN,\r\n  'en-US': EN,\r\n  'de-DE': DE,\r\n  'el-GR': EL,\r\n  'es-ES': ESES,\r\n  'fi-FI': FI,\r\n  'fil-PH': FIL,\r\n  'fr-FR': FR,\r\n  'hi-IN': HI,\r\n  'hu-HU': HU,\r\n  'id-ID': ID,\r\n  'it-IT': IT,\r\n  'ja-JP': JA,\r\n  'ko-KR': KO,\r\n  'nl-NL': NL,\r\n  'pl-PL': PL,\r\n  'pt-BR': PTBR,\r\n  'pt-PT': PTPT,\r\n  'ro-RO': RO,\r\n  'ru-RU': RU,\r\n  'sv-SE': SVSE,\r\n  'ta-IN': TA,\r\n  'tr-TR': TR,\r\n  'uk-UA': UK,\r\n  'vi-VN': VI,\r\n  'zh-CN': ZHCN,\r\n  'zh-TW': ZHTW,\r\n}\r\n\r\nexport const languageList = Object.values(languages)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { ARCHIVED_NODE } from 'config/constants/endpoints'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\n\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\nconst web3NoAccount = new Web3(httpProvider)\r\n\r\nconst archivedHttpProvider = new Web3.providers.HttpProvider(ARCHIVED_NODE, { timeout: 10000 } as HttpProviderOptions)\r\nexport const web3WithArchivedNodeProvider = new Web3(archivedHttpProvider)\r\n\r\nexport const getWeb3NoAccount = (chainID) => {\r\n  const RPC_URL2 = getRpcUrl(chainID)\r\n  const httpProvider2 = new Web3.providers.HttpProvider(RPC_URL2, { timeout: 10000 } as HttpProviderOptions)\r\n  return new Web3(httpProvider2)\r\n}\r\n\r\nexport default web3NoAccount\r\n","import { Profile } from 'state/types'\r\n\r\nexport type ProfileResponse = {\r\n  0: string\r\n  1: string\r\n  2: string\r\n  3: string\r\n  4: string\r\n  5: boolean\r\n}\r\n\r\nexport const transformProfileResponse = (profileResponse: ProfileResponse): Partial<Profile> => {\r\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: nftAddress, 4: tokenId, 5: isActive } = profileResponse\r\n\r\n  return {\r\n    userId: Number(userId),\r\n    points: Number(numberPoints),\r\n    teamId: Number(teamId),\r\n    tokenId: Number(tokenId),\r\n    nftAddress,\r\n    isActive,\r\n  }\r\n}\r\n","import Cookies from 'js-cookie'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport { getNftByTokenId } from 'utils/collectibles'\r\nimport { Profile } from 'state/types'\r\nimport { getTeam } from 'state/teams/helpers'\r\nimport { transformProfileResponse } from './helpers'\r\n\r\nconst profileContract = getProfileContract()\r\nconst profileApi = process.env.REACT_APP_API_PROFILE\r\n\r\nexport interface GetProfileResponse {\r\n  hasRegistered: boolean\r\n  profile?: Profile\r\n}\r\n\r\nconst getUsername = async (address: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${profileApi}/api/users/${address}`)\r\n\r\n    if (!response.ok) {\r\n      return ''\r\n    }\r\n\r\n    const { username = '' } = await response.json()\r\n\r\n    return username\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\r\n  try {\r\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\r\n\r\n    if (!hasRegistered) {\r\n      return { hasRegistered, profile: null }\r\n    }\r\n\r\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\r\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\r\n    const team = await getTeam(teamId)\r\n    const username = await getUsername(address)\r\n\r\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\r\n    // so only fetch the nft data if active\r\n    let nft: Nft\r\n    if (isActive) {\r\n      nft = await getNftByTokenId(nftAddress, tokenId)\r\n\r\n      // Save the preview image in a cookie so it can be used on the exchange\r\n      Cookies.set(\r\n        `profile_${address}`,\r\n        {\r\n          username,\r\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\r\n        },\r\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\r\n      )\r\n    }\r\n\r\n    const profile = {\r\n      userId,\r\n      points,\r\n      teamId,\r\n      tokenId,\r\n      username,\r\n      nftAddress,\r\n      isActive,\r\n      nft,\r\n      team,\r\n    } as Profile\r\n\r\n    return { hasRegistered, profile }\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default getProfile\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ProfileState } from 'state/types'\r\nimport type { AppDispatch } from 'state'\r\nimport getProfile, { GetProfileResponse } from './getProfile'\r\n\r\nconst initialState: ProfileState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  hasRegistered: false,\r\n  data: null,\r\n}\r\n\r\nexport const profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState,\r\n  reducers: {\r\n    profileFetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    profileFetchSucceeded: (_state, action: PayloadAction<GetProfileResponse>) => {\r\n      const { profile, hasRegistered } = action.payload\r\n\r\n      return {\r\n        isInitialized: true,\r\n        isLoading: false,\r\n        hasRegistered,\r\n        data: profile,\r\n      }\r\n    },\r\n    profileFetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    profileClear: () => ({\r\n      ...initialState,\r\n      isLoading: false,\r\n    }),\r\n    addPoints: (state, action: PayloadAction<number>) => {\r\n      state.data.points += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { profileFetchStart, profileFetchSucceeded, profileFetchFailed, profileClear, addPoints } =\r\n  profileSlice.actions\r\n\r\n// Thunks\r\n// TODO: this should be an AsyncThunk\r\nexport const fetchProfile = (address: string) => async (dispatch: AppDispatch) => {\r\n  try {\r\n    dispatch(profileFetchStart())\r\n    const response = await getProfile(address)\r\n    dispatch(profileFetchSucceeded(response))\r\n  } catch (error) {\r\n    dispatch(profileFetchFailed())\r\n  }\r\n}\r\n\r\nexport default profileSlice.reducer\r\n","const tokens = {\r\n  sfuel: {\r\n    symbol: 'SFUEL',\r\n    address: {\r\n      56: '0x37ac4d6140e54304d77437a5c11924f61a2d976f',\r\n      97: '0x37ac4d6140e54304d77437a5c11924f61a2d976f',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://sparkpoint.io/',\r\n  },\r\n  bnb: {\r\n    symbol: 'BNB',\r\n    projectLink: 'https://www.binance.com/',\r\n  },\r\n  cake: {\r\n    symbol: 'CAKE',\r\n    address: {\r\n      56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\r\n      97: '0xa35062141Fa33BCA92Ce69FeD37D0E8908868AAe',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n  },\r\n  txl: {\r\n    symbol: 'TXL',\r\n    address: {\r\n      56: '0x1FFD0b47127fdd4097E54521C9E2c7f0D66AafC5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://tixl.org/',\r\n  },\r\n  cos: {\r\n    symbol: 'COS',\r\n    address: {\r\n      56: '0x96Dd399F9c3AFda1F194182F71600F1B65946501',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.contentos.io/',\r\n  },\r\n  bunny: {\r\n    symbol: 'BUNNY',\r\n    address: {\r\n      56: '0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://pancakebunny.finance/',\r\n  },\r\n  alice: {\r\n    symbol: 'ALICE',\r\n    address: {\r\n      56: '0xAC51066d7bEC65Dc4589368da368b212745d63E8',\r\n      97: '',\r\n    },\r\n    decimals: 6,\r\n    projectLink: 'https://www.myneighboralice.com/',\r\n  },\r\n  for: {\r\n    symbol: 'FOR',\r\n    address: {\r\n      56: '0x658A109C5900BC6d2357c87549B651670E5b0539',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.for.tube/home',\r\n  },\r\n  bux: {\r\n    symbol: 'BUX',\r\n    address: {\r\n      56: '0x211FfbE424b90e25a15531ca322adF1559779E45',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://getbux.com/bux-crypto/',\r\n  },\r\n  nuls: {\r\n    symbol: 'NULS',\r\n    address: {\r\n      56: '0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://www.nuls.io/',\r\n  },\r\n  belt: {\r\n    symbol: 'BELT',\r\n    address: {\r\n      56: '0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://beta.belt.fi/',\r\n  },\r\n  ramp: {\r\n    symbol: 'RAMP',\r\n    address: {\r\n      56: '0x8519EA49c997f50cefFa444d240fB655e89248Aa',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://rampdefi.com/',\r\n  },\r\n  bfi: {\r\n    symbol: 'BFI',\r\n    address: {\r\n      56: '0x81859801b01764D4f0Fa5E64729f5a6C3b91435b',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bearn.fi/',\r\n  },\r\n  dexe: {\r\n    symbol: 'DEXE',\r\n    address: {\r\n      56: '0x039cB485212f996A9DBb85A9a75d898F94d38dA6',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://dexe.network/',\r\n  },\r\n  bel: {\r\n    symbol: 'BEL',\r\n    address: {\r\n      56: '0x8443f091997f06a61670B735ED92734F5628692F',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bella.fi/',\r\n  },\r\n  tpt: {\r\n    symbol: 'TPT',\r\n    address: {\r\n      56: '0xECa41281c24451168a37211F0bc2b8645AF45092',\r\n      97: '',\r\n    },\r\n    decimals: 4,\r\n    projectLink: 'https://www.tokenpocket.pro/',\r\n  },\r\n  watch: {\r\n    symbol: 'WATCH',\r\n    address: {\r\n      56: '0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://yieldwatch.net/',\r\n  },\r\n  xmark: {\r\n    symbol: 'xMARK',\r\n    address: {\r\n      56: '0x26A5dFab467d4f58fB266648CAe769503CEC9580',\r\n      97: '',\r\n    },\r\n    decimals: 9,\r\n    projectLink: 'https://benchmarkprotocol.finance/',\r\n  },\r\n  bmxx: {\r\n    symbol: 'bMXX',\r\n    address: {\r\n      56: '0x4131b87F74415190425ccD873048C708F8005823',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://multiplier.finance/',\r\n  },\r\n  iotx: {\r\n    symbol: 'IOTX',\r\n    address: {\r\n      56: '0x9678E42ceBEb63F23197D726B29b1CB20d0064E5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://iotex.io/',\r\n  },\r\n  bor: {\r\n    symbol: 'BOR',\r\n    address: {\r\n      56: '0x92D7756c60dcfD4c689290E8A9F4d263b3b32241',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.boringdao.com/',\r\n  },\r\n  bopen: {\r\n    symbol: 'bOPEN',\r\n    address: {\r\n      56: '0xF35262a9d427F96d2437379eF090db986eaE5d42',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://opendao.io/',\r\n  },\r\n  dodo: {\r\n    symbol: 'DODO',\r\n    address: {\r\n      56: '0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://dodoex.io/',\r\n  },\r\n  swingby: {\r\n    symbol: 'SWINGBY',\r\n    address: {\r\n      56: '0x71DE20e0C4616E7fcBfDD3f875d568492cBE4739',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://swingby.network/',\r\n  },\r\n  bry: {\r\n    symbol: 'BRY',\r\n    address: {\r\n      56: '0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://berrydata.co/',\r\n  },\r\n  zee: {\r\n    symbol: 'ZEE',\r\n    address: {\r\n      56: '0x44754455564474A89358B2C2265883DF993b12F0',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://zeroswap.io/',\r\n  },\r\n  swgb: {\r\n    symbol: 'SWGb',\r\n    address: {\r\n      56: '0xe40255c5d7fa7ceec5120408c78c787cecb4cfdb',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://swirgepay.com/',\r\n  },\r\n  swg: {\r\n    symbol: 'SWG',\r\n    address: {\r\n      56: '0xe792f64C582698b8572AAF765bDC426AC3aEfb6B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://swirgepay.com/',\r\n  },\r\n  sfp: {\r\n    symbol: 'SFP',\r\n    address: {\r\n      56: '0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.safepal.io/',\r\n  },\r\n  lina: {\r\n    symbol: 'LINA',\r\n    address: {\r\n      56: '0x762539b45A1dCcE3D36d080F74d1AED37844b878',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://linear.finance/',\r\n  },\r\n  lit: {\r\n    symbol: 'LIT',\r\n    address: {\r\n      56: '0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.litentry.com/',\r\n  },\r\n  hget: {\r\n    symbol: 'HGET',\r\n    address: {\r\n      56: '0xC7d8D35EBA58a0935ff2D5a33Df105DD9f071731',\r\n      97: '',\r\n    },\r\n    decimals: 6,\r\n    projectLink: 'https://www.hedget.com/',\r\n  },\r\n  bdo: {\r\n    symbol: 'BDO',\r\n    address: {\r\n      56: '0x190b589cf9Fb8DDEabBFeae36a813FFb2A702454',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bdollar.fi/',\r\n  },\r\n  egld: {\r\n    symbol: 'EGLD',\r\n    address: {\r\n      56: '0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://elrond.com/',\r\n  },\r\n  ust: {\r\n    symbol: 'UST',\r\n    address: {\r\n      56: '0x23396cf899ca06c4472205fc903bdb4de249d6fc',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  wsote: {\r\n    symbol: 'wSOTE',\r\n    address: {\r\n      56: '0x541E619858737031A1244A5d0Cd47E5ef480342c',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://soteria.finance/#/',\r\n  },\r\n  front: {\r\n    symbol: 'FRONT',\r\n    address: {\r\n      56: '0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://frontier.xyz/',\r\n  },\r\n  helmet: {\r\n    symbol: 'Helmet',\r\n    address: {\r\n      56: '0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.helmet.insure/',\r\n  },\r\n  btcst: {\r\n    symbol: 'BTCST',\r\n    address: {\r\n      56: '0x78650B139471520656b9E7aA7A5e9276814a38e9',\r\n      97: '',\r\n    },\r\n    decimals: 17,\r\n    projectLink: 'https://www.1-b.tc/',\r\n  },\r\n  bscx: {\r\n    symbol: 'BSCX',\r\n    address: {\r\n      56: '0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bscex.org/',\r\n  },\r\n  ten: {\r\n    symbol: 'TEN',\r\n    address: {\r\n      56: '0xdFF8cb622790b7F92686c722b02CaB55592f152C',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.tenet.farm/',\r\n  },\r\n  balbt: {\r\n    symbol: 'bALBT',\r\n    address: {\r\n      56: '0x72fAa679E1008Ad8382959FF48E392042A8b06f7',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://allianceblock.io/',\r\n  },\r\n  asr: {\r\n    symbol: 'ASR',\r\n    address: {\r\n      56: '0x80D5f92C2c8C682070C95495313dDB680B267320',\r\n      97: '',\r\n    },\r\n    decimals: 2,\r\n    projectLink: 'https://www.chiliz.com',\r\n  },\r\n  atm: {\r\n    symbol: 'ATM',\r\n    address: {\r\n      56: '0x25E9d05365c867E59C1904E7463Af9F312296f9E',\r\n      97: '',\r\n    },\r\n    decimals: 2,\r\n    projectLink: 'https://www.chiliz.com',\r\n  },\r\n  og: {\r\n    symbol: 'OG',\r\n    address: {\r\n      56: '0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c',\r\n      97: '',\r\n    },\r\n    decimals: 2,\r\n    projectLink: 'https://www.chiliz.com',\r\n  },\r\n  reef: {\r\n    symbol: 'REEF',\r\n    address: {\r\n      56: '0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://reef.finance/',\r\n  },\r\n  ditto: {\r\n    symbol: 'DITTO',\r\n    address: {\r\n      56: '0x233d91A0713155003fc4DcE0AFa871b508B3B715',\r\n      97: '',\r\n    },\r\n    decimals: 9,\r\n    projectLink: 'https://ditto.money/',\r\n  },\r\n  juv: {\r\n    symbol: 'JUV',\r\n    address: {\r\n      56: '0xC40C9A843E1c6D01b7578284a9028854f6683b1B',\r\n      97: '',\r\n    },\r\n    decimals: 2,\r\n    projectLink: 'https://www.chiliz.com',\r\n  },\r\n  psg: {\r\n    symbol: 'PSG',\r\n    address: {\r\n      56: '0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1',\r\n      97: '',\r\n    },\r\n    decimals: 2,\r\n    projectLink: 'https://www.chiliz.com',\r\n  },\r\n  vai: {\r\n    symbol: 'VAI',\r\n    address: {\r\n      56: '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://venus.io/',\r\n  },\r\n  wbnb: {\r\n    symbol: 'wBNB',\r\n    address: {\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n  },\r\n  blink: {\r\n    symbol: 'BLINK',\r\n    address: {\r\n      56: '0x63870A18B6e42b01Ef1Ad8A2302ef50B7132054F',\r\n      97: '',\r\n    },\r\n    decimals: 6,\r\n    projectLink: 'https://blink.wink.org',\r\n  },\r\n  unfi: {\r\n    symbol: 'UNFI',\r\n    address: {\r\n      56: '0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://unifiprotocol.com',\r\n  },\r\n  twt: {\r\n    symbol: 'TWT',\r\n    address: {\r\n      56: '0x4B0F1812e5Df2A09796481Ff14017e6005508003',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://trustwallet.com/',\r\n  },\r\n  hard: {\r\n    symbol: 'HARD',\r\n    address: {\r\n      56: '0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4',\r\n      97: '',\r\n    },\r\n    decimals: 6,\r\n    projectLink: 'https://hard.kava.io',\r\n  },\r\n  broobee: {\r\n    symbol: 'bROOBEE',\r\n    address: {\r\n      56: '0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://roobee.io/',\r\n  },\r\n  stax: {\r\n    symbol: 'STAX',\r\n    address: {\r\n      56: '0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'http://stablexswap.com/',\r\n  },\r\n  nar: {\r\n    symbol: 'NAR',\r\n    address: {\r\n      56: '0xA1303E6199b319a891b79685F0537D289af1FC83',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://narwhalswap.org/',\r\n  },\r\n  nya: {\r\n    symbol: 'NYA',\r\n    address: {\r\n      56: '0xbFa0841F7a90c4CE6643f651756EE340991F99D5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://nyanswop.org/',\r\n  },\r\n  ctk: {\r\n    symbol: 'CTK',\r\n    address: {\r\n      56: '0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929',\r\n      97: '',\r\n    },\r\n    decimals: 6,\r\n    projectLink: 'https://www.certik.foundation/',\r\n  },\r\n  inj: {\r\n    symbol: 'INJ',\r\n    address: {\r\n      56: '0xa2B726B1145A4773F68593CF171187d8EBe4d495',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://injectiveprotocol.com/',\r\n  },\r\n  sxp: {\r\n    symbol: 'SXP',\r\n    address: {\r\n      56: '0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://swipe.io/',\r\n  },\r\n  alpha: {\r\n    symbol: 'ALPHA',\r\n    address: {\r\n      56: '0xa1faa113cbE53436Df28FF0aEe54275c13B40975',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://alphafinance.io/',\r\n  },\r\n  xvs: {\r\n    symbol: 'XVS',\r\n    address: {\r\n      56: '0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://venus.io/',\r\n  },\r\n  sushi: {\r\n    symbol: 'SUSHI',\r\n    address: {\r\n      56: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://sushi.com/',\r\n  },\r\n  comp: {\r\n    symbol: 'COMP',\r\n    address: {\r\n      56: '0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://compound.finance/',\r\n  },\r\n  syrup: {\r\n    symbol: 'SYRUP',\r\n    address: {\r\n      56: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n      97: '0xfE1e507CeB712BDe086f3579d2c03248b2dB77f9',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n  },\r\n  bifi: {\r\n    symbol: 'BIFI',\r\n    address: {\r\n      56: '0xCa3F508B8e4Dd382eE878A314789373D80A5190A',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://beefy.finance/',\r\n  },\r\n  dusk: {\r\n    symbol: 'DUSK',\r\n    address: {\r\n      56: '0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://dusk.network/',\r\n  },\r\n  busd: {\r\n    symbol: 'BUSD',\r\n    address: {\r\n      56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.paxos.com/busd/',\r\n  },\r\n  eth: {\r\n    symbol: 'ETH',\r\n    address: {\r\n      56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n      97: '',\r\n      1: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n      3: '0xc778417e063141139fce010982780140aa0cd5ab',\r\n    },\r\n    decimals: 18,\r\n    // iconExtension: 'png',\r\n    projectLink: 'https://ethereum.org/en/',\r\n  },\r\n  beth: {\r\n    symbol: 'BETH',\r\n    address: {\r\n      56: '0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ethereum.org/en/eth2/beacon-chain/',\r\n  },\r\n  mamzn: {\r\n    symbol: 'mAMZN',\r\n    address: {\r\n      56: '0x3947B992DC0147D2D89dF0392213781b04B25075',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  mgoogl: {\r\n    symbol: 'mGOOGL',\r\n    address: {\r\n      56: '0x62D71B23bF15218C7d2D7E48DBbD9e9c650B173f',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  mnflx: {\r\n    symbol: 'mNFLX',\r\n    address: {\r\n      56: '0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  mtsla: {\r\n    symbol: 'mTSLA',\r\n    address: {\r\n      56: '0xF215A127A196e3988C09d052e16BcFD365Cd7AA3',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  ltc: {\r\n    symbol: 'LTC',\r\n    address: {\r\n      56: '0x4338665CBB7B2485A8855A139b75D5e34AB0DB94',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://litecoin.org/',\r\n  },\r\n  usdc: {\r\n    symbol: 'USDC',\r\n    address: {\r\n      56: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n      97: '',\r\n      1: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n      3: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.centre.io/usdc',\r\n  },\r\n  dai: {\r\n    symbol: 'DAI',\r\n    address: {\r\n      56: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'http://www.makerdao.com/',\r\n  },\r\n  ada: {\r\n    symbol: 'ADA',\r\n    address: {\r\n      56: '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.cardano.org/',\r\n  },\r\n  band: {\r\n    symbol: 'BAND',\r\n    address: {\r\n      56: '0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bandprotocol.com/',\r\n  },\r\n  dot: {\r\n    symbol: 'DOT',\r\n    address: {\r\n      56: '0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://polkadot.network/',\r\n  },\r\n  eos: {\r\n    symbol: 'EOS',\r\n    address: {\r\n      56: '0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://eos.io/',\r\n  },\r\n  link: {\r\n    symbol: 'LINK',\r\n    address: {\r\n      56: '0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://chain.link/',\r\n  },\r\n  usdt: {\r\n    symbol: 'USDT',\r\n    address: {\r\n      56: '0x55d398326f99059fF775485246999027B3197955',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://tether.to/',\r\n  },\r\n  btcb: {\r\n    symbol: 'BTCB',\r\n    address: {\r\n      56: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bitcoin.org/',\r\n  },\r\n  xrp: {\r\n    symbol: 'XRP',\r\n    address: {\r\n      56: '0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ripple.com/xrp/',\r\n  },\r\n  atom: {\r\n    symbol: 'ATOM',\r\n    address: {\r\n      56: '0x0Eb3a705fc54725037CC9e008bDede697f62F335',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://cosmos.network/',\r\n  },\r\n  yfii: {\r\n    symbol: 'YFII',\r\n    address: {\r\n      56: '0x7F70642d88cf1C4a3a7abb072B53B929b653edA5',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://dfi.money/#/',\r\n  },\r\n  xtz: {\r\n    symbol: 'XTZ',\r\n    address: {\r\n      56: '0x16939ef78684453bfDFb47825F8a5F714f12623a',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.tezos.com/',\r\n  },\r\n  bch: {\r\n    symbol: 'BCH',\r\n    address: {\r\n      56: '0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'http://bch.info/',\r\n  },\r\n  yfi: {\r\n    symbol: 'YFI',\r\n    address: {\r\n      56: '0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://yearn.finance/',\r\n  },\r\n  uni: {\r\n    symbol: 'UNI',\r\n    address: {\r\n      56: '0xBf5140A22578168FD562DCcF235E5D43A02ce9B1',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://uniswap.org/',\r\n  },\r\n  fil: {\r\n    symbol: 'FIL',\r\n    address: {\r\n      56: '0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://filecoin.io/',\r\n  },\r\n  bake: {\r\n    symbol: 'BAKE',\r\n    address: {\r\n      56: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bakeryswap.org/',\r\n  },\r\n  burger: {\r\n    symbol: 'BURGER',\r\n    address: {\r\n      56: '0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://burgerswap.org/',\r\n  },\r\n  bdigg: {\r\n    symbol: 'bDIGG',\r\n    address: {\r\n      56: '0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://badger.finance/',\r\n  },\r\n  bbadger: {\r\n    symbol: 'bBadger',\r\n    address: {\r\n      56: '0x1F7216fdB338247512Ec99715587bb97BBf96eae',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://badger.finance/',\r\n  },\r\n  trade: {\r\n    symbol: 'TRADE',\r\n    address: {\r\n      56: '0x7af173F350D916358AF3e218Bdf2178494Beb748',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://unitrade.app/',\r\n  },\r\n  pnt: {\r\n    symbol: 'PNT',\r\n    address: {\r\n      56: '0xdaacB0Ab6Fb34d24E8a67BfA14BF4D95D4C7aF92',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ptokens.io/',\r\n  },\r\n  mir: {\r\n    symbol: 'MIR',\r\n    address: {\r\n      56: '0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  pbtc: {\r\n    symbol: 'pBTC',\r\n    address: {\r\n      56: '0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ptokens.io/',\r\n  },\r\n  lto: {\r\n    symbol: 'LTO',\r\n    address: {\r\n      56: '0x857B222Fc79e1cBBf8Ca5f78CB133d1b7CF34BBd',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ltonetwork.com/',\r\n  },\r\n  pcws: {\r\n    symbol: 'pCWS',\r\n    address: {\r\n      56: '0xbcf39F0EDDa668C58371E519AF37CA705f2bFcbd',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://game.seascape.network/',\r\n  },\r\n  zil: {\r\n    symbol: 'ZIL',\r\n    address: {\r\n      56: '0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787',\r\n      97: '',\r\n    },\r\n    decimals: 12,\r\n    projectLink: 'https://www.zilliqa.com/',\r\n  },\r\n  lien: {\r\n    symbol: 'LIEN',\r\n    address: {\r\n      56: '0x5d684ADaf3FcFe9CFb5ceDe3abf02F0Cdd1012E3',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://lien.finance/',\r\n  },\r\n  swth: {\r\n    symbol: 'SWTH',\r\n    address: {\r\n      56: '0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://switcheo.network/',\r\n  },\r\n  dft: {\r\n    symbol: 'DFT',\r\n    address: {\r\n      56: '0x42712dF5009c20fee340B245b510c0395896cF6e',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.dfuture.com/home',\r\n  },\r\n  gum: {\r\n    symbol: 'GUM',\r\n    address: {\r\n      56: '0xc53708664b99DF348dd27C3Ac0759d2DA9c40462',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://gourmetgalaxy.io/',\r\n  },\r\n  dego: {\r\n    symbol: 'DEGO',\r\n    address: {\r\n      56: '0x3FdA9383A84C05eC8f7630Fe10AdF1fAC13241CC',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bsc.dego.finance/home',\r\n  },\r\n  nrv: {\r\n    symbol: 'NRV',\r\n    address: {\r\n      56: '0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://nerve.fi/',\r\n  },\r\n  easy: {\r\n    symbol: 'EASY',\r\n    address: {\r\n      56: '0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://easyfi.network/',\r\n  },\r\n  oddz: {\r\n    symbol: 'ODDZ',\r\n    address: {\r\n      56: '0xCD40F2670CF58720b694968698A5514e924F742d',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://oddz.fi/',\r\n  },\r\n  hoo: {\r\n    symbol: 'HOO',\r\n    address: {\r\n      56: '0xE1d1F66215998786110Ba0102ef558b22224C016',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://hoo.com/',\r\n  },\r\n  apys: {\r\n    symbol: 'APYS',\r\n    address: {\r\n      56: '0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://apyswap.com/',\r\n  },\r\n  bondly: {\r\n    symbol: 'BONDLY',\r\n    address: {\r\n      56: '0x96058f8C3e16576D9BD68766f3836d9A33158f89',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bondly.finance/',\r\n  },\r\n  tko: {\r\n    symbol: 'TKO',\r\n    address: {\r\n      56: '0x9f589e3eabe42ebC94A44727b3f3531C0c877809',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.tokocrypto.com/',\r\n  },\r\n  itam: {\r\n    symbol: 'ITAM',\r\n    address: {\r\n      56: '0x04C747b40Be4D535fC83D09939fb0f626F32800B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://itam.network/',\r\n  },\r\n  arpa: {\r\n    symbol: 'ARPA',\r\n    address: {\r\n      56: '0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://arpachain.io/',\r\n  },\r\n  eps: {\r\n    symbol: 'EPS',\r\n    address: {\r\n      56: '0xA7f552078dcC247C2684336020c03648500C6d9F',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ellipsis.finance/',\r\n  },\r\n  jgn: {\r\n    symbol: 'JGN',\r\n    address: {\r\n      56: '0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://jgndefi.com/',\r\n  },\r\n  tlm: {\r\n    symbol: 'TLM',\r\n    address: {\r\n      56: '0x2222227E22102Fe3322098e4CBfE18cFebD57c95',\r\n      97: '',\r\n    },\r\n    decimals: 4,\r\n    projectLink: 'https://alienworlds.io/',\r\n  },\r\n  perl: {\r\n    symbol: 'PERL',\r\n    address: {\r\n      56: '0x0F9E4D49f25de22c2202aF916B681FBB3790497B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://perlinx.finance/',\r\n  },\r\n  alpa: {\r\n    symbol: 'ALPA',\r\n    address: {\r\n      56: '0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bsc.alpaca.city/',\r\n  },\r\n  hzn: {\r\n    symbol: 'HZN',\r\n    address: {\r\n      56: '0xC0eFf7749b125444953ef89682201Fb8c6A917CD',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://horizonprotocol.com/',\r\n  },\r\n  suter: {\r\n    symbol: 'SUTER',\r\n    address: {\r\n      56: '0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://shield.suterusu.io/',\r\n  },\r\n  cgg: {\r\n    symbol: 'CGG',\r\n    address: {\r\n      56: '0x1613957159E9B0ac6c80e824F7Eea748a32a0AE2',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://chainguardians.io/',\r\n  },\r\n  mix: {\r\n    symbol: 'MIX',\r\n    address: {\r\n      56: '0xB67754f5b4C704A24d2db68e661b2875a4dDD197',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mixie.chainguardians.io/',\r\n  },\r\n  hakka: {\r\n    symbol: 'HAKKA',\r\n    address: {\r\n      56: '0x1D1eb8E8293222e1a29d2C0E4cE6C0Acfd89AaaC',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://hakka.finance/',\r\n  },\r\n  xed: {\r\n    symbol: 'XED',\r\n    address: {\r\n      56: '0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.exeedme.com/',\r\n  },\r\n  τbtc: {\r\n    symbol: 'τBTC',\r\n    address: {\r\n      56: '0x2cD1075682b0FCCaADd0Ca629e138E64015Ba11c',\r\n      97: '',\r\n    },\r\n    decimals: 9,\r\n    projectLink: 'https://www.btcst.finance/',\r\n  },\r\n  alpaca: {\r\n    symbol: 'ALPACA',\r\n    address: {\r\n      56: '0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.alpacafinance.org/',\r\n  },\r\n  dfd: {\r\n    symbol: 'DFD',\r\n    address: {\r\n      56: '0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://dusd.finance/',\r\n  },\r\n  lmt: {\r\n    symbol: 'LMT',\r\n    address: {\r\n      56: '0x9617857E191354dbEA0b714d78Bc59e57C411087',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://lympo.io/lmt/',\r\n  },\r\n  btt: {\r\n    symbol: 'BTT',\r\n    address: {\r\n      56: '0x8595F9dA7b868b1822194fAEd312235E43007b49',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bittorrent.com/',\r\n  },\r\n  trx: {\r\n    symbol: 'TRX',\r\n    address: {\r\n      56: '0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://tron.network/',\r\n  },\r\n  win: {\r\n    symbol: 'WIN',\r\n    address: {\r\n      56: '0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://winklink.org/',\r\n  },\r\n  mcoin: {\r\n    symbol: 'mCOIN',\r\n    address: {\r\n      56: '0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mirror.finance/',\r\n  },\r\n  math: {\r\n    symbol: 'MATH',\r\n    address: {\r\n      56: '0xF218184Af829Cf2b0019F8E6F0b2423498a36983',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://mathwallet.org/',\r\n  },\r\n  kun: {\r\n    symbol: 'KUN',\r\n    address: {\r\n      56: '0x1A2fb0Af670D0234c2857FaD35b789F8Cb725584',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://chemix.io/home',\r\n  },\r\n  qsd: {\r\n    symbol: 'QSD',\r\n    address: {\r\n      56: '0x07AaA29E63FFEB2EBf59B33eE61437E1a91A3bb2',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://chemix.io/home',\r\n  },\r\n  hyfi: {\r\n    symbol: 'HYFI',\r\n    address: {\r\n      56: '0x9a319b959e33369C5eaA494a770117eE3e585318',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://hyfi.pro/#/',\r\n  },\r\n  oin: {\r\n    symbol: 'OIN',\r\n    address: {\r\n      56: '0x658E64FFcF40D240A43D52CA9342140316Ae44fA',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://oin.finance/',\r\n  },\r\n  doge: {\r\n    symbol: 'DOGE',\r\n    address: {\r\n      56: '0xbA2aE424d960c26247Dd6c32edC70B295c744C43',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://dogecoin.com/',\r\n  },\r\n  fine: {\r\n    symbol: 'FINE',\r\n    address: {\r\n      56: '0x4e6415a5727ea08aAE4580057187923aeC331227',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://refinable.com/',\r\n  },\r\n  one: {\r\n    symbol: 'ONE',\r\n    address: {\r\n      56: '0x04BAf95Fd4C52fd09a56D840bAEe0AB8D7357bf0',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bigone.com/',\r\n  },\r\n  pmon: {\r\n    symbol: 'PMON',\r\n    address: {\r\n      56: '0x1796ae0b0fa4862485106a0de9b654eFE301D0b2',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://polkamon.com/',\r\n  },\r\n  hotcross: {\r\n    symbol: 'HOTCROSS',\r\n    address: {\r\n      56: '0x4FA7163E153419E0E1064e418dd7A99314Ed27b6',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.hotcross.com/',\r\n  },\r\n  τdoge: {\r\n    symbol: 'τDOGE',\r\n    address: {\r\n      56: '0xe550a593d09FBC8DCD557b5C88Cea6946A8b404A',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://www.btcst.finance/',\r\n  },\r\n  btr: {\r\n    symbol: 'BTR',\r\n    address: {\r\n      56: '0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bitrue.com/',\r\n  },\r\n  ubxt: {\r\n    symbol: 'UBXT',\r\n    address: {\r\n      56: '0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://upbots.com/',\r\n  },\r\n  wmass: {\r\n    symbol: 'WMASS',\r\n    address: {\r\n      56: '0x7e396BfC8a2f84748701167c2d622F041A1D7a17',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://massnet.org/en/',\r\n  },\r\n  rfox: {\r\n    symbol: 'RFOX',\r\n    address: {\r\n      56: '0x0a3A21356793B49154Fd3BbE91CBc2A16c0457f5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.redfoxlabs.io/',\r\n  },\r\n  xend: {\r\n    symbol: 'XEND',\r\n    address: {\r\n      56: '0x4a080377f83D669D7bB83B3184a8A5E61B500608',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://xend.finance/',\r\n  },\r\n  cyc: {\r\n    symbol: 'CYC',\r\n    address: {\r\n      56: '0x810EE35443639348aDbbC467b33310d2AB43c168',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://cyclone.xyz/',\r\n  },\r\n  chr: {\r\n    symbol: 'CHR',\r\n    address: {\r\n      56: '0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE',\r\n      97: '',\r\n    },\r\n    decimals: 6,\r\n    projectLink: 'https://chromia.com/',\r\n  },\r\n  kalm: {\r\n    symbol: 'KALM',\r\n    address: {\r\n      56: '0x4BA0057f784858a48fe351445C672FF2a3d43515',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://kalmar.io/',\r\n  },\r\n  deri: {\r\n    symbol: 'DERI',\r\n    address: {\r\n      56: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://deri.finance/#/index',\r\n  },\r\n  well: {\r\n    symbol: 'WELL',\r\n    address: {\r\n      56: '0xf07a32Eb035b786898c00bB1C64d8c6F8E7a46D5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bitwellex.com/',\r\n  },\r\n  popen: {\r\n    symbol: 'pOPEN',\r\n    address: {\r\n      56: '0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://opendao.io/',\r\n  },\r\n  ez: {\r\n    symbol: 'EZ',\r\n    address: {\r\n      56: '0x5512014efa6Cd57764Fa743756F7a6Ce3358cC83',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://easyfi.network/',\r\n  },\r\n  vrt: {\r\n    symbol: 'VRT',\r\n    address: {\r\n      56: '0x5F84ce30DC3cF7909101C69086c50De191895883',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://venus.io/',\r\n  },\r\n  tusd: {\r\n    symbol: 'TUSD',\r\n    address: {\r\n      56: '0x14016E85a25aeb13065688cAFB43044C2ef86784',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.trueusd.com/',\r\n  },\r\n  mtrg: {\r\n    symbol: 'MTRG',\r\n    address: {\r\n      56: '0xBd2949F67DcdC549c6Ebe98696449Fa79D988A9F',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.meter.io/',\r\n  },\r\n  ktn: {\r\n    symbol: 'KTN',\r\n    address: {\r\n      56: '0xDAe6c2A48BFAA66b43815c5548b10800919c993E',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://kattana.io/',\r\n  },\r\n  qkc: {\r\n    symbol: 'QKC',\r\n    address: {\r\n      56: '0xA1434F1FC3F437fa33F7a781E041961C0205B5Da',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://quarkchain.io/',\r\n  },\r\n  bcfx: {\r\n    symbol: 'bCFX',\r\n    address: {\r\n      56: '0x045c4324039dA91c52C55DF5D785385Aab073DcF',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.confluxnetwork.org/',\r\n  },\r\n  mx: {\r\n    symbol: 'MX',\r\n    address: {\r\n      56: '0x9F882567A62a5560d147d64871776EeA72Df41D3',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.mxc.com/',\r\n  },\r\n  ata: {\r\n    symbol: 'ATA',\r\n    address: {\r\n      56: '0xA2120b9e674d3fC3875f415A7DF52e382F141225',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.ata.network/',\r\n  },\r\n  mbox: {\r\n    symbol: 'MBOX',\r\n    address: {\r\n      56: '0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.mobox.io/#/',\r\n  },\r\n  boring: {\r\n    symbol: 'BORING',\r\n    address: {\r\n      56: '0xffEecbf8D7267757c2dc3d13D730E97E15BfdF7F',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.boringdao.com/',\r\n  },\r\n  marsh: {\r\n    symbol: 'MARSH',\r\n    address: {\r\n      56: '0x2FA5dAF6Fe0708fBD63b1A7D1592577284f52256',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://unmarshal.io/',\r\n  },\r\n  ampl: {\r\n    symbol: 'AMPL',\r\n    address: {\r\n      56: '0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F',\r\n      97: '',\r\n    },\r\n    decimals: 9,\r\n    projectLink: 'https://www.ampleforth.org/',\r\n  },\r\n  o3: {\r\n    symbol: 'O3',\r\n    address: {\r\n      56: '0xEe9801669C6138E84bD50dEB500827b776777d28',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://o3swap.com/',\r\n  },\r\n  hai: {\r\n    symbol: 'HAI',\r\n    address: {\r\n      56: '0xaA9E582e5751d703F85912903bacADdFed26484C',\r\n      97: '',\r\n    },\r\n    decimals: 8,\r\n    projectLink: 'https://hacken.io/',\r\n  },\r\n  htb: {\r\n    symbol: 'HTB',\r\n    address: {\r\n      56: '0x4e840AADD28DA189B9906674B4Afcb77C128d9ea',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.hotbit.io/',\r\n  },\r\n  woo: {\r\n    symbol: 'WOO',\r\n    address: {\r\n      56: '0x4691937a7508860F876c9c0a2a617E7d9E945D4B',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://woo.network/',\r\n  },\r\n  $dg: {\r\n    symbol: '$DG',\r\n    address: {\r\n      56: '0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://decentral.games/',\r\n  },\r\n  mgg: {\r\n    symbol: 'MGG',\r\n    address: {\r\n      56: '',\r\n      1: '0x7237C0B30B1355f1B76355582f182F6f04B08740',\r\n      3: '0x9F7A0406Abe72354006Ac8949c156365A7455e3A',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n    projectLink: 'https://metagg.com/',\r\n  },\r\n  srkb: {\r\n    symbol: 'SRK',\r\n    address: {\r\n      56: '0xC3440c10c4F36f354eB591B19FafB4906d449B75',\r\n      97: '0xC3440c10c4F36f354eB591B19FafB4906d449B75',\r\n      3: '0x962d8c38d4088f3f62e70740df46db214718a855',\r\n      1: '0x0488401c3f535193fa8df029d9ffe615a06e74e6',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n    projectLink: 'https://sparkpoint.io/',\r\n  },\r\n  ttkb: {\r\n    symbol: 'TTKb',\r\n    address: {\r\n      56: '0x9ee47c9630a41525c139ef9ca42ba3b238ecfecf',\r\n      97: '0x9ee47c9630a41525c139ef9ca42ba3b238ecfecf',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://sparkpoint.io/',\r\n  },\r\n  own: {\r\n    symbol: 'OWN',\r\n    address: {\r\n      56: '0x7665CB7b0d01Df1c9f9B9cC66019F00aBD6959bA',\r\n      97: '0x7665CB7b0d01Df1c9f9B9cC66019F00aBD6959bA',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n    projectLink: 'https://ownly.io/',\r\n  },\r\n  kclp: {\r\n    symbol: 'KCLP',\r\n    address: {\r\n      56: '0x47b8806C2891c4a92b5c590C32CFE1Eb617648EF',\r\n      97: '0x47b8806C2891c4a92b5c590C32CFE1Eb617648EF',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n    projectLink: 'https://kucoinlaunchpad.com/',\r\n  },\r\n  kroot: {\r\n    symbol: 'KROOT',\r\n    address: {\r\n      56: '0x0cD3a8Ce155A8d9DAAF19E5caa642e72a2a24Cd8',\r\n      97: '0x0cD3a8Ce155A8d9DAAF19E5caa642e72a2a24Cd8',\r\n    },\r\n    decimals: 18,\r\n  },\r\n  bglg: {\r\n    symbol: 'BGLG',\r\n    address: {\r\n      56: '0xEa01D8D9EaCCa9996Db6Bb3377c1Fe64308e7328',\r\n      97: '0xEa01D8D9EaCCa9996Db6Bb3377c1Fe64308e7328',\r\n    },\r\n    decimals: 18,\r\n  },\r\n  kgo: {\r\n    symbol: 'KGO',\r\n    address: {\r\n      56: '0x5d3AfBA1924aD748776E4Ca62213BF7acf39d773',\r\n      97: '0x5d3AfBA1924aD748776E4Ca62213BF7acf39d773',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n  },\r\n  tipsy: {\r\n    symbol: 'TIPSY',\r\n    address: {\r\n      56: '0xf380334b9A181F54BF2f32FDD3e153D259472eBB',\r\n      97: '0xf380334b9A181F54BF2f32FDD3e153D259472eBB',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n  },\r\n  gzila: {\r\n    symbol: 'GZILA',\r\n    address: {\r\n      56: '0x4178934c6E313a062c5addD66ab0D9B8d858347a',\r\n      97: '0x4178934c6E313a062c5addD66ab0D9B8d858347a',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n  },\r\n  flash: {\r\n    symbol: 'FLASH',\r\n    address: {\r\n      56: '0x5f0366c9962193fa774cdce9602195593b49f23c',\r\n      97: '0x5f0366c9962193fa774cdce9602195593b49f23c',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n  },\r\n  bhc: {\r\n    symbol: 'BHC',\r\n    address: {\r\n      56: '0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4',\r\n      97: '0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n  },\r\n  hps: {\r\n    symbol: 'HPS',\r\n    address: {\r\n      56: '0xeda21b525ac789eab1a08ef2404dd8505ffb973d',\r\n      97: '0xeda21b525ac789eab1a08ef2404dd8505ffb973d',\r\n    },\r\n    decimals: 18,\r\n    iconExtension: 'png',\r\n  },\r\n}\r\n\r\nexport default tokens\r\n\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport teamsList from 'config/constants/teams'\r\nimport { Team } from 'config/constants/types'\r\nimport { TeamsById, TeamsState } from '../types'\r\nimport { getTeam, getTeams } from './helpers'\r\n\r\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\r\n  return {\r\n    ...accum,\r\n    [team.id]: team,\r\n  }\r\n}, {})\r\n\r\nconst initialState: TeamsState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: teamsById,\r\n}\r\n\r\nexport const teamsSlice = createSlice({\r\n  name: 'teams',\r\n  initialState,\r\n  reducers: {\r\n    fetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    fetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data[action.payload.id] = action.payload\r\n    },\r\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const team = await getTeam(teamId)\r\n    dispatch(teamFetchSucceeded(team))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport const fetchTeams = () => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const teams = await getTeams()\r\n    dispatch(teamsFetchSucceeded(teams))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport default teamsSlice.reducer\r\n","import { Nft, NftSource, NftType } from './types'\r\n\r\nexport const IPFS_GATEWAY = 'https://gateway.pinata.cloud'\r\n\r\nexport const nftSources: NftSource = {\r\n  [NftType.PANCAKE]: {\r\n    address: {\r\n      56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n      97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n    },\r\n    identifierKey: 'image',\r\n  },\r\n  [NftType.MIXIE]: {\r\n    address: {\r\n      56: '0xa251b5EAa9E67F2Bc8b33F33e20E91552Bf85566',\r\n      97: '',\r\n    },\r\n    identifierKey: 'image',\r\n  },\r\n}\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Mixie v1',\r\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\r\n    images: {\r\n      lg: 'mixie-1-lg.png',\r\n      md: 'mixie-1-md.png',\r\n      sm: 'mixie-1-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/001-Chef-Mixie.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: '001-Chef-Mixie',\r\n    type: NftType.MIXIE,\r\n    variationId: 1,\r\n  },\r\n  {\r\n    name: 'Mixie v2',\r\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\r\n    images: {\r\n      lg: 'mixie-2-lg.png',\r\n      md: 'mixie-2-md.png',\r\n      sm: 'mixie-2-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/002-Chef-Mixie.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: '002-Chef-Mixie',\r\n    type: NftType.MIXIE,\r\n    variationId: 2,\r\n  },\r\n  {\r\n    name: 'Mixie v3',\r\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\r\n    images: {\r\n      lg: 'mixie-3-lg.png',\r\n      md: 'mixie-3-md.png',\r\n      sm: 'mixie-3-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/003-Chef-Mixie.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: '003-Chef-Mixie',\r\n    type: NftType.MIXIE,\r\n    variationId: 3,\r\n  },\r\n  {\r\n    name: 'Easter ‘21 Champions',\r\n    description: 'Eggscellent! Celebrating Syrup Storm winning the Easter Battle!',\r\n    images: {\r\n      lg: 'easter-champion-storm-lg.png',\r\n      md: 'easter-champion-storm-md.png',\r\n      sm: 'easter-champion-storm-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.png',\r\n    },\r\n    video: {\r\n      webm: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.webm',\r\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.mp4',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-champion-storm',\r\n    type: NftType.PANCAKE,\r\n    variationId: 15,\r\n  },\r\n  {\r\n    name: \"Cakeston Easter '21\",\r\n    description: 'Melting Easter eggs and melting hearts!',\r\n    images: {\r\n      lg: 'cakeston-easter-21-lg.png',\r\n      md: 'cakeston-easter-21-md.png',\r\n      sm: 'cakeston-easter-21-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-caker.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-caker',\r\n    type: NftType.PANCAKE,\r\n    variationId: 15,\r\n  },\r\n  {\r\n    name: \"Flipsie Easter '21\",\r\n    description: 'Watch out for Flipsie’s spatula smash!',\r\n    images: {\r\n      lg: 'flipsie-easter-21-lg.png',\r\n      md: 'flipsie-easter-21-md.png',\r\n      sm: 'flipsie-easter-21-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-flipper.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-flipper',\r\n    type: NftType.PANCAKE,\r\n    variationId: 14,\r\n  },\r\n  {\r\n    name: \"Stormy Easter '21\",\r\n    description: 'Do you like chocolate with your syrup? Go long!',\r\n    images: {\r\n      lg: 'stormy-easter-21-lg.png',\r\n      md: 'stormy-easter-21-md.png',\r\n      sm: 'stormy-easter-21-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-storm.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-storm',\r\n    type: NftType.PANCAKE,\r\n    variationId: 12,\r\n  },\r\n  {\r\n    name: 'Bullish',\r\n    description: 'Happy Niu Year! This bunny’s excited for the year of the bull (market!)',\r\n    images: {\r\n      lg: 'bullish-lg.png',\r\n      md: 'bullish-md.png',\r\n      sm: 'bullish-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.png',\r\n    },\r\n    video: {\r\n      webm: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.webm',\r\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.mp4',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'bullish',\r\n    type: NftType.PANCAKE,\r\n    variationId: 11,\r\n  },\r\n  {\r\n    name: 'Hiccup',\r\n    description: \"Oopsie daisy! Hiccup's had a bit of an accident. Poor little fella.\",\r\n    images: {\r\n      lg: 'hiccup-lg.png',\r\n      md: 'hiccup-md.png',\r\n      sm: 'hiccup-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQ6EE6gkVzAQUdQLLM7CyrnME6LZHCoy92ZERW8HXmyjw/hiccup.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'hiccup',\r\n    type: NftType.PANCAKE,\r\n    variationId: 10,\r\n  },\r\n  {\r\n    name: 'Sleepy',\r\n    description: 'Aww, looks like eating pancakes all day is tough work. Sweet dreams!',\r\n    images: {\r\n      lg: 'sleepy-lg.png',\r\n      md: 'sleepy-md.png',\r\n      sm: 'sleepy-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sleepy.png',\r\n      blur: 'sleepy-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'sleepy',\r\n    type: NftType.PANCAKE,\r\n    variationId: 5,\r\n  },\r\n  {\r\n    name: 'Sunny',\r\n    description: 'Sunny is always cheerful when there are pancakes around. Smile!',\r\n    images: {\r\n      lg: 'sunny-lg.png',\r\n      md: 'sunny-md.png',\r\n      sm: 'sunny-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sunny.png',\r\n      blur: 'sunny-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'sunny',\r\n    type: NftType.PANCAKE,\r\n    variationId: 9,\r\n  },\r\n  {\r\n    name: 'Churro',\r\n    description: \"Don't let that dopey smile deceive you... Churro's a master CAKE chef!\",\r\n    images: {\r\n      lg: 'churro-lg.png',\r\n      md: 'churro-md.png',\r\n      sm: 'churro-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/churro.png',\r\n      blur: 'churro-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'churro',\r\n    type: NftType.PANCAKE,\r\n    variationId: 8,\r\n  },\r\n  {\r\n    name: 'Dollop',\r\n    description: \"Nommm... Oh hi, I'm just meditating on the meaning of CAKE.\",\r\n    images: {\r\n      lg: 'dollop-lg.png',\r\n      md: 'dollop-md.png',\r\n      sm: 'dollop-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/dollop.png',\r\n      blur: 'dollop-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'dollop',\r\n    type: NftType.PANCAKE,\r\n    variationId: 6,\r\n  },\r\n  {\r\n    name: 'Twinkle',\r\n    description: \"Three guesses what's put that twinkle in those eyes! (Hint: it's CAKE)\",\r\n    images: {\r\n      lg: 'twinkle-lg.png',\r\n      md: 'twinkle-md.png',\r\n      sm: 'twinkle-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/twinkle.png',\r\n      blur: 'twinkle-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'twinkle',\r\n    type: NftType.PANCAKE,\r\n    variationId: 7,\r\n  },\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    images: {\r\n      lg: 'swapsies-lg.png',\r\n      md: 'swapsies-md.png',\r\n      sm: 'swapsies-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n      blur: 'swapsies-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'swapsies',\r\n    type: NftType.PANCAKE,\r\n    variationId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    images: {\r\n      lg: 'drizzle-lg.png',\r\n      md: 'drizzle-md.png',\r\n      sm: 'drizzle-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n      blur: 'drizzle-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'drizzle',\r\n    type: NftType.PANCAKE,\r\n    variationId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    images: {\r\n      lg: 'blueberries-lg.png',\r\n      md: 'blueberries-md.png',\r\n      sm: 'blueberries-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n      blur: 'blueberries-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'blueberries',\r\n    type: NftType.PANCAKE,\r\n    variationId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    images: {\r\n      lg: 'circular-lg.png',\r\n      md: 'circular-md.png',\r\n      sm: 'circular-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n      blur: 'circular-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'circular',\r\n    type: NftType.PANCAKE,\r\n    variationId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    images: {\r\n      lg: 'sparkle-lg.png',\r\n      md: 'sparkle-md.png',\r\n      sm: 'sparkle-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n      blur: 'sparkle-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'sparkle',\r\n    type: NftType.PANCAKE,\r\n    variationId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","export const GRAPH_API_PROFILE = process.env.REACT_APP_GRAPH_API_PROFILE\r\nexport const GRAPH_API_PREDICTION = process.env.REACT_APP_GRAPH_API_PREDICTION\r\nexport const ARCHIVED_NODE = process.env.REACT_APP_ARCHIVED_NODE\r\n","import { useEffect } from 'react'\r\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\n\r\nconst _binanceChainListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'BinanceChain', {\r\n      get() {\r\n        return this.bsc\r\n      },\r\n      set(bsc) {\r\n        this.bsc = bsc\r\n\r\n        resolve()\r\n      },\r\n    }),\r\n  )\r\n\r\nconst useEagerConnect = () => {\r\n  const { login } = useAuth()\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\r\n\r\n    if (connectorId) {\r\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\r\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\r\n\r\n      // Currently BSC extension doesn't always inject in time.\r\n      // We must check to see if it exists, and if not, wait for it before proceeding.\r\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\r\n        _binanceChainListener().then(() => login(connectorId))\r\n\r\n        return\r\n      }\r\n\r\n      login(connectorId)\r\n    }\r\n  }, [login])\r\n}\r\n\r\nexport default useEagerConnect\r\n","import React from 'react'\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\r\n\r\nexport function RedirectToFarms({ location }: RouteComponentProps){\r\n    return <Redirect to={{...location, pathname: '/farms'}} />\r\n}\r\n\r\nexport function RedirectToPools({ location }: RouteComponentProps){\r\n    return <Redirect to={{...location, pathname: '/liquidity'}} />\r\n}","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { SparkSwapTheme } from '@metagg/mgg-uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends SparkSwapTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","import { MenuEntry } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: \"Staking\",\r\n    icon: \"\",\r\n    // href: \"/farms\"\r\n    items: [\r\n      {\r\n        label: 'Liquidity',\r\n        href: '/farms'\r\n      },\r\n      {\r\n        label: 'Pool-Based',\r\n        href: '/pools'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: \"GameFi Vault\",\r\n    icon: \"\",\r\n    href: \"/gamefi\",\r\n  },\r\n  {\r\n    label: \"IGO Launchpad\",\r\n    icon: \"\",\r\n    href: \"/launchpad\",\r\n  },\r\n  {\r\n    label: \"Earning Dashboard\",\r\n    icon: \"\",\r\n    href: \"/earning-dashboard\",\r\n  },\r\n  {\r\n    label: \"Bridge\",\r\n    icon: \"\",\r\n    href: \"https://app.chainport.io\",\r\n  },\r\n/*\r\n  {\r\n    label: \"Swap\",\r\n    icon: \"TradeIcon\",\r\n    href: \"https://sparkswap.finance/#/swap\",\r\n  },\r\n  {\r\n    label: \"Staking\",\r\n    icon: \"FarmIcon\",\r\n    items: [\r\n      {\r\n        label: \"Farms\",\r\n        href: \"/farms\",\r\n      },\r\n      {\r\n        label: \"Pools\",\r\n        href: \"/pools\",\r\n      },\r\n      {\r\n        label: \"Old Farms/Pools\",\r\n        href: \"https://app.srk.finance/#/stake\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Farm\",\r\n    icon: \"FarmIcon\",\r\n    href: \"https://app.srk.finance/#/stake\",\r\n  },\r\n  {\r\n    label: \"Pool\",\r\n    icon: \"PoolIcon\",\r\n    href: \"/pools\",\r\n  },\r\n  \r\n  {\r\n    label: \"Launch\",\r\n    icon: \"LaunchIcon\",\r\n    href: \"https://launch.sparkswap.finance/#/\",\r\n  },\r\n  {\r\n    label: \"Info\",\r\n    icon: \"InfoIcon\",\r\n    href: \"https://sparkswap.info/#/home\",\r\n  },\r\n  {\r\n    label: \"Airdrop\",\r\n    icon: \"AirdropIcon\",\r\n    href: \"https://app.srk.finance/#/airdrop\",\r\n  },\r\n  {\r\n    label: \"Teams\",\r\n    icon: \"GroupsIcon\",\r\n    href: \"https://srk.finance/team\",\r\n  },\r\n  {\r\n    label: \"Help\",\r\n    icon: \"MoreIcon\",\r\n    href: \"https://medium.com/theecosystem/a-beginners-guide-to-sparkswap-79f92a2f7074\"\r\n  }\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    initialOpenState: true,\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: '/swap'\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: '/pool'\r\n      }\r\n    ]\r\n  },\r\n \r\n  {\r\n    label: \"Info\",\r\n    icon: \"InfoIcon\",\r\n    items: [\r\n      {\r\n        label: \"Overview\",\r\n        href: \"https://coinmarketcap.com/currencies/sparkpoint/\",\r\n      },\r\n      {\r\n        label: \"Trade SRK\",\r\n        href: \"https://srk.sh/trade\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: \"More\",\r\n    icon: \"MoreIcon\",\r\n    items: [\r\n      {\r\n        label: \"SparkDeFi\",\r\n        href: \"https://srk.finance/\",\r\n      },\r\n      {\r\n        label: \"SparkPoint\",\r\n        href: \"https://sparkpoint.io/\",\r\n      },\r\n      {\r\n        label: \"Github\",\r\n        href: \"https://github.com/sparkpointio\",\r\n      },\r\n      {\r\n        label: \"White Paper\",\r\n        href: \"https://github.com/sparkpointio/sparkdefi-whitepaper/blob/main/WHITEPAPER.md\",\r\n      },\r\n      {\r\n        label: \"Blog\",\r\n        href: \"https://medium.com/theecosystem\",\r\n      },\r\n    ],\r\n  },\r\n  */\r\n]\r\n\r\nexport default config\r\n","import React from 'react'\r\nimport { Menu as UikitMenu } from '@metagg/mgg-uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { languageList } from 'config/localization/languages'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useAuth from 'hooks/useAuth'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, chainId } = useWeb3React()\r\n  const { login, logout } = useAuth()\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const { currentLanguage, setLanguage } = useTranslation()\r\n\r\n  return (\r\n    <UikitMenu\r\n      network={chainId}\r\n      account={account}\r\n      login={login}\r\n      logout={logout}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={currentLanguage.code}\r\n      langs={languageList}\r\n      setLang={setLanguage}\r\n      links={config}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React, { Suspense, SuspenseProps } from 'react'\r\n\r\ninterface State {\r\n  hasError: boolean\r\n}\r\n\r\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\r\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\r\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\r\n\r\n    // Save a flag on the window object indicating that we have already had a chunk error.\r\n    // This prevents infinite reloads\r\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\r\n\r\n    // If was a chunk load error, refresh the page\r\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\r\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\r\n      window.history.replaceState(nextState, '')\r\n      window.location.reload()\r\n      return\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { fallback } = this.props\r\n\r\n    if (hasError) {\r\n      return fallback\r\n    }\r\n\r\n    return <Suspense {...this.props} />\r\n  }\r\n}\r\n\r\nexport default SuspenseWithChunkError\r\n","import React from 'react'\r\nimport { ToastContainer } from '@pancakeswap/uikit'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst ToastListener = () => {\r\n  const { toasts, remove } = useToast()\r\n\r\n  const handleRemove = (id: string) => remove(id)\r\n\r\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\r\n}\r\n\r\nexport default ToastListener\r\n","import React, { useState, useCallback } from 'react'\r\nimport { FallingBunnies, FallingBunniesProps, useKonamiCheatCode } from '@pancakeswap/uikit'\r\n\r\nconst EasterEgg: React.FC<FallingBunniesProps> = (props) => {\r\n  const [show, setShow] = useState(false)\r\n  const startFalling = useCallback(() => setShow(true), [setShow])\r\n  useKonamiCheatCode(startFalling)\r\n\r\n  if (show) {\r\n    return (\r\n      <div onAnimationEnd={() => setShow(false)}>\r\n        <FallingBunnies {...props} />\r\n      </div>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport default React.memo(EasterEgg)\r\n","import React, { lazy } from 'react'\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { ResetCSS,  } from '@metagg/mgg-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport useEagerConnect from 'hooks/useEagerConnect'\r\nimport { useFetchProfile, usePollBlockNumber, usePollCoreFarmData } from 'state/hooks'\r\nimport { RedirectToFarms, RedirectToPools } from 'views/Farms/Redirects'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\r\nimport ToastListener from './components/ToastListener'\r\nimport PageLoader from './components/PageLoader'\r\nimport EasterEgg from './components/EasterEgg'\r\n// import Pools from './views/Pools'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page\r\n// const Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\nconst Lottery = lazy(() => import('./views/Lottery'))\r\nconst Ifos = lazy(() => import('./views/Ifos'))\r\nconst ComingSoon = lazy(() => import('./views/ComingSoon'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Collectibles = lazy(() => import('./views/Collectibles'))\r\nconst Teams = lazy(() => import('./views/Teams'))\r\nconst Team = lazy(() => import('./views/Teams/Team'))\r\nconst Profile = lazy(() => import('./views/Profile'))\r\nconst TradingCompetition = lazy(() => import('./views/TradingCompetition'))\r\nconst Predictions = lazy(() => import('./views/Predictions'))\r\n\r\n// This config is required for number formatting\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  usePollBlockNumber()\r\n  useEagerConnect()\r\n  useFetchProfile()\r\n  usePollCoreFarmData()\r\n\r\n  return (\r\n    <HashRouter>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <SuspenseWithChunkError fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path='/farms'>\r\n              <Farms />\r\n            </Route>\r\n            <Route path='/pools' exact>\r\n              <Pools />\r\n              {/* <ComingSoon title=\"Pools\" /> */}\r\n            </Route>\r\n            <Route path='/gamefi' exact>\r\n              <ComingSoon title=\"GameFi Vault\"/>\r\n            </Route>\r\n            <Route path='/launchpad' exact>\r\n              <ComingSoon title=\"IGO Launchpad\" />\r\n              {/* <Guildpad /> */}\r\n            </Route>\r\n            <Route path='/earning-dashboard' exact>\r\n              <ComingSoon title=\"Earning Dashboard\" />\r\n            </Route>\r\n            {/* <Route path='/liquidity'>\r\n              <Pools />\r\n            </Route> */}\r\n            {/* \r\n            \r\n            <Route path='/lottery'>\r\n              <Lottery />\r\n            </Route>\r\n            <Route path='/ifo'>\r\n              <Ifos />\r\n            </Route>\r\n            <Route path='/collectibles'>\r\n              <Collectibles />\r\n            </Route>\r\n            <Route exact path='/teams'>\r\n              <Teams />\r\n            </Route>\r\n            <Route path='/teams/:id'>\r\n              <Team />\r\n            </Route>\r\n            <Route path='/profile'>\r\n              <Profile />\r\n            </Route> */}\r\n            {/* Redirect */}\r\n            <Route path='/staking'>\r\n              <Redirect to='/farms' />\r\n            </Route>\r\n            <Route path='/' component={RedirectToFarms} />\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </SuspenseWithChunkError>\r\n      </Menu>\r\n      <EasterEgg iterations={2} />\r\n      <ToastListener />\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React from 'react'\r\nimport { ModalProvider } from '@metagg/mgg-uikit'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport { HelmetProvider } from 'react-helmet-async'\r\nimport { Provider } from 'react-redux'\r\nimport { getLibrary } from 'utils/web3React'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { LanguageProvider } from 'contexts/Localization'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport { ToastsProvider } from 'contexts/ToastsContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Provider store={store}>\r\n        <ToastsProvider>\r\n          <HelmetProvider>\r\n            <ThemeContextProvider>\r\n              <LanguageProvider>\r\n                <RefreshContextProvider>\r\n                  <ModalProvider>{children}</ModalProvider>\r\n                </RefreshContextProvider>\r\n              </LanguageProvider>\r\n            </ThemeContextProvider>\r\n          </HelmetProvider>\r\n        </ToastsProvider>\r\n      </Provider>\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { MoralisProvider } from \"react-moralis\";\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <MoralisProvider appId={process.env.REACT_APP_MORALIS_APP_ID} serverUrl={process.env.REACT_APP_MORALIS_SERVER_URL} >\r\n        <App />\r\n      </MoralisProvider>\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchCakeVaultPublicData,\r\n  fetchCakeVaultUserData,\r\n  fetchCakeVaultFees,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\nexport { profileFetchStart, profileFetchSucceeded, profileFetchFailed } from './profile'\r\nexport { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } from './teams'\r\nexport { setBlock } from './block'\r\n","import { EN } from 'config/localization/languages'\r\n\r\nconst publicUrl = process.env.PUBLIC_URL\r\n\r\nexport const LS_KEY = 'pancakeswap_language'\r\n\r\nexport const fetchLocale = async (locale) => {\r\n  const response = await fetch(`${publicUrl}/locales/${locale}.json`)\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getLanguageCodeFromLS = () => {\r\n  try {\r\n    const codeFromStorage = localStorage.getItem(LS_KEY)\r\n\r\n    return codeFromStorage || EN.locale\r\n  } catch {\r\n    return EN.locale\r\n  }\r\n}\r\n","import React, { createContext, useCallback, useEffect, useState } from 'react'\r\nimport { Language } from '@pancakeswap/uikit'\r\nimport { EN, languages } from 'config/localization/languages'\r\nimport translations from 'config/localization/translations.json'\r\nimport { ContextApi, ContextData, ProviderState } from './types'\r\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\r\n\r\nconst initialState: ProviderState = {\r\n  isFetching: true,\r\n  currentLanguage: EN,\r\n}\r\n\r\n// Export the translations directly\r\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\r\nlanguageMap.set(EN.locale, translations)\r\n\r\nexport const LanguageContext = createContext<ContextApi>(undefined)\r\n\r\nexport const LanguageProvider: React.FC = ({ children }) => {\r\n  const [state, setState] = useState<ProviderState>(() => {\r\n    const codeFromStorage = getLanguageCodeFromLS()\r\n\r\n    return {\r\n      ...initialState,\r\n      currentLanguage: languages[codeFromStorage],\r\n    }\r\n  })\r\n  const { currentLanguage } = state\r\n\r\n  useEffect(() => {\r\n    const fetchInitialLocales = async () => {\r\n      const codeFromStorage = getLanguageCodeFromLS()\r\n\r\n      if (codeFromStorage !== EN.locale) {\r\n        const enLocale = languageMap.get(EN.locale)\r\n        const currentLocale = await fetchLocale(codeFromStorage)\r\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\r\n      }\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n      }))\r\n    }\r\n\r\n    fetchInitialLocales()\r\n  }, [setState])\r\n\r\n  const setLanguage = async (language: Language) => {\r\n    if (!languageMap.has(language.locale)) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: true,\r\n      }))\r\n\r\n      const locale = await fetchLocale(language.locale)\r\n      const enLocale = languageMap.get(EN.locale)\r\n\r\n      // Merge the EN locale to ensure that any locale fetched has all the keys\r\n      languageMap.set(language.locale, { ...enLocale, ...locale })\r\n      localStorage.setItem(LS_KEY, language.locale)\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n        currentLanguage: language,\r\n      }))\r\n    } else {\r\n      localStorage.setItem(LS_KEY, language.locale)\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n        currentLanguage: language,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const translate = useCallback(\r\n    (key: string, data?: ContextData) => {\r\n      const translationSet = languageMap.has(currentLanguage.locale)\r\n        ? languageMap.get(currentLanguage.locale)\r\n        : languageMap.get(EN.locale)\r\n      const translatedText = translationSet[key] || key\r\n\r\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\r\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\r\n\r\n      if (includesVariable && data) {\r\n        let interpolatedText = translatedText\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return translatedText\r\n    },\r\n    [currentLanguage],\r\n  )\r\n\r\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\r\n}\r\n","import { useContext } from 'react'\r\nimport { LanguageContext } from './Provider'\r\n\r\nconst useTranslation = () => {\r\n  const languageContext = useContext(LanguageContext)\r\n\r\n  if (languageContext === undefined) {\r\n    throw new Error('Language context is undefined')\r\n  }\r\n\r\n  return languageContext\r\n}\r\n\r\nexport default useTranslation\r\n","import { FarmConfig } from './types'\r\n\r\nconst priceHelperLps: FarmConfig[] = [\r\n  /**\r\n   * These LPs are just used to help with price calculation for MasterChef LPs (farms.ts).\r\n   * This list is added to the MasterChefLps and passed to fetchFarm. The calls to get contract information about the token/quoteToken in the LP are still made.\r\n   * The absense of a PID means the masterchef contract calls are skipped for this farm.\r\n   * Prices are then fetched for all farms (masterchef + priceHelperLps).\r\n   * Before storing to redux, farms without a PID are filtered out.\r\n   */\r\n  // {\r\n  //   pid: null,\r\n  //   lpSymbol: 'QSD-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7b3ae32eE8C532016f3E31C8941D937c59e055B9',\r\n  //   },\r\n  //   token: tokens.qsd,\r\n  //   quoteToken: tokens.wbnb,\r\n  // },\r\n]\r\n\r\nexport default priceHelperLps\r\n","import BigNumber from 'bignumber.js'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport { now } from 'lodash'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport multicall from 'utils/multicall'\r\nimport lpStaking from 'config/abi/lpStaking.json'\r\nimport { Farm, SerializedBigNumber } from '../types'\r\n\r\ntype PublicFarmData = {\r\n  totalDeposits: SerializedBigNumber\r\n  rewardRate: SerializedBigNumber\r\n  totalRewardRate: SerializedBigNumber\r\n  hasEnded: boolean\r\n  remainingDays: string\r\n  tokenAmountMc: SerializedBigNumber\r\n  quoteTokenAmountMc: SerializedBigNumber\r\n  tokenAmountTotal: SerializedBigNumber\r\n  quoteTokenAmountTotal: SerializedBigNumber\r\n  lpTotalInQuoteToken: SerializedBigNumber\r\n  lpTotalSupply: SerializedBigNumber\r\n  tokenPriceVsQuote: SerializedBigNumber\r\n  poolWeight: SerializedBigNumber\r\n  multiplier: string\r\n}\r\n\r\nconst fetchFarm = async (farm: Farm): Promise<PublicFarmData> => {\r\n  const { pid, lpAddresses, token, quoteToken, stakingAddresses, chain } = farm\r\n  const lpAddress = getAddress(lpAddresses, chain)\r\n  const calls = [\r\n    // Balance of token in the LP contract\r\n    {\r\n      address: getAddress(token.address, chain),\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of quote token on LP contract\r\n    {\r\n      address: getAddress(quoteToken.address, chain),\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of LP tokens in the master chef contract\r\n    // {\r\n    //   address: lpAddress,\r\n    //   name: 'balanceOf',\r\n    //   params: [getMasterChefAddress(chain)],\r\n    // },\r\n    // Total supply of LP tokens\r\n    {\r\n      address: lpAddress,\r\n      name: 'totalSupply',\r\n    },\r\n    // Token decimals\r\n    {\r\n      address: getAddress(token.address, chain),\r\n      name: 'decimals',\r\n    },\r\n    // Quote token decimals\r\n    {\r\n      address: getAddress(quoteToken.address, chain),\r\n      name: 'decimals',\r\n    },\r\n  ]\r\n\r\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n    await multicall(erc20, calls, {}, chain)\r\n  const lpStakingCalls = [\r\n    // Total deposits in staking address\r\n    {\r\n      address: getAddress(stakingAddresses, chain),\r\n      name: 'totalSupply',\r\n    },\r\n    // Total deposits in staking address\r\n    {\r\n      address: getAddress(stakingAddresses, chain),\r\n      name: 'periodFinish',\r\n    },\r\n    {\r\n      address: getAddress(stakingAddresses, chain),\r\n      name: 'rewardRate',\r\n    },\r\n  ]\r\n  const [totalSupply, periodFinish, rewardRate] =\r\n    await multicall(lpStaking, lpStakingCalls, {}, chain)\r\n\r\n  // Total Deposits in staking address\r\n  const totalDeposits = new BigNumber(totalSupply)\r\n\r\n  // total reward rate\r\n  const totalRewardRate = new BigNumber(rewardRate).times(60 * 60 * 24 * 7)\r\n\r\n\r\n  const endDate = (new Date(0)).setUTCSeconds(periodFinish)\r\n  const hasEnded = endDate < now()\r\n  const remainingDays = (Math.max(0, Math.ceil(((((endDate - now()) / 1000) / 60) / 60) / 24))).toString()\r\n\r\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\r\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n  // Raw amount of token in the LP, including those not staked\r\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\r\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\r\n\r\n  // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\r\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio)\r\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\r\n\r\n  // Total staked in LP, in quote token value\r\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\r\n\r\n  // Only make masterchef calls if farm has pid\r\n  // const [info, totalAllocPoint] =\r\n  //   pid || pid === 0\r\n  //     ? await multicall(masterchefABI, [\r\n  //       {\r\n  //         address: getMasterChefAddress(chain),\r\n  //         name: 'poolInfo',\r\n  //         params: [pid],\r\n  //       },\r\n  //       {\r\n  //         address: getMasterChefAddress(chain),\r\n  //         name: 'totalAllocPoint',\r\n  //       },\r\n  //     ])\r\n  //     : [null, null]\r\n\r\n  const allocPoint = /* info ? new BigNumber(info.allocPoint?._hex) : */ BIG_ZERO\r\n  const poolWeight =/* totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : */ BIG_ZERO\r\n\r\n  return {\r\n    totalDeposits: totalDeposits.toJSON(),\r\n    'rewardRate': new BigNumber(rewardRate).toJSON(),\r\n    'totalRewardRate': totalRewardRate.toJSON(),\r\n    'hasEnded': hasEnded,\r\n    'remainingDays': remainingDays,\r\n    tokenAmountMc: tokenAmountMc.toJSON(),\r\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\r\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\r\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\r\n    poolWeight: poolWeight.toJSON(),\r\n    multiplier: `${allocPoint.div(100).toString()}X`,\r\n  }\r\n}\r\n\r\nexport default fetchFarm\r\n","import { Farm } from 'state/types'\r\nimport fetchPublicFarmData from './fetchPublicFarmData'\r\n\r\nconst fetchFarm = async (farm: Farm): Promise<Farm> => {\r\n  const farmPublicData = await fetchPublicFarmData(farm)\r\n  return { ...farm, ...farmPublicData }\r\n}\r\n\r\nexport default fetchFarm\r\n","import { FarmConfig } from 'config/constants/types'\r\nimport fetchFarm from './fetchFarm'\r\n\r\nconst fetchFarms = async (farmsToFetch: FarmConfig[]) => {\r\n  const data = await Promise.all(\r\n    farmsToFetch.map(async (farmConfig) => {\r\n      const farm = await fetchFarm(farmConfig)\r\n      return farm\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport lpStakingAbi from 'config/abi/lpStaking.json'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses, farm.chain)\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, getAddress(farm.stakingAddresses, farm.chain)] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls, {})\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses, farm.chain)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls, {})\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: getAddress(farm.stakingAddresses, farm.chain),\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n\r\n  const rawStakedBalances = await multicall(lpStakingAbi, calls, {})\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: getAddress(farm.stakingAddresses, farm.chain),\r\n      name: 'earned',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(lpStakingAbi, calls, {})\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    // const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    // const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\r\n    //   return farm.pid || farm.pid === 0\r\n    // })\r\n\r\n    return farms\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      }\r\n    })\r\n  },\r\n)\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setLoadArchivedFarmsData: (state, action) => {\r\n      // const loadArchivedFarmsData = action.payload\r\n      // state.loadArchivedFarmsData = loadArchivedFarmsData\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\r\n\r\nexport default farmsSlice.reducer\r\n","export default {\r\n  masterChef: {\r\n    97: '0x1d32c2945C8FDCBc7156c553B7cEa4325a17f4f9',\r\n    56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  },\r\n  sousChef: {\r\n    97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n    56: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',\r\n  },\r\n  lottery: {\r\n    97: '0x99c2EcD51d52c036B00130d882Bc65f20Fdecf9f',\r\n    56: '0x3C3f2049cc17C136a604bE23cF7E42745edf3b91',\r\n  },\r\n  lotteryNFT: {\r\n    97: '0x8175c10383511b3a1C68f9dB222dc14A19CC950e',\r\n    56: '0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1',\r\n  },\r\n  lotteryV2: {\r\n    97: '0x4D8B718b4e617ea49bCe6B508c23353Cc7bADd28',\r\n    56: '',\r\n  },\r\n  multiCall: {\r\n    56: '0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B',\r\n    97: '',\r\n    1: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n    3: '0x2f102138adB627cC38d2f878a1170cE718181144',\r\n  },\r\n  pancakeProfile: {\r\n    56: '0xDf4dBf6536201370F95e06A0F8a7a70fE40E388a',\r\n    97: '0x4B683C7E13B6d5D7fd1FeA9530F451954c1A7c8A',\r\n  },\r\n  pancakeRabbits: {\r\n    56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n    97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n  },\r\n  bunnyFactory: {\r\n    56: '0xfa249Caa1D16f75fa159F7DFBAc0cC5EaB48CeFf',\r\n    97: '0x707CBF373175fdB601D34eeBF2Cf665d08f01148',\r\n  },\r\n  claimRefund: {\r\n    56: '0xE7e53A7e9E3Cf6b840f167eF69519175c497e149',\r\n    97: '',\r\n  },\r\n  pointCenterIfo: {\r\n    56: '0x3C6919b132462C1FEc572c6300E83191f4F0012a',\r\n    97: '0xd2Ac1B1728Bb1C11ae02AB6e75B76Ae41A2997e3',\r\n  },\r\n  bunnySpecial: {\r\n    56: '0xFee8A195570a18461146F401d6033f5ab3380849',\r\n    97: '0x7b7b1583De1DeB32Ce6605F6deEbF24A0671c17C',\r\n  },\r\n  tradingCompetition: {\r\n    56: '0xd718baa0B1F4f70dcC8458154042120FFE0DEFFA',\r\n    97: '0xC787F45B833721ED3aC46E99b703B3E1E01abb97',\r\n  },\r\n  easterNft: {\r\n    56: '0x23c41D28A239dDCAABd1bb1deF8d057189510066',\r\n    97: '0x24ec6962dbe874F6B67B5C50857565667fA0854F',\r\n  },\r\n  cakeVault: {\r\n    56: '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC',\r\n    97: '',\r\n  },\r\n  predictions: {\r\n    56: '0x516ffd7D1e0Ca40b1879935B2De87cb20Fc1124b',\r\n    97: '0x4f3140C74789F1D809420343ea83BcE52B7bbAA5',\r\n  },\r\n  chainlinkOracle: {\r\n    56: '0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE',\r\n    97: '',\r\n  },\r\n}\r\n","import { MAINNET_CHAIN_ID } from 'config'\r\nimport addresses from 'config/constants/contracts'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport const getAddress = (address: Address, chainID = MAINNET_CHAIN_ID): string => {\r\n  return address[chainID]\r\n}\r\n\r\nexport const getCakeAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(tokens.cake.address, chainID)\r\n}\r\nexport const getMasterChefAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.masterChef, chainID)\r\n}\r\nexport const getMulticallAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.multiCall, chainID)\r\n}\r\nexport const getWbnbAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(tokens.wbnb.address, chainID)\r\n}\r\nexport const getLotteryAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.lottery, chainID)\r\n}\r\nexport const getLotteryTicketAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.lotteryNFT, chainID)\r\n}\r\nexport const getLotteryV2Address = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.lotteryV2, chainID)\r\n}\r\nexport const getPancakeProfileAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.pancakeProfile, chainID)\r\n}\r\nexport const getPancakeRabbitsAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.pancakeRabbits, chainID)\r\n}\r\nexport const getBunnyFactoryAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.bunnyFactory, chainID)\r\n}\r\nexport const getClaimRefundAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.claimRefund, chainID)\r\n}\r\nexport const getPointCenterIfoAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.pointCenterIfo, chainID)\r\n}\r\nexport const getBunnySpecialAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.bunnySpecial, chainID)\r\n}\r\nexport const getTradingCompetitionAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.tradingCompetition, chainID)\r\n}\r\nexport const getEasterNftAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.easterNft, chainID)\r\n}\r\nexport const getCakeVaultAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.cakeVault, chainID)\r\n}\r\nexport const getPredictionsAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.predictions, chainID)\r\n}\r\nexport const getChainlinkOracleAddress = (chainID = MAINNET_CHAIN_ID) => {\r\n  return getAddress(addresses.chainlinkOracle, chainID)\r\n}\r\n","import random from 'lodash/random'\r\nimport { MAINNET_CHAIN_ID } from '../config'\r\n\r\n// Array of available nodes to connect to\r\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\nexport const ethnodes = [process.env.REACT_APP_ETH_NODE_1]\r\nexport const ropsnodes = [process.env.REACT_APP_ROPS_NODE_1]\r\n\r\nconst getNodeUrl = (chainID = MAINNET_CHAIN_ID) => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  switch (chainID) {\r\n    case '1':\r\n      return ethnodes[0]\r\n    case '3':\r\n      return ropsnodes[0]\r\n    default:\r\n      return nodes[randomIndex]\r\n  }\r\n}\r\n\r\nexport default getNodeUrl\r\n","import tokens from './tokens'\r\nimport { FarmConfig } from './types'\r\nimport { CAKE_INFO_URL, PANCAKE_ADD_LIQUIDITY_URL } from '../index'\r\n\r\nconst farms: FarmConfig[] = [\r\n  /**\r\n   * These 3 farms (PID 0, 251, 252) should always be at the top of the file.\r\n   */\r\n  /* {\r\n    pid: 0,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    token: tokens.syrup,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  */\r\n\r\n  /**\r\n   * INTERNAL STAKING POOLS\r\n   */\r\n\r\n  /**\r\n   * EXTERNAL STAKING POOLS\r\n   */\r\n  {\r\n    isMain: true,\r\n    pid: 260,\r\n    lpSymbol: 'MGG-USDC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      3: '0x8324479F05F79F2d17d05aF0A5db9caa321CB9A3',\r\n      1: '0x8324479F05F79F2d17d05aF0A5db9caa321CB9A3',\r\n    },\r\n    stakingAddresses: {\r\n      97: '',\r\n      56: '',\r\n      3: '0xc5A228b9Ec0605944ee7a7cf5CBE528F310257DF',\r\n      1: '0xc5A228b9Ec0605944ee7a7cf5CBE528F310257DF',\r\n    },\r\n    token: tokens.mgg,\r\n    pairToken: tokens.usdc,\r\n    quoteToken: tokens.mgg,\r\n    isPromoted: 1,\r\n    chain: '1'\r\n  },\r\n  // {\r\n  //   pid: 259,\r\n  //   lpSymbol: 'BHC-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x19e3cd6418d81d69a71b3fc931387a2062c5a815',\r\n  //   },\r\n  //   stakingAddresses: {\r\n  //     97: '',\r\n  //     56: '0xD314dbD9998401770943EcdBE97f78Ea2f0dEE62',\r\n  //   },\r\n  //   token: tokens.bhc,\r\n  //   pairToken: tokens.busd,\r\n  //   quoteToken: tokens.bhc,\r\n  //   isPromoted: 1\r\n  // },\r\n\r\n]\r\n\r\nexport default farms\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { ConnectorNames } from '@pancakeswap/uikit'\r\nimport Web3 from 'web3'\r\nimport getNodeUrl from './getRpcUrl'\r\nimport { MAINNET_ETH_CHAIN_ID, ROPSTEN_CHAIN_ID } from '../config'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst rpcUrl = getNodeUrl()\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\nconst ethMainChainId = parseInt(MAINNET_ETH_CHAIN_ID, 10)\r\nconst ropsChainId = parseInt(ROPSTEN_CHAIN_ID, 10)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId, ethMainChainId,  ropsChainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: {\r\n    [chainId]: rpcUrl,\r\n    [ethMainChainId]: rpcUrl,\r\n    [ropsChainId]: rpcUrl,\r\n  },\r\n  bridge: 'https://bridge.walletconnect.org/',\r\n  qrcode: true,\r\n  pollingInterval: POLLING_INTERVAL,\r\n})\r\n\r\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId, ethMainChainId,  ropsChainId] })\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n\r\nexport const getLibrary = (provider): Web3 => {\r\n  return provider\r\n}\r\n","export { default as farmsConfig } from './farms'\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { Team } from './types'\r\n\r\nconst teams: Team[] = [\r\n  {\r\n    id: 1,\r\n    name: 'Syrup Storm',\r\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\r\n    images: {\r\n      lg: 'syrup-storm-lg.png',\r\n      md: 'syrup-storm-md.png',\r\n      sm: 'syrup-storm-sm.png',\r\n      alt: 'syrup-storm-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png',\r\n    },\r\n    background: 'syrup-storm-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Fearsome Flippers',\r\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\r\n    images: {\r\n      lg: 'fearsome-flippers-lg.png',\r\n      md: 'fearsome-flippers-md.png',\r\n      sm: 'fearsome-flippers-sm.png',\r\n      alt: 'fearsome-flippers-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png',\r\n    },\r\n    background: 'fearsome-flippers-bg.svg',\r\n    textColor: '#FFFFFF',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Chaotic Cakers',\r\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\r\n    images: {\r\n      lg: 'chaotic-cakers-lg.png',\r\n      md: 'chaotic-cakers-md.png',\r\n      sm: 'chaotic-cakers-sm.png',\r\n      alt: 'chaotic-cakers-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png',\r\n    },\r\n    background: 'chaotic-cakers-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n]\r\n\r\nexport default teams\r\n","import merge from 'lodash/merge'\r\nimport teamsList from 'config/constants/teams'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Team } from 'config/constants/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { TeamsById } from 'state/types'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\n\r\nconst profileContract = getProfileContract()\r\n\r\nexport const getTeam = async (teamId: number): Promise<Team> => {\r\n  try {\r\n    const {\r\n      0: teamName,\r\n      2: numberUsers,\r\n      3: numberPoints,\r\n      4: isJoinable,\r\n    } = await profileContract.methods.getTeamProfile(teamId).call()\r\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\r\n\r\n    return merge({}, staticTeamInfo, {\r\n      isJoinable,\r\n      name: teamName,\r\n      users: numberUsers,\r\n      points: numberPoints,\r\n    })\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\r\nexport const getTeams = async (): Promise<TeamsById> => {\r\n  try {\r\n    const teamsById = teamsList.reduce((accum, team) => {\r\n      return {\r\n        ...accum,\r\n        [team.id]: team,\r\n      }\r\n    }, {})\r\n    const nbTeams = await profileContract.methods.numberTeams().call()\r\n\r\n    const calls = []\r\n    for (let i = 1; i <= nbTeams; i++) {\r\n      calls.push({\r\n        address: getPancakeProfileAddress(),\r\n        name: 'getTeamProfile',\r\n        params: [i],\r\n      })\r\n    }\r\n    const teamData = await multicallv2(profileABI, calls)\r\n\r\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\r\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\r\n\r\n      return {\r\n        ...accum,\r\n        [index + 1]: {\r\n          name: teamName,\r\n          users: numberUsers.toNumber(),\r\n          points: numberPoints.toNumber(),\r\n          isJoinable,\r\n        },\r\n      }\r\n    }, {})\r\n\r\n    return merge({}, teamsById, onChainTeamData)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { Farm, Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\ntype UserData =\r\n  | Pool['userData']\r\n  | {\r\n      allowance: number | string\r\n      stakingTokenBalance: number | string\r\n      stakedBalance: number | string\r\n      pendingReward: number | string\r\n    }\r\n\r\nexport const transformUserData = (userData: UserData) => {\r\n  return {\r\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\r\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\r\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\r\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO,\r\n  }\r\n}\r\n\r\nexport const transformPool = (pool: Pool): Pool => {\r\n  const { totalStaked, stakingLimit, userData, ...rest } = pool\r\n\r\n  return {\r\n    ...rest,\r\n    userData: transformUserData(userData),\r\n    totalStaked: new BigNumber(totalStaked),\r\n    stakingLimit: new BigNumber(stakingLimit),\r\n  } as Pool\r\n}\r\n\r\nexport const getTokenPricesFromFarm = (farms: Farm[]) => {\r\n  return farms.reduce((prices, farm) => {\r\n    const quoteTokenAddress = getAddress(farm.quoteToken.address).toLocaleLowerCase()\r\n    const tokenAddress = getAddress(farm.token.address).toLocaleLowerCase()\r\n    /* eslint-disable no-param-reassign */\r\n    if (!prices[quoteTokenAddress]) {\r\n      prices[quoteTokenAddress] = new BigNumber(farm.quoteToken.busdPrice).toNumber()\r\n    }\r\n    if (!prices[tokenAddress]) {\r\n      prices[tokenAddress] = new BigNumber(farm.token.busdPrice).toNumber()\r\n    }\r\n    /* eslint-enable no-param-reassign */\r\n    return prices\r\n  }, {})\r\n}\r\n","import { Campaign } from './types'\r\n\r\n/**\r\n * id: The campaign id (required)\r\n * type: The type of the achievement\r\n * title: A string or an object to be translated.\r\n * Note: If the value is a string it is likely used as data in a translation object\r\n *\r\n * badge: Achievement avatar\r\n */\r\n\r\nconst campaigns: Campaign[] = [\r\n  {\r\n    id: '511110000',\r\n    type: 'ifo',\r\n    title: 'Kalmar',\r\n    badge: 'ifo-kalm.svg',\r\n  },\r\n  {\r\n    id: '511100000',\r\n    type: 'ifo',\r\n    title: 'Hotcross',\r\n    badge: 'ifo-hotcross.svg',\r\n  },\r\n  {\r\n    id: '511090000',\r\n    type: 'ifo',\r\n    title: 'Horizon Protocol',\r\n    badge: 'ifo-hzn.svg',\r\n  },\r\n  {\r\n    id: '511080000',\r\n    type: 'ifo',\r\n    title: 'Belt',\r\n    badge: 'ifo-belt.svg',\r\n  },\r\n  {\r\n    id: '511070000',\r\n    type: 'ifo',\r\n    title: 'Yieldwatch',\r\n    badge: 'ifo-watch.svg',\r\n  },\r\n  {\r\n    id: '511060000',\r\n    type: 'ifo',\r\n    title: 'Berry',\r\n    badge: 'ifo-bry.svg',\r\n  },\r\n  {\r\n    id: '511050000',\r\n    type: 'ifo',\r\n    title: 'Soteria',\r\n    badge: 'ifo-wsote.svg',\r\n  },\r\n  {\r\n    id: '511040000',\r\n    type: 'ifo',\r\n    title: 'Helmet',\r\n    badge: 'ifo-helmet.svg',\r\n  },\r\n  {\r\n    id: '511030000',\r\n    type: 'ifo',\r\n    title: 'Tenet',\r\n    badge: 'ifo-ten.svg',\r\n  },\r\n  {\r\n    id: '511020000',\r\n    type: 'ifo',\r\n    title: 'Ditto',\r\n    badge: 'ifo-ditto.svg',\r\n  },\r\n  {\r\n    id: '511010000',\r\n    type: 'ifo',\r\n    title: 'Blink',\r\n    badge: 'ifo-blk.svg',\r\n  },\r\n  {\r\n    id: '512010001',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Gold',\r\n    badge: 'easter-champion-gold.svg',\r\n  },\r\n  {\r\n    id: '512010002',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010003',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010004',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010005',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Gold',\r\n    badge: 'easter-participant-gold.svg',\r\n  },\r\n  {\r\n    id: '512010006',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Silver',\r\n    badge: 'easter-champion-silver.svg',\r\n  },\r\n  {\r\n    id: '512010007',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010008',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010009',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010010',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Silver',\r\n    badge: 'easter-participant-silver.svg',\r\n  },\r\n  {\r\n    id: '512010011',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Bronze',\r\n    badge: 'easter-champion-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010012',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010013',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010014',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010015',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Bronze',\r\n    badge: 'easter-participant-bronze.svg',\r\n  },\r\n]\r\n\r\n/**\r\n * Transform the campaign config into a map. Keeps the config the same\r\n * as the others and allows easy access to a campaign by id\r\n */\r\nexport const campaignMap = new Map<string, Campaign>()\r\n\r\ncampaigns.forEach((campaign) => {\r\n  campaignMap.set(campaign.id, campaign)\r\n})\r\n\r\nexport default campaigns\r\n","import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { orderBy } from 'lodash'\r\nimport { Team } from 'config/constants/types'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { farmsConfig } from 'config/constants'\r\nimport web3NoAccount from 'utils/web3'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport {\r\n  fetchCakeVaultFees,\r\n  fetchCakeVaultPublicData,\r\n  fetchCakeVaultUserData,\r\n  fetchFarmsPublicDataAsync,\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  setBlock,\r\n} from './actions'\r\nimport { AchievementState, Farm, FarmsState, Pool, ProfileState, State, TeamsState } from './types'\r\nimport { fetchProfile } from './profile'\r\nimport { fetchTeam, fetchTeams } from './teams'\r\nimport { fetchAchievements } from './achievements'\r\nimport { fetchWalletNfts } from './collectibles'\r\nimport { getCanClaim } from './predictions/helpers'\r\nimport { transformPool } from './pools/helpers'\r\nimport { fetchPoolsStakingLimitsAsync } from './pools'\r\nimport { fetchFarmUserDataAsync, nonArchivedFarms } from './farms'\r\n\r\nexport const usePollFarmsData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\r\n    }\r\n  }, [includeArchive, dispatch, slowRefresh, account])\r\n}\r\n\r\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\r\nexport const usePollCoreFarmData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\r\n  }, [dispatch, fastRefresh])\r\n}\r\n\r\nexport const usePollBlockNumber = () => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3NoAccount.eth.getBlockNumber()\r\n      dispatch(setBlock(blockNumber))\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [dispatch])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): FarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\n// Return a farm for a given token symbol. The farm is filtered based on attempting to return a farm with a quote token from an array of preferred quote tokens\r\nexport const useFarmFromTokenSymbol = (tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\r\n  const farms = useSelector((state: State) => state.farms.data.filter((farm) => farm.token.symbol === tokenSymbol))\r\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useBusdPriceFromToken = (tokenSymbol: string): BigNumber => {\r\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol)\r\n  const tokenPrice = useBusdPriceFromPid(tokenFarm?.pid)\r\n  return tokenPrice\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string) => {\r\n  const farm = useFarmFromLpSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\r\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// Pools\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchPoolsPublicData = async () => {\r\n      const blockNumber = await web3NoAccount.eth.getBlockNumber()\r\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\r\n    }\r\n\r\n    fetchPoolsPublicData()\r\n    dispatch(fetchPoolsStakingLimitsAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\r\n    pools: state.pools.data,\r\n    userDataLoaded: state.pools.userDataLoaded,\r\n  }))\r\n  return { pools: pools.map(transformPool), userDataLoaded }\r\n}\r\n\r\nexport const usePoolFromPid = (sousId: number): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return transformPool(pool)\r\n}\r\n\r\nexport const useFetchCakeVault = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData())\r\n  }, [dispatch, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultUserData({ account }))\r\n  }, [dispatch, fastRefresh, account])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultFees())\r\n  }, [dispatch])\r\n}\r\n\r\nexport const useCakeVault = () => {\r\n  const {\r\n    totalShares: totalSharesAsString,\r\n    pricePerFullShare: pricePerFullShareAsString,\r\n    totalCakeInVault: totalCakeInVaultAsString,\r\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\r\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\r\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\r\n    userData: {\r\n      isLoading,\r\n      userShares: userSharesAsString,\r\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  } = useSelector((state: State) => state.pools.cakeVault)\r\n\r\n  const estimatedCakeBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyRewardAsString)\r\n  }, [estimatedCakeBountyRewardAsString])\r\n\r\n  const totalPendingCakeHarvest = useMemo(() => {\r\n    return new BigNumber(totalPendingCakeHarvestAsString)\r\n  }, [totalPendingCakeHarvestAsString])\r\n\r\n  const totalShares = useMemo(() => {\r\n    return new BigNumber(totalSharesAsString)\r\n  }, [totalSharesAsString])\r\n\r\n  const pricePerFullShare = useMemo(() => {\r\n    return new BigNumber(pricePerFullShareAsString)\r\n  }, [pricePerFullShareAsString])\r\n\r\n  const totalCakeInVault = useMemo(() => {\r\n    return new BigNumber(totalCakeInVaultAsString)\r\n  }, [totalCakeInVaultAsString])\r\n\r\n  const userShares = useMemo(() => {\r\n    return new BigNumber(userSharesAsString)\r\n  }, [userSharesAsString])\r\n\r\n  const cakeAtLastUserAction = useMemo(() => {\r\n    return new BigNumber(cakeAtLastUserActionAsString)\r\n  }, [cakeAtLastUserActionAsString])\r\n\r\n  return {\r\n    totalShares,\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: {\r\n      performanceFee,\r\n      callFee,\r\n      withdrawalFee,\r\n      withdrawalFeePeriod,\r\n    },\r\n    userData: {\r\n      isLoading,\r\n      userShares,\r\n      cakeAtLastUserAction,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  }\r\n}\r\n\r\n// Profile\r\n\r\nexport const useFetchProfile = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProfile(account))\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\r\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\r\n}\r\n\r\n// Teams\r\n\r\nexport const useTeam = (id: number) => {\r\n  const team: Team = useSelector((state: State) => state.teams.data[id])\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeam(id))\r\n  }, [id, dispatch])\r\n\r\n  return team\r\n}\r\n\r\nexport const useTeams = () => {\r\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeams())\r\n  }, [dispatch])\r\n\r\n  return { teams: data, isInitialized, isLoading }\r\n}\r\n\r\n// Achievements\r\n\r\nexport const useFetchAchievements = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchAchievements(account))\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useAchievements = () => {\r\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\r\n  return achievements\r\n}\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  // const bnbBusdFarm = useFarmFromPid(252)\r\n  return new BigNumber(1)\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const cakeBnbFarm = useFarmFromPid(251)\r\n  return new BigNumber(1)\r\n}\r\n\r\n// Block\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n\r\n// Predictions\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetRounds = () => {\r\n  return useSelector((state: State) => state.predictions.rounds)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.intervalBlocks)\r\n}\r\n\r\nexport const useGetBufferBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.bufferBlocks)\r\n}\r\n\r\nexport const useGetTotalIntervalBlocks = () => {\r\n  const intervalBlocks = useGetIntervalBlocks()\r\n  const bufferBlocks = useGetBufferBlocks()\r\n  return intervalBlocks + bufferBlocks\r\n}\r\n\r\nexport const useGetRound = (id: string) => {\r\n  const rounds = useGetRounds()\r\n  return rounds[id]\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  return rounds.find((round) => round.epoch === currentEpoch)\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetCurrentRoundBlockNumber = () => {\r\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => new BigNumber(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetBetByRoundId = (account: string, roundId: string) => {\r\n  const bets = useSelector((state: State) => state.predictions.bets)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][roundId]) {\r\n    return null\r\n  }\r\n\r\n  return bets[account][roundId]\r\n}\r\n\r\nexport const useBetCanClaim = (account: string, roundId: string) => {\r\n  const bet = useGetBetByRoundId(account, roundId)\r\n\r\n  if (!bet) {\r\n    return false\r\n  }\r\n\r\n  return getCanClaim(bet)\r\n}\r\n\r\nexport const useGetLastOraclePrice = (): BigNumber => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return new BigNumber(lastOraclePrice)\r\n}\r\n\r\n// Collectibles\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n","import { useContext } from 'react'\r\nimport { ToastsContext } from 'contexts/ToastsContext'\r\n\r\nconst useToast = () => {\r\n  const toastContext = useContext(ToastsContext)\r\n\r\n  if (toastContext === undefined) {\r\n    throw new Error('Toasts context undefined')\r\n  }\r\n\r\n  return toastContext\r\n}\r\n\r\nexport default useToast\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\r\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector'\r\nimport {\r\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n  WalletConnectConnector,\r\n} from '@web3-react/walletconnect-connector'\r\n// import { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\r\nimport { ConnectorId } from '@sparkpointio/sparkswap-uikit'\r\nimport { connectorsByName } from 'utils/web3React'\r\nimport { setupNetwork } from 'utils/wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { profileClear } from 'state/profile'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst useAuth = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { activate, deactivate } = useWeb3React()\r\n  const { toastError } = useToast()\r\n\r\n  const login = useCallback(\r\n    (connectorID: ConnectorId) => {\r\n      const connector = connectorsByName[connectorID]\r\n      if (connector) {\r\n        activate(connector, async (error: Error) => {\r\n          if (error instanceof UnsupportedChainIdError) {\r\n            const hasSetup = await setupNetwork()\r\n            if (hasSetup) {\r\n              activate(connector)\r\n            }\r\n          } else {\r\n            window.localStorage.removeItem('1')\r\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\r\n              toastError(t('Provider Error'), t('No provider was found'))\r\n            } else if (\r\n              error instanceof UserRejectedRequestErrorInjected ||\r\n              error instanceof UserRejectedRequestErrorWalletConnect\r\n            ) {\r\n              if (connector instanceof WalletConnectConnector) {\r\n                const walletConnector = connector as WalletConnectConnector\r\n                walletConnector.walletConnectProvider = null\r\n              }\r\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\r\n            } else {\r\n              toastError(error.name, error.message)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\r\n      }\r\n    },\r\n    [t, activate, toastError],\r\n  )\r\n\r\n  const logout = useCallback(() => {\r\n    dispatch(profileClear())\r\n    deactivate()\r\n    // This localStorage key is set by @web3-react/walletconnect-connector\r\n    if (window.localStorage.getItem('walletconnect')) {\r\n      connectorsByName.walletconnect.close()\r\n      connectorsByName.walletconnect.walletConnectProvider = null\r\n    }\r\n  }, [deactivate, dispatch])\r\n\r\n  return { login, logout }\r\n}\r\n\r\nexport default useAuth\r\n","import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts'\r\nimport { Nft, NftType } from 'config/constants/types'\r\nimport { getAddress } from './addressHelpers'\r\nimport { getErc721Contract } from './contractHelpers'\r\n\r\n/**\r\n * Gets the identifier key based on the nft address\r\n * Helpful for looking up the key when all you have is the address\r\n */\r\nexport const getIdentifierKeyFromAddress = (nftAddress: string) => {\r\n  const nftSource = Object.values(nftSources).find((nftSourceEntry) => {\r\n    const address = getAddress(nftSourceEntry.address)\r\n    return address === nftAddress\r\n  })\r\n\r\n  return nftSource ? nftSource.identifierKey : null\r\n}\r\n\r\n/**\r\n * Some sources like Pancake do not return HTTP tokenURI's\r\n */\r\nexport const getTokenUrl = (tokenUri: string) => {\r\n  if (tokenUri.startsWith('ipfs://')) {\r\n    return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`\r\n  }\r\n\r\n  return tokenUri\r\n}\r\n\r\nexport const getAddressByType = (type: NftType) => {\r\n  return getAddress(nftSources[type].address)\r\n}\r\n\r\nexport const getTokenUriData = async (nftAddress: string, tokenId: number) => {\r\n  try {\r\n    const contract = getErc721Contract(nftAddress)\r\n    const tokenUri = await contract.methods.tokenURI(tokenId).call()\r\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri))\r\n\r\n    if (!uriDataResponse.ok) {\r\n      return null\r\n    }\r\n\r\n    const uriData = await uriDataResponse.json()\r\n    return uriData\r\n  } catch (error) {\r\n    console.error('getTokenUriData', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const getNftByTokenId = async (nftAddress: string, tokenId: number): Promise<Nft | null> => {\r\n  const uriData = await getTokenUriData(nftAddress, tokenId)\r\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress)\r\n\r\n  // Bail out early if we have no uriData, identifierKey, or the value does not\r\n  // exist in the object\r\n  if (!uriData) {\r\n    return null\r\n  }\r\n\r\n  if (!identifierKey) {\r\n    return null\r\n  }\r\n\r\n  if (!uriData[identifierKey]) {\r\n    return null\r\n  }\r\n\r\n  return Nfts.find((nft) => {\r\n    return uriData[identifierKey].includes(nft.identifier)\r\n  })\r\n}\r\n","import { Ifo } from './types'\r\n\r\n// const cakeBnbLpToken: Token = {\r\n//   // symbol: farms[1].lpSymbol,\r\n//   // address: farms[1].lpAddresses,\r\n//   // decimals: 18,\r\n// }\r\n\r\nconst ifos: Ifo[] = [\r\n  // {\r\n  //   id: 'kalmar',\r\n  //   address: '0x1aFB32b76696CdF05593Ca3f3957AEFB23a220FB',\r\n  //   isActive: true,\r\n  //   name: 'Kalmar (KALM)',\r\n  //   poolBasic: {\r\n  //     saleAmount: '375,000 KALM',\r\n  //     raiseAmount: '$750,000',\r\n  //     cakeToBurn: '$375,000',\r\n  //     distributionRatio: 0.3,\r\n  //   },\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '875,000 KALM',\r\n  //     raiseAmount: '$2,500,000',\r\n  //     cakeToBurn: '$1,250,000',\r\n  //     distributionRatio: 0.7,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.kalm,\r\n  //   releaseBlockNumber: 7707736,\r\n  //   campaignId: '511110000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/kalmar-kalm-ifo-to-be-hosted-on-pancakeswap-4540059753e4',\r\n  //   tokenOfferingPrice: 2.0,\r\n  //   version: 2,\r\n  // },\r\n  // {\r\n  //   id: 'hotcross',\r\n  //   address: '0xb664cdbe385656F8c54031c0CB12Cea55b584b63',\r\n  //   isActive: false,\r\n  //   name: 'Hot Cross (HOTCROSS)',\r\n  //   poolBasic: {\r\n  //     saleAmount: '15,000,000 HOTCROSS',\r\n  //     raiseAmount: '$750,000',\r\n  //     cakeToBurn: '$375,000',\r\n  //     distributionRatio: 0.3,\r\n  //   },\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '35,000,000 HOTCROSS',\r\n  //     raiseAmount: '$1,750,000',\r\n  //     cakeToBurn: '$875,000',\r\n  //     distributionRatio: 0.7,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.hotcross,\r\n  //   releaseBlockNumber: 7477900,\r\n  //   campaignId: '511100000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/hot-cross-hotcross-ifo-to-be-hosted-on-pancakeswap-10e70f1f6841',\r\n  //   tokenOfferingPrice: 0.05,\r\n  //   version: 2,\r\n  // },\r\n  // {\r\n  //   id: 'horizon',\r\n  //   address: '0x6137B571f7F1E44839ae10310a08be86D1A4D03B',\r\n  //   isActive: false,\r\n  //   name: 'Horizon Protocol (HZN)',\r\n  //   poolBasic: {\r\n  //     saleAmount: '3,000,000 HZN',\r\n  //     raiseAmount: '$750,000',\r\n  //     cakeToBurn: '$375,000',\r\n  //     distributionRatio: 0.3,\r\n  //   },\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '7,000,000 HZN',\r\n  //     raiseAmount: '$1,750,000',\r\n  //     cakeToBurn: '$875,000',\r\n  //     distributionRatio: 0.7,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.hzn,\r\n  //   releaseBlockNumber: 6581111,\r\n  //   campaignId: '511090000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/horizon-protocol-hzn-ifo-to-be-hosted-on-pancakeswap-51f79601c9d8',\r\n  //   tokenOfferingPrice: 0.25,\r\n  //   version: 2,\r\n  // },\r\n  // {\r\n  //   id: 'belt',\r\n  //   address: '0xc9FBedC033a1c479a6AD451ffE463025E92a1d38',\r\n  //   isActive: false,\r\n  //   name: 'Belt (BELT)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '150,000 BELT',\r\n  //     raiseAmount: '$3,000,000',\r\n  //     cakeToBurn: '$1,500,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.belt,\r\n  //   releaseBlockNumber: 5493919,\r\n  //   campaignId: '511080000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/belt-fi-belt-ifo-to-be-hosted-on-pancakeswap-353585117e32',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'watch',\r\n  //   address: '0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d',\r\n  //   isActive: false,\r\n  //   name: 'Yieldwatch (WATCH)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '8,000,000 WATCH',\r\n  //     raiseAmount: '$800,000',\r\n  //     cakeToBurn: '$400,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.watch,\r\n  //   releaseBlockNumber: 5294924,\r\n  //   campaignId: '511070000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/yieldwatch-watch-ifo-to-be-hosted-on-pancakeswap-d24301f17241',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'berry',\r\n  //   address: '0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd',\r\n  //   isActive: false,\r\n  //   name: 'Berry (BRY)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '2,000,000 BRY',\r\n  //     raiseAmount: '$1,000,000',\r\n  //     cakeToBurn: '$500,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.bry,\r\n  //   releaseBlockNumber: 4750968,\r\n  //   campaignId: '511060000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/berry-bry-ifo-to-be-hosted-on-pancakeswap-b4f9095e9cdb',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'soteria',\r\n  //   address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n  //   isActive: false,\r\n  //   name: 'Soteria (wSOTE)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '1,500,000 wSOTE',\r\n  //     raiseAmount: '$525,000',\r\n  //     cakeToBurn: '$262,500',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.wsote,\r\n  //   releaseBlockNumber: 4086064,\r\n  //   campaignId: '511050000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/soteria-sota-ifo-to-be-hosted-on-pancakeswap-64b727c272ae',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'helmet',\r\n  //   address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\r\n  //   isActive: false,\r\n  //   name: 'Helmet.insure (Helmet)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '10,000,000 Helmet',\r\n  //     raiseAmount: '$1,000,000',\r\n  //     cakeToBurn: '$500,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.helmet,\r\n  //   releaseBlockNumber: 3771926,\r\n  //   campaignId: '511040000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/1-000-000-helmet-helmet-ifo-to-be-hosted-on-pancakeswap-3379a2a89a67',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'tenet',\r\n  //   address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\r\n  //   isActive: false,\r\n  //   name: 'Tenet (TEN)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '1,000,000 TEN',\r\n  //     raiseAmount: '$1,000,000',\r\n  //     cakeToBurn: '$500,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.ten,\r\n  //   releaseBlockNumber: 3483883,\r\n  //   campaignId: '511030000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/tenet-ten-ifo-to-be-hosted-on-pancakeswap-b7e1eb4cb272',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'ditto',\r\n  //   address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\r\n  //   isActive: false,\r\n  //   name: 'Ditto (DITTO)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '700,000 DITTO',\r\n  //     raiseAmount: '$630,000',\r\n  //     cakeToBurn: '$315,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.ditto,\r\n  //   releaseBlockNumber: 3279767,\r\n  //   campaignId: '511020000',\r\n  //   articleUrl: 'https://pancakeswap.medium.com/ditto-money-ditto-ifo-to-be-hosted-on-pancakeswap-342da3059a66',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n  // {\r\n  //   id: 'blink',\r\n  //   address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\r\n  //   isActive: false,\r\n  //   name: 'BLINk (BLK)',\r\n  //   poolUnlimited: {\r\n  //     saleAmount: '100,000,000 BLINK',\r\n  //     raiseAmount: '$1,000,000',\r\n  //     cakeToBurn: '$500,000',\r\n  //     distributionRatio: 1,\r\n  //   },\r\n  //   currency: cakeBnbLpToken,\r\n  //   token: tokens.blink,\r\n  //   releaseBlockNumber: 3279767,\r\n  //   campaignId: '511010000',\r\n  //   articleUrl: 'https://medium.com/pancakeswap/1-000-000-ifo-blink-joins-pancakeswap-15841800bdd8',\r\n  //   tokenOfferingPrice: null,\r\n  //   version: 1,\r\n  // },\r\n]\r\n\r\nexport default ifos\r\n","import BigNumber from 'bignumber.js/bignumber'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\n// CAKE_PER_BLOCK details\r\n// 40 CAKE is minted per block\r\n// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)\r\n// 10 CAKE per block goes to CAKE syrup pool\r\n// 10 CAKE per block goes to Yield farms and lottery\r\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\r\n// CAKE/Block in src/views/Home/components/CakeStats.tsx = 20 (40 - Amount sent to burn pool)\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(40)\r\nexport const BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\r\nexport const CAKE_PER_YEAR = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR)\r\n// export const BASE_URL = 'https://pancakeswap.finance'\r\nexport const BASE_URL = 'https://app.uniswap.org'\r\nexport const BASE_EXCHANGE_URL = 'https://app.uniswap.org'\r\nexport const BASE_INFO_URL = 'https://v2.info.uniswap.org/token/'\r\nexport const CAKE_INFO_URL = 'https://pancakeswap.finance/info/pool/'\r\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add/v2`\r\nexport const BASE_SWAP_URL = `${BASE_EXCHANGE_URL}/#/swap`\r\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/#/pool`\r\nexport const PANCAKE_EXCHANGE_URL = 'https://pancakeswap.finance'\r\nexport const PANCAKE_ADD_LIQUIDITY_URL = `${PANCAKE_EXCHANGE_URL}/add`\r\nexport const BASE_BSC_SCAN_URL = 'https://bscscan.com'\r\nexport const BASE_ETH_SCAN_URL = 'https://etherscan.io'\r\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50\r\nexport const LOTTERY_TICKET_PRICE = 1\r\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\r\nexport const DEFAULT_GAS_LIMIT = 200000\r\nexport const DEFAULT_GAS_PRICE = 5\r\nexport const TESTNET_CHAIN_ID = '97'\r\nexport const MAINNET_CHAIN_ID = '1'\r\nexport const ROPSTEN_CHAIN_ID = '3'\r\nexport const MAINNET_ETH_CHAIN_ID = '1'\r\nexport const EPOCH_PER_YEAR = 31556926\r\n// export const SPARKSWAP_API = 'https://api.sparkswap.info/api/'\r\nexport const SPARKSWAP_API = 'https://uniswap-info-api-kgtrnk25u-sparkpoint-dev.vercel.app/api'\r\nexport const API_ASSETS = 'assets'\r\nexport const API_SUMMARY = 'summary'\r\nexport const API_LIQUIDITY = 'liquidity'\r\nexport const API_LASTPRICE = 'last_price'\r\n\r\n\r\n\r\nexport const BASE_BSC_SCAN_URLS = {\r\n  [MAINNET_CHAIN_ID]: 'https://bscscan.com',\r\n  [TESTNET_CHAIN_ID]: 'https://testnet.bscscan.com',\r\n}\r\n\r\nexport const BASE_ETH_SCAN_URLS = {\r\n  [MAINNET_ETH_CHAIN_ID]: 'https://etherscan.io',\r\n  [ROPSTEN_CHAIN_ID]: 'https://ropsten.etherscan.io',\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { BlockState } from '../types'\r\n\r\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\r\n\r\nexport const blockSlice = createSlice({\r\n  name: 'Block',\r\n  initialState,\r\n  reducers: {\r\n    setBlock: (state, action: PayloadAction<number>) => {\r\n      if (state.initialBlock === 0) {\r\n        state.initialBlock = action.payload\r\n      }\r\n\r\n      state.currentBlock = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setBlock } = blockSlice.actions\r\n\r\nexport default blockSlice.reducer\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { CollectiblesState } from 'state/types'\r\nimport { nftSources } from 'config/constants/nfts'\r\nimport { NftType } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { getNftByTokenId } from 'utils/collectibles'\r\n\r\nconst initialState: CollectiblesState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: {},\r\n}\r\n\r\ntype NftSourceItem = [number, string]\r\n\r\n// Thunks\r\nexport const fetchWalletNfts = createAsyncThunk<NftSourceItem[], string>(\r\n  'collectibles/fetchWalletNfts',\r\n  async (account) => {\r\n    // For each nft source get nft data\r\n    const nftSourcePromises = Object.keys(nftSources).map(async (nftSourceType) => {\r\n      const { address: addressObj } = nftSources[nftSourceType as NftType]\r\n      const address = getAddress(addressObj)\r\n      const contract = getErc721Contract(address)\r\n\r\n      const getTokenIdAndData = async (index: number) => {\r\n        try {\r\n          const tokenId = await contract.methods.tokenOfOwnerByIndex(account, index).call()\r\n          const walletNft = await getNftByTokenId(address, tokenId)\r\n          return [Number(tokenId), walletNft.identifier]\r\n        } catch (error) {\r\n          console.error('getTokenIdAndData', error)\r\n          return null\r\n        }\r\n      }\r\n\r\n      const balanceOfResponse = await contract.methods.balanceOf(account).call()\r\n      const balanceOf = Number(balanceOfResponse)\r\n\r\n      if (balanceOf === 0) {\r\n        return []\r\n      }\r\n\r\n      const nftDataFetchPromises = []\r\n\r\n      // For each index get the tokenId and data associated with it\r\n      for (let i = 0; i < balanceOf; i++) {\r\n        nftDataFetchPromises.push(getTokenIdAndData(i))\r\n      }\r\n\r\n      const nftData = await Promise.all(nftDataFetchPromises)\r\n      return nftData\r\n    })\r\n\r\n    const nftSourceData = await Promise.all(nftSourcePromises)\r\n\r\n    return nftSourceData.flat()\r\n  },\r\n)\r\n\r\nexport const collectiblesSlice = createSlice({\r\n  name: 'collectibles',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchWalletNfts.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchWalletNfts.fulfilled, (state, action) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n      state.data = action.payload.reduce((accum, association) => {\r\n        if (!association) {\r\n          return accum\r\n        }\r\n\r\n        const [tokenId, identifier] = association as NftSourceItem\r\n\r\n        return {\r\n          ...accum,\r\n          [identifier]: accum[identifier] ? [...accum[identifier], tokenId] : [tokenId],\r\n        }\r\n      }, {})\r\n    })\r\n  },\r\n})\r\n\r\nexport default collectiblesSlice.reducer\r\n","import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const { user } = await request(\r\n      GRAPH_API_PROFILE,\r\n      gql`\r\n        query getUserPointIncreaseEvents($account: ID!) {\r\n          user(id: $account) {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        account: account.toLowerCase(),\r\n      },\r\n    )\r\n\r\n    return user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AchievementState, Achievement } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  data: [],\r\n}\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.data.push(action.payload)\r\n    },\r\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = [...state.data, ...action.payload]\r\n    },\r\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = action.payload\r\n    },\r\n    clearAchievements: (state) => {\r\n      state.data = []\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\r\n\r\n// Thunks\r\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    const achievements = await getAchievements(account)\r\n    dispatch(setAchievements(achievements))\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport default achievementSlice.reducer\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@metagg/mgg-uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: true, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : true\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import React, { createContext, ReactNode, useCallback, useState } from 'react'\r\nimport { kebabCase } from 'lodash'\r\nimport { Toast, toastTypes } from '@pancakeswap/uikit'\r\nimport { ToastContextApi } from './types'\r\n\r\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\r\n\r\nexport const ToastsProvider: React.FC = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\r\n\r\n  const toast = useCallback(\r\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\r\n      setToasts((prevToasts) => {\r\n        const id = kebabCase(title)\r\n\r\n        // Remove any existing toasts with the same id\r\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\r\n\r\n        return [\r\n          {\r\n            id,\r\n            title,\r\n            description,\r\n            type,\r\n          },\r\n          ...currentToasts,\r\n        ]\r\n      })\r\n    },\r\n    [setToasts],\r\n  )\r\n\r\n  const toastError = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.DANGER })\r\n  }\r\n  const toastInfo = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.INFO })\r\n  }\r\n  const toastSuccess = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.SUCCESS })\r\n  }\r\n  const toastWarning = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.WARNING })\r\n  }\r\n  const clear = () => setToasts([])\r\n  const remove = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\r\n  }\r\n\r\n  return (\r\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\r\n      {children}\r\n    </ToastsContext.Provider>\r\n  )\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\nconst useTabVisibility = () => {\r\n  const tabVisibleRef = useRef(true)\r\n\r\n  useEffect(() => {\r\n    const onVisibilityChange = () => {\r\n      tabVisibleRef.current = !document.hidden\r\n    }\r\n\r\n    window.addEventListener('visibilitychange', onVisibilityChange)\r\n\r\n    return () => {\r\n      window.removeEventListener('visibilitychange', onVisibilityChange)\r\n    }\r\n  }, [])\r\n\r\n  return { tabVisibleRef }\r\n}\r\n\r\nexport default useTabVisibility\r\n","import React, { useState, useEffect } from 'react'\r\nimport useTabVisibility from 'hooks/useTabVisibility'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n  const { tabVisibleRef } = useTabVisibility()\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (tabVisibleRef.current) {\r\n        setFast((prev) => prev + 1)\r\n      }\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [tabVisibleRef])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (tabVisibleRef.current) {\r\n        setSlow((prev) => prev + 1)\r\n      }\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [tabVisibleRef])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  let aprAsDecimal = farmApr / 100\r\n\r\n  if (performanceFee) {\r\n    // Reduce the APR by the % performance fee\r\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\r\n    const aprAfterFee = farmApr - feeRelativeToApr\r\n    aprAsDecimal = aprAfterFee / 100\r\n  }\r\n\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n","import { ethers } from 'ethers'\r\nimport { Campaign } from 'config/constants/types'\r\nimport { getPointCenterIfoContract } from 'utils/contractHelpers'\r\nimport ifosList from 'config/constants/ifo'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement, TranslatableText } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\r\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\r\n\r\ninterface IfoMapResponse {\r\n  thresholdToClaim: string\r\n  campaignId: string\r\n  numberPoints: ethers.BigNumber\r\n}\r\n\r\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'IFO Shopper: %title%',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.title\r\n  }\r\n}\r\n\r\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.description\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */\r\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\r\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\r\n  const ifoCampaignAddresses = ifoCampaigns.map((ifoItem) => ifoItem.address)\r\n  const pointCenterContract = getPointCenterIfoContract()\r\n\r\n  // Returns the claim status of every IFO with a campaign ID\r\n  const claimStatuses = (await pointCenterContract.methods\r\n    .checkClaimStatuses(account, ifoCampaignAddresses)\r\n    .call()) as boolean[]\r\n\r\n  // Get IFO data for all IFO's that are eligible to claim\r\n  const claimableIfoData = (await multicallv2(\r\n    pointCenterIfoABI,\r\n    claimStatuses.reduce((accum, claimStatus, index) => {\r\n      if (claimStatus === true) {\r\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [index] }]\r\n      }\r\n      return accum\r\n    }, []),\r\n  )) as IfoMapResponse[]\r\n\r\n  // Transform response to an Achievement\r\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\r\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\r\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        address,\r\n        id: claimableIfoDataItem.campaignId,\r\n        type: 'ifo',\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: claimableIfoDataItem.numberPoints.toNumber(),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport maxBy from 'lodash/maxBy'\r\nimport merge from 'lodash/merge'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Bet, HistoryFilter, Market, PredictionsState, PredictionStatus, Round } from 'state/types'\r\nimport {\r\n  makeFutureRoundResponse,\r\n  transformRoundResponse,\r\n  getBetHistory,\r\n  transformBetResponse,\r\n  getBet,\r\n  makeRoundData,\r\n} from './helpers'\r\n\r\nconst initialState: PredictionsState = {\r\n  status: PredictionStatus.INITIAL,\r\n  isLoading: false,\r\n  isHistoryPaneOpen: false,\r\n  isChartPaneOpen: false,\r\n  isFetchingHistory: false,\r\n  historyFilter: HistoryFilter.ALL,\r\n  currentEpoch: 0,\r\n  currentRoundStartBlockNumber: 0,\r\n  intervalBlocks: 100,\r\n  bufferBlocks: 2,\r\n  minBetAmount: '1000000000000000',\r\n  lastOraclePrice: BIG_ZERO.toJSON(),\r\n  rounds: {},\r\n  history: {},\r\n  bets: {},\r\n}\r\n\r\n// Thunks\r\nexport const fetchBet = createAsyncThunk<{ account: string; bet: Bet }, { account: string; id: string }>(\r\n  'predictions/fetchBet',\r\n  async ({ account, id }) => {\r\n    const response = await getBet(id)\r\n    const bet = transformBetResponse(response)\r\n    return { account, bet }\r\n  },\r\n)\r\n\r\nexport const fetchRoundBet = createAsyncThunk<\r\n  { account: string; roundId: string; bet: Bet },\r\n  { account: string; roundId: string }\r\n>('predictions/fetchRoundBet', async ({ account, roundId }) => {\r\n  const betResponses = await getBetHistory({\r\n    user: account.toLowerCase(),\r\n    round: roundId,\r\n  })\r\n\r\n  // This should always return 0 or 1 bet because a user can only place\r\n  // one bet per round\r\n  if (betResponses && betResponses.length === 1) {\r\n    const [betResponse] = betResponses\r\n    return { account, roundId, bet: transformBetResponse(betResponse) }\r\n  }\r\n\r\n  return { account, roundId, bet: null }\r\n})\r\n\r\n/**\r\n * Used to poll the user bets of the current round cards\r\n */\r\nexport const fetchCurrentBets = createAsyncThunk<\r\n  { account: string; bets: Bet[] },\r\n  { account: string; roundIds: string[] }\r\n>('predictions/fetchCurrentBets', async ({ account, roundIds }) => {\r\n  const betResponses = await getBetHistory({\r\n    user: account.toLowerCase(),\r\n    round_in: roundIds,\r\n  })\r\n\r\n  return { account, bets: betResponses.map(transformBetResponse) }\r\n})\r\n\r\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\r\n  'predictions/fetchHistory',\r\n  async ({ account, claimed }) => {\r\n    const response = await getBetHistory({\r\n      user: account.toLowerCase(),\r\n      claimed,\r\n    })\r\n    const bets = response.map(transformBetResponse)\r\n\r\n    return { account, bets }\r\n  },\r\n)\r\n\r\nexport const predictionsSlice = createSlice({\r\n  name: 'predictions',\r\n  initialState,\r\n  reducers: {\r\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\r\n      state.status = action.payload\r\n    },\r\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isHistoryPaneOpen = action.payload\r\n      state.historyFilter = HistoryFilter.ALL\r\n    },\r\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isChartPaneOpen = action.payload\r\n    },\r\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\r\n      state.historyFilter = action.payload\r\n    },\r\n    initialize: (state, action: PayloadAction<PredictionsState>) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n    },\r\n    updateMarketData: (state, action: PayloadAction<{ rounds: Round[]; market: Market }>) => {\r\n      const { rounds, market } = action.payload\r\n      const newRoundData = makeRoundData(rounds)\r\n      const incomingCurrentRound = maxBy(rounds, 'epoch')\r\n\r\n      if (state.currentEpoch !== incomingCurrentRound.epoch) {\r\n        // Add new round\r\n        const newestRound = maxBy(rounds, 'epoch') as Round\r\n        const futureRound = transformRoundResponse(\r\n          makeFutureRoundResponse(newestRound.epoch + 2, newestRound.startBlock + state.intervalBlocks),\r\n        )\r\n\r\n        newRoundData[futureRound.id] = futureRound\r\n      }\r\n\r\n      state.currentEpoch = incomingCurrentRound.epoch\r\n      state.currentRoundStartBlockNumber = incomingCurrentRound.startBlock\r\n      state.status = market.paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE\r\n      state.rounds = { ...state.rounds, ...newRoundData }\r\n    },\r\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\r\n      state.currentEpoch = action.payload\r\n    },\r\n    markBetAsCollected: (state, action: PayloadAction<{ account: string; roundId: string }>) => {\r\n      const { account, roundId } = action.payload\r\n      const accountBets = state.bets[account]\r\n\r\n      if (accountBets && accountBets[roundId]) {\r\n        accountBets[roundId].claimed = true\r\n      }\r\n    },\r\n    markPositionAsEntered: (state, action: PayloadAction<{ account: string; roundId: string; bet: Bet }>) => {\r\n      const { account, roundId, bet } = action.payload\r\n\r\n      state.bets = {\r\n        ...state.bets,\r\n        [account]: {\r\n          ...state.bets[account],\r\n          [roundId]: bet,\r\n        },\r\n      }\r\n    },\r\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\r\n      state.lastOraclePrice = action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Get unclaimed bets\r\n    builder.addCase(fetchCurrentBets.fulfilled, (state, action) => {\r\n      const { account, bets } = action.payload\r\n      const betData = bets.reduce((accum, bet) => {\r\n        return {\r\n          ...accum,\r\n          [bet.round.id]: bet,\r\n        }\r\n      }, {})\r\n\r\n      state.bets = merge({}, state.bets, {\r\n        [account]: betData,\r\n      })\r\n    })\r\n\r\n    // Get round bet\r\n    builder.addCase(fetchRoundBet.fulfilled, (state, action) => {\r\n      const { account, roundId, bet } = action.payload\r\n\r\n      if (bet) {\r\n        state.bets = {\r\n          ...state.bets,\r\n          [account]: {\r\n            ...state.bets[account],\r\n            [roundId]: bet,\r\n          },\r\n        }\r\n      }\r\n    })\r\n\r\n    // Update Bet\r\n    builder.addCase(fetchBet.fulfilled, (state, action) => {\r\n      const { account, bet } = action.payload\r\n      state.history[account] = [...state.history[account].filter((currentBet) => currentBet.id !== bet.id), bet]\r\n    })\r\n\r\n    // Show History\r\n    builder.addCase(fetchHistory.pending, (state) => {\r\n      state.isFetchingHistory = true\r\n    })\r\n    builder.addCase(fetchHistory.rejected, (state) => {\r\n      state.isFetchingHistory = false\r\n      state.isHistoryPaneOpen = true\r\n    })\r\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\r\n      const { account, bets } = action.payload\r\n\r\n      state.isFetchingHistory = false\r\n      state.isHistoryPaneOpen = true\r\n      state.history[account] = bets\r\n\r\n      // Save any fetched bets in the \"bets\" namespace\r\n      const betData = bets.reduce((accum, bet) => {\r\n        return {\r\n          ...accum,\r\n          [bet.round.id]: bet,\r\n        }\r\n      }, {})\r\n\r\n      state.bets = merge({}, state.bets, {\r\n        [account]: betData,\r\n      })\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const {\r\n  initialize,\r\n  setChartPaneState,\r\n  setCurrentEpoch,\r\n  setHistoryFilter,\r\n  setHistoryPaneState,\r\n  updateMarketData,\r\n  markBetAsCollected,\r\n  setPredictionStatus,\r\n  markPositionAsEntered,\r\n  setLastOraclePrice,\r\n} = predictionsSlice.actions\r\n\r\nexport default predictionsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\r\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\r\n\r\nexport const getAprData = (pool: Pool, performanceFee: number) => {\r\n  const { isAutoVault, earningTokenPrice, apr } = pool\r\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\r\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\r\n  const roundingDecimals = isHighValueToken ? 4 : 2\r\n\r\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\r\n\r\n  if (isAutoVault) {\r\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\r\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n      numberOfDays: 365,\r\n      farmApr: apr,\r\n      tokenPrice: earningTokenPrice,\r\n      roundingDecimals,\r\n      compoundFrequency,\r\n      performanceFee,\r\n    })\r\n    const autoApr = getRoi({\r\n      amountEarned: tokenEarnedPerThousand365D,\r\n      amountInvested: oneThousandDollarsWorthOfToken,\r\n    })\r\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n  }\r\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n}\r\n\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\r\n}\r\n\r\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\r\n  const { startBlock, endBlock, isFinished } = pool\r\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const BIG_ZERO = new BigNumber(0)\r\nexport const BIG_ONE = new BigNumber(1)\r\nexport const BIG_NINE = new BigNumber(9)\r\nexport const BIG_TEN = new BigNumber(10)\r\n","import { ContextApi } from 'contexts/Localization/types'\r\nimport { PageMeta } from './types'\r\n\r\nexport const DEFAULT_META: PageMeta = {\r\n  title: 'MGG',\r\n  description:\r\n    'Stake MGG and earn token rewards',\r\n  image: 'https://app.metagg.com/MGG.png',\r\n}\r\n\r\nexport const getCustomMeta = (path: string, t: ContextApi['t']): PageMeta => {\r\n  switch (path) {\r\n    case '/farms':\r\n      return {\r\n        title: `${t('Liquidity')} | ${t('MGG')}`,\r\n      }\r\n    case '/pools':\r\n      return {\r\n        title: `${t('Pools')} | ${t('MGG')}`,\r\n      }\r\n    case '/gamefi':\r\n      return {\r\n        title: `${t('GameFi Vaults')} | ${t('MGG')}`,\r\n      }\r\n    case '/launchpad':\r\n      return {\r\n        title: `${t('IGO Launchpad')} | ${t('MGG')}`,\r\n      }\r\n    case '/liquidity':\r\n      return {\r\n        title: `${t('Pools')} | ${t('MGG')} - ${t('Stake MGG and earn LP tokens!')}`,\r\n      }\r\n    case '/lottery':\r\n      return {\r\n        title: `${t('Lottery')} | ${t('MGG')}`,\r\n      }\r\n    case '/collectibles':\r\n      return {\r\n        title: `${t('Collectibles')} | ${t('MGG')}`,\r\n      }\r\n    case '/ifo':\r\n      return {\r\n        title: `${t('Initial Farm Offering')} | ${t('MGG')}`,\r\n      }\r\n    case '/teams':\r\n      return {\r\n        title: `${t('Leaderboard')} | ${t('MGG')}`,\r\n      }\r\n    case '/profile/tasks':\r\n      return {\r\n        title: `${t('Task Center')} | ${t('MGG')}`,\r\n      }\r\n    case '/profile':\r\n      return {\r\n        title: `${t('Your Profile')} | ${t('MGG')}`,\r\n      }\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useLocation } from 'react-router'\r\nimport { DEFAULT_META, getCustomMeta } from 'config/constants/meta'\r\nimport Container from './Container'\r\n\r\nconst StyledPage = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nconst PageMeta = () => {\r\n  const { t } = useTranslation()\r\n  const { pathname } = useLocation()\r\n  // const cakePriceUsd = usePriceCakeBusd()\r\n  // const cakePriceUsdDisplay = cakePriceUsd.gt(0)\r\n  //   ? `$${cakePriceUsd.toNumber().toLocaleString(undefined, {\r\n  //       minimumFractionDigits: 3,\r\n  //       maximumFractionDigits: 3,\r\n  //     })}`\r\n  //   : ''\r\n\r\n  const pageMeta = getCustomMeta(pathname, t) || {}\r\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\r\n  // const pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(' - ') : title\r\n\r\n  return (\r\n    <Helmet>\r\n      <title>{title}</title>\r\n      <meta property='og:title' content={title} />\r\n      <meta property='og:description' content={description} />\r\n      <meta property='og:image' content={image} />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\r\n  return (\r\n    <>\r\n      <PageMeta />\r\n      <StyledPage {...props}>{children}</StyledPage>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Page\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeContext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeContext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 1200px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, EPOCH_PER_YEAR, CAKE_PER_YEAR } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  \r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get the FARM APR value in %\r\n * @param LPTokenPrice LP Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of LP Token in the pool\r\n * @param rewardForDuration Amount of rewards allocated to the farms\r\n * @param duration Duration of the farm in EPOCH\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getFarmV2Apr = (\r\n  LPTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  rewardRate: number\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(rewardRate).times(EPOCH_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(LPTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_YEAR.times(poolWeight)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Spinner}  from '@metagg/mgg-uikit';\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner/>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","// Set of helper functions to facilitate wallet setup\r\n\r\nimport { BASE_BSC_SCAN_URL } from 'config'\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = (window as WindowChain).ethereum\r\n  if (provider) {\r\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n            chainName: 'Binance Smart Chain Testnet',\r\n            nativeCurrency: {\r\n              name: 'BNB',\r\n              symbol: 'bnb',\r\n              decimals: 18,\r\n            },\r\n            rpcUrls: nodes,\r\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error(error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error('Can\\'t setup the BSC network on metamask because window.ethereum is undefined')\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @param tokenImage\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (\r\n  tokenAddress: string,\r\n  tokenSymbol: string,\r\n  tokenDecimals: number,\r\n  tokenImage: string,\r\n) => {\r\n  const tokenAdded = await (window as WindowChain).ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: tokenImage,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n","import { ChainId, JSBI, Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\r\nimport { getAddress } from './addressHelpers'\r\n\r\nconst ARCHIVED_FARMS_START_PID = 139\r\nconst ARCHIVED_FARMS_END_PID = 250\r\n\r\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\r\n\r\nexport const calculateUserRewardRate = (\r\n  {\r\n    lpAddresses,\r\n    totalDeposits,\r\n    quoteToken,\r\n    token,\r\n    rewardRate,\r\n    userData,\r\n    pairToken\r\n  }: any) => {\r\n  const stakingToken = new Token(\r\n    ChainId.MAINNET,\r\n    getAddress(lpAddresses),\r\n    18,\r\n  )\r\n  const rewardsToken = new Token(\r\n    ChainId.MAINNET, getAddress(quoteToken.address), quoteToken.decimals)\r\n  const rewardRateAmount = new TokenAmount(rewardsToken, rewardRate ?? 0)\r\n  const stakedAmount = new TokenAmount(stakingToken, userData.stakedBalance ?? 0)\r\n  const totalSupply = new TokenAmount(stakingToken, totalDeposits ?? 0)\r\n  const token0 = new Token(ChainId.MAINNET, getAddress(token.address), token.decimals)\r\n  const token1 = new Token(ChainId.MAINNET, getAddress(pairToken.address), pairToken.decimals)\r\n\r\n  const dummyPair = new Pair(new TokenAmount(token0, '0'), new TokenAmount(token1, '0'))\r\n\r\n  const totalStakedAmount = new TokenAmount(\r\n    dummyPair.liquidityToken, JSBI.BigInt(totalSupply.raw))\r\n\r\n  return new TokenAmount(\r\n    rewardsToken,\r\n    JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0))\r\n      ? JSBI.divide(JSBI.multiply(rewardRateAmount.raw, stakedAmount.raw), totalStakedAmount.raw)\r\n      : JSBI.BigInt(0),\r\n  )?.multiply(`${60 * 60 * 24 * 7}`)\r\n    ?.toSignificant(4)\r\n}\r\n\r\n// export const calcuLateApy = () => {\r\n//\r\n// }\r\n\r\nexport default isArchivedPid\r\n","import Web3 from 'web3'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport web3NoAccount, { getWeb3NoAccount } from 'utils/web3'\r\nimport { getMulticallContract } from 'utils/contractHelpers'\r\nimport { MAINNET_CHAIN_ID } from '../config'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (example: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\ninterface MulticallOptions {\r\n  web3?: Web3\r\n  blockNumber?: number\r\n  requireSuccess?: boolean\r\n  chainID?: string\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[], options: MulticallOptions = {}, chainID = MAINNET_CHAIN_ID) => {\r\n  // console.log('----')\r\n  // console.log(web3NoAccount)\r\n    const multi = getMulticallContract(options.web3 || getWeb3NoAccount(chainID), chainID)\r\n    const itf = new Interface(abi)\r\n    const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call(undefined, options.blockNumber)\r\n    const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n    return res\r\n}\r\n\r\n/**\r\n * Multicall V2 uses the new \"tryAggregate\" function. It is different in 2 ways\r\n *\r\n * 1. If \"requireSuccess\" is false multicall will not bail out if one of the calls fails\r\n * 2. The return inclues a boolean whether the call was successful e.g. [wasSuccessfull, callResult]\r\n */\r\nexport const multicallv2 = async (abi: any[], calls: Call[], options: MulticallOptions = {}): Promise<any> => {\r\n  const multi = getMulticallContract(options.web3 || web3NoAccount)\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const returnData = await multi.methods\r\n    .tryAggregate(options.requireSuccess === undefined ? true : options.requireSuccess, calldata)\r\n    .call(undefined, options.blockNumber)\r\n  const res = returnData.map((call, i) => {\r\n    const [result, data] = call\r\n    return result ? itf.decodeFunctionResult(calls[i].name, data) : null\r\n  })\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import { TranslatableText } from 'state/types'\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56?: string\r\n  1?: string\r\n  3?: string\r\n}\r\n\r\nexport interface Token {\r\n  symbol: string\r\n  address?: Address\r\n  decimals?: number\r\n  projectLink?: string\r\n  busdPrice?: string\r\n  iconExtension?: string | 'svg'\r\n}\r\n\r\nexport enum PoolIds {\r\n  poolBasic = 'poolBasic',\r\n  poolUnlimited = 'poolUnlimited',\r\n}\r\n\r\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\r\n\r\ninterface IfoPoolInfo {\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  distributionRatio: number // Range [0-1]\r\n}\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  currency: Token\r\n  token: Token\r\n  releaseBlockNumber: number\r\n  articleUrl: string\r\n  campaignId: string\r\n  tokenOfferingPrice: number\r\n  version: number\r\n  [PoolIds.poolBasic]?: IfoPoolInfo\r\n  [PoolIds.poolUnlimited]: IfoPoolInfo\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n  'AUTO' = 'Auto',\r\n}\r\n\r\nexport interface FarmConfig {\r\n  isMain?: boolean\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  stakingAddresses: Address\r\n  token: Token\r\n  pairToken: Token\r\n  quoteToken: Token\r\n  multiplier?: string\r\n  isCommunity?: boolean\r\n  liquidityUrl?: string\r\n  infoURL?: string\r\n  isPromoted?: number\r\n  chain?: string\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  chainId: number\r\n  mainPool?: boolean\r\n  sousId: number\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  isComingSoon?: boolean\r\n  enableEmergencyWithdraw?: boolean\r\n  isAddTokenDisabled?: boolean\r\n  isDepositDisabled?: boolean\r\n  isWithdrawDisabled?: boolean\r\n}\r\n\r\nexport type Images = {\r\n  lg: string\r\n  md: string\r\n  sm: string\r\n  ipfs?: string\r\n}\r\n\r\nexport type NftImages = {\r\n  blur?: string\r\n} & Images\r\n\r\nexport type NftVideo = {\r\n  webm: string\r\n  mp4: string\r\n}\r\n\r\nexport type NftSource = {\r\n  [key in NftType]: {\r\n    address: Address\r\n    identifierKey: string\r\n  }\r\n}\r\n\r\nexport enum NftType {\r\n  PANCAKE = 'pancake',\r\n  MIXIE = 'mixie',\r\n}\r\n\r\nexport type Nft = {\r\n  description: string\r\n  name: string\r\n  images: NftImages\r\n  sortOrder: number\r\n  type: NftType\r\n  video?: NftVideo\r\n\r\n  // Uniquely identifies the nft.\r\n  // Used for matching an NFT from the config with the data from the NFT's tokenURI\r\n  identifier: string\r\n\r\n  // Used to be \"bunnyId\". Used when minting NFT\r\n  variationId?: number | string\r\n}\r\n\r\nexport type TeamImages = {\r\n  alt: string\r\n} & Images\r\n\r\nexport type Team = {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  isJoinable?: boolean\r\n  users: number\r\n  points: number\r\n  images: TeamImages\r\n  background: string\r\n  textColor: string\r\n}\r\n\r\nexport type CampaignType = 'ifo' | 'teambattle'\r\n\r\nexport type Campaign = {\r\n  id: string\r\n  type: CampaignType\r\n  title?: TranslatableText\r\n  description?: TranslatableText\r\n  badge?: string\r\n}\r\n\r\nexport type PageMeta = {\r\n  title: string\r\n  description?: string\r\n  image?: string\r\n}\r\n","import Web3 from 'web3'\r\nimport { AbiItem } from 'web3-utils'\r\nimport web3NoAccount from 'utils/web3'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\n\r\n// Addresses\r\nimport {\r\n  getAddress,\r\n  getPancakeProfileAddress,\r\n  getPancakeRabbitsAddress,\r\n  getBunnyFactoryAddress,\r\n  getBunnySpecialAddress,\r\n  getCakeAddress,\r\n  getLotteryAddress,\r\n  getLotteryTicketAddress,\r\n  getLotteryV2Address,\r\n  getMasterChefAddress,\r\n  getPointCenterIfoAddress,\r\n  getClaimRefundAddress,\r\n  getTradingCompetitionAddress,\r\n  getEasterNftAddress,\r\n  getCakeVaultAddress,\r\n  getPredictionsAddress,\r\n  getChainlinkOracleAddress,\r\n  getMulticallAddress,\r\n} from 'utils/addressHelpers'\r\n\r\n// ABI\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport bunnyFactoryAbi from 'config/abi/bunnyFactory.json'\r\nimport bunnySpecialAbi from 'config/abi/bunnySpecial.json'\r\nimport bep20Abi from 'config/abi/erc20.json'\r\nimport erc721Abi from 'config/abi/erc721.json'\r\nimport lpStakingAbi from 'config/abi/lpStaking.json'\r\nimport lpTokenAbi from 'config/abi/lpToken.json'\r\nimport cakeAbi from 'config/abi/cake.json'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefV2 from 'config/abi/sousChefV2.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport claimRefundAbi from 'config/abi/claimRefund.json'\r\nimport tradingCompetitionAbi from 'config/abi/tradingCompetition.json'\r\nimport easterNftAbi from 'config/abi/easterNft.json'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { DEFAULT_GAS_PRICE, MAINNET_CHAIN_ID, TESTNET_CHAIN_ID } from 'config'\r\nimport { getSettings, getGasPriceInWei } from './settings'\r\n\r\nexport const getDefaultGasPrice = () => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  if (chainId === TESTNET_CHAIN_ID) {\r\n    return 10\r\n  }\r\n  return DEFAULT_GAS_PRICE\r\n}\r\n\r\nconst getContract = (abi: any, address: string, web3?: Web3, account?: string) => {\r\n  const _web3 = web3 ?? web3NoAccount\r\n  // const gasPrice = account ? getSettings(account).gasPrice : getDefaultGasPrice()\r\n\r\n  return new _web3.eth.Contract(abi as unknown as AbiItem, address)\r\n}\r\n\r\nexport const getBep20Contract = (address: string, web3?: Web3) => {\r\n  return getContract(bep20Abi, address, web3)\r\n}\r\nexport const getErc721Contract = (address: string, web3?: Web3) => {\r\n  return getContract(erc721Abi, address, web3)\r\n}\r\nexport const getLpStakingContract = (address: string, web3?: Web3) => {\r\n  return getContract(lpStakingAbi, address, web3)\r\n}\r\nexport const getLpContract = (address: string, web3?: Web3) => {\r\n  return getContract(lpTokenAbi, address, web3)\r\n}\r\nexport const getIfoV1Contract = (address: string, web3?: Web3) => {\r\n  return getContract(ifoV1Abi, address, web3)\r\n}\r\nexport const getIfoV2Contract = (address: string, web3?: Web3) => {\r\n  return getContract(ifoV2Abi, address, web3)\r\n}\r\nexport const getSouschefContract = (id: number, web3?: Web3) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  return getContract(abi, getAddress(config.contractAddress), web3)\r\n}\r\nexport const getSouschefV2Contract = (id: number, web3?: Web3) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  return getContract(sousChefV2, getAddress(config.contractAddress), web3)\r\n}\r\nexport const getPointCenterIfoContract = (web3?: Web3) => {\r\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), web3)\r\n}\r\nexport const getCakeContract = (web3?: Web3) => {\r\n  return getContract(cakeAbi, getCakeAddress(), web3)\r\n}\r\nexport const getProfileContract = (web3?: Web3) => {\r\n  return getContract(profileABI, getPancakeProfileAddress(), web3)\r\n}\r\nexport const getPancakeRabbitContract = (web3?: Web3) => {\r\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), web3)\r\n}\r\nexport const getBunnyFactoryContract = (web3?: Web3) => {\r\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), web3)\r\n}\r\nexport const getBunnySpecialContract = (web3?: Web3) => {\r\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), web3)\r\n}\r\nexport const getLotteryContract = (web3?: Web3) => {\r\n  return getContract(lotteryAbi, getLotteryAddress(), web3)\r\n}\r\nexport const getLotteryTicketContract = (web3?: Web3) => {\r\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3)\r\n}\r\nexport const getLotteryV2Contract = (web3?: Web3) => {\r\n  return getContract(lotteryV2Abi, getLotteryV2Address(), web3)\r\n}\r\nexport const getMasterchefContract = (web3?: Web3) => {\r\n  return getContract(masterChef, getMasterChefAddress(), web3)\r\n}\r\nexport const getClaimRefundContract = (web3?: Web3) => {\r\n  return getContract(claimRefundAbi, getClaimRefundAddress(), web3)\r\n}\r\nexport const getTradingCompetitionContract = (web3?: Web3) => {\r\n  return getContract(tradingCompetitionAbi, getTradingCompetitionAddress(), web3)\r\n}\r\nexport const getEasterNftContract = (web3?: Web3) => {\r\n  return getContract(easterNftAbi, getEasterNftAddress(), web3)\r\n}\r\nexport const getCakeVaultContract = (web3?: Web3) => {\r\n  return getContract(cakeVaultAbi, getCakeVaultAddress(), web3)\r\n}\r\nexport const getPredictionsContract = (web3?: Web3) => {\r\n  return getContract(predictionsAbi, getPredictionsAddress(), web3)\r\n}\r\nexport const getChainlinkOracleContract = (web3?: Web3) => {\r\n  return getContract(chainlinkOracleAbi, getChainlinkOracleAddress(), web3)\r\n}\r\nexport const getMulticallContract = (web3?: Web3, chainID = MAINNET_CHAIN_ID) => {\r\n  return getContract(MultiCallAbi, getMulticallAddress(chainID), web3)\r\n}\r\n"],"sourceRoot":""}