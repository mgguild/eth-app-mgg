{"version":3,"sources":["components/Balance.tsx","hooks/usePersistState.ts","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","setValue","setItem","stringify","usePoolPrice","stakingTokenAddress","rewardTokenAddress","MoralisWeb3Api","useMoralisWeb3Api","chainId","useWeb3React","chainName","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","console","a","token","getTokenPrice","chain","address","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","_token1Price","_token2Price","account","getTokenBalances","token_addresses","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","BigNumber","balance","_totalToken2InPool","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","getAddress","symbol","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","sousId","isUsingBnb","dispatch","useAppDispatch","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","onUnstake","exit","useSousUnstake","enableEmergencyWithdraw","handleUnstake","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","useToast","toastError","toastSuccess","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","fullWidth","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","gt","ClaimModal","DepositModal","addTokenUrl","maxStake","requestedApproval","setRequestedApproval","setActiveSelect","userData","allowance","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","lpContract","useERC20","RewardTokenBalance","useTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","onApprove","useApprove","handleApprove","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","UnlockButton","HarvestAction","tokenRewardSymbol","rewardTokenPrice","earningsBigNumber","cakePrice","BIG_ZERO","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_EXCHANGE_URL","Number","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","getEthScanAddressUrl","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","tokenAddress","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","times","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","getBscScanAddressUrl","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","usePriceCakeBusd","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","mggFarm","isMain","farmV2Apr","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/10.880e2b6d.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\nimport { useWeb3React } from '@web3-react/core'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\n  switch (chainId){\n    case 1:\n      chainName = \"eth\"\n      break\n    case 3:\n      chainName = \"ropsten\"\n      break\n    case 56:\n      chainName = \"bsc\"\n      break\n    case 97:\n      chainName = \"bsc testnet\"\n      break\n    default:\n      chainName = \"eth\"\n      break\n  }\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try{\n    if (tokenAddress === undefined) throw new Error(\"Token address undefined\");\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  }\n  catch{\n      console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n      const fetchData = async () => {\n      try {\n          const result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _tokenAddress})\n          const _tokenPrice = result.usdPrice\n          \n          setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return {tokenPrice}\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n\n    let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\n    switch (chainId){\n      case 1:\n        chainName = \"eth\"\n        break\n      case 3:\n        chainName = \"ropsten\"\n        break\n      case 56:\n        chainName = \"bsc\"\n        break\n      case 97:\n        chainName = \"bsc testnet\"\n        break\n      default:\n        chainName = \"eth\"\n        break\n    }\n\n    const [stakingPrice, setStakingPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _stakingTokenAddress\n    let _rewardTokenAddress\n    try{\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            let result\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _stakingTokenAddress})\n            const _stakingTokenPrice = result.usdPrice\n\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n            const _rewardTokenPrice = result.usdPrice\n            \n            setStakingPrice(_stakingTokenPrice)\n            setRewardPrice(_rewardTokenPrice)\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName])\n\n    return {stakingPrice, rewardPrice}\n}\n\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, lpAddress: string) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n\n    let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\n    switch (chainId){\n      case 1:\n        chainName = \"eth\"\n        break\n      case 3:\n        chainName = \"ropsten\"\n        break\n      case 56:\n        chainName = \"bsc\"\n        break\n      case 97:\n        chainName = \"bsc testnet\"\n        break\n      default:\n        chainName = \"eth\"\n        break\n    }\n    \n    // const options = { chain: chainName, address: _tokenAddress };\n    // const result = await MoralisWeb3Api.token.getTokenPrice(options)\n\n    const [LPPrice, setLPPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try{\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n        _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n\n            let _totalToken1InPool\n            let _totalToken2InPool\n\n            let result\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n            const _token1Price = result.usdPrice\n\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n            const _token2Price = result.usdPrice\n            \n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n            const _rewardTokenPrice = result.usdPrice\n\n            result = await MoralisWeb3Api.account.getTokenBalances({chain: chainName, address: _lpAddress, token_addresses: [_token1Address,_token2Address]})\n            if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()){\n                _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), result[0].decimals)\n            }\n            else{\n                _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), result[0].decimals)\n            }\n\n            if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()){\n                _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), result[1].decimals)\n            }\n            else{\n                _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), result[1].decimals)\n            }\n\n            setLPPrice( ((_totalToken1InPool * _token1Price ) + (_totalToken2InPool * _token2Price )) / lpTotalSupply )\n            setRewardPrice(_rewardTokenPrice)\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _lpAddress, chainName, MoralisWeb3Api])\n\n    return {LPPrice, rewardPrice}\n}\n\nexport default usePoolPrice","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  align-items: center;\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n    // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n                                                 max,\n                                                 // symbol,\n                                                 onChange,\n                                                 onSelectMax,\n                                                 value,\n                                                 // addLiquidityUrl,\n                                                 // inputTitle,\n                                                 decimals = 18,\n                                               }) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems='flex-end' justifyContent='space-around'>\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode='decimal'\n            step='any'\n            min='0'\n            onChange={onChange}\n            placeholder='0'\n            value={value}\n          />\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n\n\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?:string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color='inherit' />\n    </Box>\n  );\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any,\n  staked?: any,\n  earnings?: any,\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\n  {\n    farm,\n    staked,\n    earnings,\n    onConfirm,\n    onDismiss,\n    max, tokenName = '',\n  }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title='' onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\n      </Flex>\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\n        <Button\n          disabled={pendingTx}\n          fullWidth onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onConfirm(val)\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n            onDismiss()\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n        }}>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\n\nconst Container = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n    height: auto;\n`\n\nconst DetailsCont = styled.div`\n    width: 30%;\n    height: auto;\n    overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n    margin: 15px 0px;\n    padding: 10px;\n`\nconst ModalFooter = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container;\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \n\nconst Container = styled.div`\n    margin-top: -30px;\n    display: flex;\n    flex-direction: column;\n    min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n    padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n    flex: 1;\n    margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n    flex: 1;\n    margin-left: 10px;\n`\n\nexport {StyledFlex, CancelButton, DepositButton}\nexport default Container;\n\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\n\ninterface StakeModalInterface {\n  pid: number,\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(\n        `${t('Staked')}!`,\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\n      )\n      onDismiss()\n    } catch (e) {\n      toastError(\n        t('Error'),\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{ symbol } balance: </Text>\n        <Text>{ fullBalance }</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton\n          onClick={onDismiss}\n        >\n         Close\n        </CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n        Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\n  \n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = (\n  {\n    max,\n    onConfirm,\n    onDismiss,\n    tokenName = '',\n    addLiquidityUrl,\n    addTokenUrl,\n    handleUnstake,\n    farm,\n    maxStake,\n  }) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  } = farm.userData || {}\n  const userRate = calculateUserRewardRate(farm)\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')} />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ?\n              <Button fullWidth onClick={onPresentStake}>\n                Stake {tokenName}\n              </Button>\n              :\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            }\n\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {userRate}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?:string,\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\n        fullWidth\n      >\n        {userDataReady?\n          buttonTxt\n          : <Loading /> }\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = (\n  {\n    userDataReady,\n    farm,\n    account,\n    addLiquidityUrl,\n    addTokenUrl,\n  }) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return (\n    <Action>\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\n\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string,\n  tokenRewardSymbol?: string,\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n  rewardTokenPrice?: number\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\n  {\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady, rewardTokenPrice\n  }) => {\n    const earningsBigNumber = new BigNumber(userData.earnings)\n    const cakePrice = rewardTokenPrice\n    let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext);\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\n          )}\n        </div>\n        <Button\n          style={{borderRadius: '3px', height: '40px'}}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml='4px'\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl, getEthScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const stakingAddress = getAddress(farm.stakingAddresses);\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_EXCHANGE_URL}/#/swap/${farm.token.address[farm.chain]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[farm.chain], farm.pairToken.address[farm.chain], farm.quoteToken.address[farm.chain], farm.lpAddresses[farm.chain])\n\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\n  const apr = (aprBlackList.includes(farm.lpAddresses[farm.chain]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{margin: '24px'}}>\n      <Flex>\n        <HarvestAction stakingContract={getAddress(farm.stakingAddresses)}\n                       tokenRewardSymbol={earnLabel} userDataReady={userDataReady} userData={farm.userData}\n                       pid={farm.pid} rewardTokenPrice={rewardPrice} />\n      </Flex>\n      {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n      <Flex justifyContent='space-between'>\n        <Text>{t('Rate')}</Text>\n        <Text color='textSubtle'>\n          {formatTotalRewardRate ?? <Skeleton width={60} display='inline-block' />} {earnLabel} / week</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text>{t('Duration')}</Text>\n        <Text color='textSubtle'>{farm.remainingDays ??  <Skeleton width={60} display='inline-block' />} Days</Text>\n      </Flex>\n      <CardActionsContainer userDataReady={userDataReady} farm={farm} account={account}\n                            addLiquidityUrl={addLiquidityUrl} addTokenUrl={AddTokenUrl} />\n\n      <DetailsSection\n        removed={removed}\n        stakingAddress={getEthScanAddressUrl(stakingAddress)}\n        lpInfoAddress={`${farm.infoURL?? BASE_INFO_URL}/${getAddress(farm.token.address)}`}\n        lpLabel={lpLabel}\n      />\n\n      {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const mainTokenAddress = quoteTokenAddress;\n  const pairTokenAddress = tokenAddress\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { Contract } from 'web3-eth-contract'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  token,\n  pairToken,\n  userDataReady,\n  stakingAddresses,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: token.address,\n    pairTokenAddress: pairToken.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string, contract: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const lpStakingAddress = getAddress(stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const dispatch = useAppDispatch()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.boxShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n            || latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken, totalRewardRate } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div style={{marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                        removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                        removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                        removed />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const renderInactiveContent = (): JSX.Element => {\n\n    return (\n      <div>\n        <div style={{ margin: '20px' }}>\n          <Text fontSize='24px' bold> Inactive Liquidity Pools </Text>\n        </div>\n\n        <FlexLayout>\n          {farmsList(inactiveFarms).map((farm) => (\n            <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                      removed />\n          ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const mggFarm = farmsStakedMemoized.filter(farm => farm.isMain)[0];\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(mggFarm.lpTotalSupply), mggFarm.token.address[mggFarm.chain], mggFarm.pairToken.address[mggFarm.chain], mggFarm.quoteToken.address[mggFarm.chain], mggFarm.lpAddresses[mggFarm.chain])\n  const farmV2Apr = getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate))\n  const apr = farmV2Apr > 0 ? farmV2Apr.toFixed(4) : \"-\"\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)\n  const tvr = (new BigNumber(totalStaked).times(LPPrice)).toFixed(4)\n\n  return (\n    <>\n      <PageHeader>\n        <Flex alignItems='center' justifyContent='space-around' flexDirection={['column', null, 'row']}\n              style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n              padding='24px'>\n\n        <Flex flexDirection='column' flex=\"2\">\n          <Flex justifyContent='space-around' flexDirection='column' padding=\"25px 25px 25px 0px\" mr={['8px', 0]} style={{borderBottom: `1px solid ${theme.colors.MGG_active}`}}>\n            <Text color={theme.colors.primary} fontSize='60px' bold>\n              Liquidity Staking\n            </Text>\n            <Text color='text' bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n              Earn MGG and other tokens by staking!\n            </Text>\n          </Flex>\n          <InfoBox style={{width: '100%'}} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n           <Flex flexDirection=\"column\">\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Tokens Staked</Text>\n             <Text fontSize='20px'> {totalStaked} {mggFarm.lpSymbol}</Text>\n           </Flex>\n           <Flex flexDirection=\"column\">\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Value Locked</Text>\n             <Text fontSize='20px'>{Number(tvr) > 0 ? tvr : \"-\"} USD</Text>\n           </Flex>\n           <Flex flexDirection=\"column\">\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>APR</Text>\n             <Text fontSize='20px'>{apr} % </Text>\n           </Flex>\n        </InfoBox>\n        </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        { /* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}