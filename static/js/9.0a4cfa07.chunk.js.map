{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","components/Balance.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","utils/callHelpers.ts","hooks/useApprove.ts","hooks/usePersistState.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","hooks/price.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/refHelpers.ts","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useERC721","getErc721Contract","useCake","getCakeContract","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","getEthScanAddressUrl","BASE_ETH_SCAN_URL","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","Balance","value","color","decimals","isDisabled","unit","prefix","previousValue","start","end","duration","separator","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","ref","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","fastRefresh","useRefresh","a","contract","methods","allowance","call","res","BigNumber","console","error","prev","fetchBalance","useGetBnbBalance","setBalance","eth","getBalance","walletBalance","refresh","useTokenBalance","balanceOf","approve","lpContract","masterChefContract","options","ethers","constants","MaxUint256","send","from","approveWithAmount","amount","stake","pid","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","enterStaking","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","useApprove","contractAddress","onApprove","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","info","useExit","stakingContract","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","useSousHarvest","handleHarvest","networkFinder","networkId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","chainId","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","Number","_totalToken2InPool","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","usePrevious","React","FlexLayout","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","HarvestAction","tokenRewardSymbol","rewardTokenPrice","earningsBigNumber","cakePrice","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_EXCHANGE_URL","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","usePriceCakeBusd","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","farmV2Apr","type","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/9.0a4cfa07.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { BASE_BSC_SCAN_URL, BASE_ETH_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n\n// Etherscan\n\nexport const getEthScanAddressUrl = (address: string) => {\n  return `${BASE_ETH_SCAN_URL}/address/${address}`\n}\n\nexport const getEthScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_ETH_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getEthScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_ETH_SCAN_URL}/block/${block}`\n}\n\nexport const getEthScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_ETH_SCAN_URL}/block/countdown/${block}`\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {t('Connect Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, amount)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\n// const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n// const cakeBnbPid = 251\n// const cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n\n/**\n * Returns the total CAKE staked in the CAKE-BNB LP\n */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  align-items: center;\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralis, useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\n\nconst networkFinder = (networkId: number) => {\n  switch (networkId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'eth'\n  }\n}\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  switch (chainId) {\n    case 1:\n      chainName = 'eth'\n      break\n    case 3:\n      chainName = 'ropsten'\n      break\n    case 56:\n      chainName = 'bsc'\n      break\n    case 97:\n      chainName = 'bsc testnet'\n      break\n    default:\n      chainName = 'eth'\n      break\n  }\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = networkFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData){\n      fetchData()\n    }\n    \n  }, [setStakingPrice, setRewardPrice, _stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName, isFetchData])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (\n  lpTotalSupply: number,\n  token1Address: string,\n  token2Address: string,\n  rewardTokenAddress: string,\n  lpAddress: string,\n  isFetchData?: boolean,\n) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  const chainName = networkFinder(chainId)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n  let _token1Address\n  let _token2Address\n  let _rewardTokenAddress\n  let _lpAddress\n  try {\n    _token1Address = web3.utils.toChecksumAddress(token1Address)\n    _token2Address = web3.utils.toChecksumAddress(token2Address)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance),  Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance),  Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n   \n   \n  }, [\n    isFetchData,\n    setLPPrice,\n    setRewardPrice,\n    lpTotalSupply,\n    _token1Address,\n    _token2Address,\n    _rewardTokenAddress,\n    _lpAddress,\n    chainName,\n    MoralisWeb3Api,\n  ])\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","\nimport React, {useRef, useEffect} from 'react';\n\nfunction usePrevious(value) {\n    const ref = React.useRef();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); \n    return ref.current;\n}\n\nexport default usePrevious;","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal> }\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n    // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n                                                 max,\n                                                 // symbol,\n                                                 onChange,\n                                                 onSelectMax,\n                                                 value,\n                                                 // addLiquidityUrl,\n                                                 // inputTitle,\n                                                 decimals = 18,\n                                               }) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems='flex-end' justifyContent='space-around'>\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode='decimal'\n            step='any'\n            min='0'\n            onChange={onChange}\n            placeholder='0'\n            value={value}\n          />\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n\n\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?:string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color='inherit' />\n    </Box>\n  );\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any,\n  staked?: any,\n  earnings?: any,\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\n  {\n    farm,\n    staked,\n    earnings,\n    onConfirm,\n    onDismiss,\n    max, tokenName = '',\n  }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title='' onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\n      </Flex>\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\n        <Button\n          disabled={pendingTx}\n          fullWidth onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onConfirm(val)\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n            onDismiss()\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n        }}>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\n\nconst Container = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n    height: auto;\n`\n\nconst DetailsCont = styled.div`\n    width: 30%;\n    height: auto;\n    overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n    margin: 15px 0px;\n    padding: 10px;\n`\nconst ModalFooter = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container;\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \n\nconst Container = styled.div`\n    margin-top: -30px;\n    display: flex;\n    flex-direction: column;\n    min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n    padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n    flex: 1;\n    margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n    flex: 1;\n    margin-left: 10px;\n`\n\nexport {StyledFlex, CancelButton, DepositButton}\nexport default Container;\n\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\n\ninterface StakeModalInterface {\n  pid: number,\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(\n        `${t('Staked')}!`,\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\n      )\n      onDismiss()\n    } catch (e) {\n      toastError(\n        t('Error'),\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{ symbol } balance: </Text>\n        <Text>{ fullBalance }</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton\n          onClick={onDismiss}\n        >\n         Close\n        </CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n        Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\n  \n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = (\n  {\n    max,\n    onConfirm,\n    onDismiss,\n    tokenName = '',\n    addLiquidityUrl,\n    addTokenUrl,\n    handleUnstake,\n    farm,\n    maxStake,\n  }) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  } = farm.userData || {}\n  const userRate = calculateUserRewardRate(farm)\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')} />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ?\n              <Button fullWidth onClick={onPresentStake}>\n                Stake {tokenName}\n              </Button>\n              :\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            }\n\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {userRate}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?:string,\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\n        fullWidth\n      >\n        {userDataReady?\n          buttonTxt\n          : <Loading /> }\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = (\n  {\n    userDataReady,\n    farm,\n    account,\n    addLiquidityUrl,\n    addTokenUrl,\n  }) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return (\n    <Action>\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\n\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string,\n  tokenRewardSymbol?: string,\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n  rewardTokenPrice?: number\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\n  {\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady, rewardTokenPrice\n  }) => {\n    const earningsBigNumber = new BigNumber(userData.earnings)\n    const cakePrice = rewardTokenPrice\n    let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext);\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\n          )}\n        </div>\n        <Button\n          style={{borderRadius: '3px', height: '40px'}}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml='4px'\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl, getEthScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const stakingAddress = getAddress(farm.stakingAddresses);\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_EXCHANGE_URL}/#/swap/${farm.token.address[farm.chain]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[farm.chain], farm.pairToken.address[farm.chain], farm.quoteToken.address[farm.chain], farm.lpAddresses[farm.chain])\n\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\n  const apr = (aprBlackList.includes(farm.lpAddresses[farm.chain]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{margin: '24px'}}>\n      <Flex>\n        <HarvestAction stakingContract={getAddress(farm.stakingAddresses)}\n                       tokenRewardSymbol={earnLabel} userDataReady={userDataReady} userData={farm.userData}\n                       pid={farm.pid} rewardTokenPrice={rewardPrice} />\n      </Flex>\n      {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n      <Flex justifyContent='space-between'>\n        <Text>{t('Rate')}</Text>\n        <Text color='textSubtle'>\n          {formatTotalRewardRate ?? <Skeleton width={60} display='inline-block' />} {earnLabel} / week</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text>{t('Duration')}</Text>\n        <Text color='textSubtle'>{farm.remainingDays ??  <Skeleton width={60} display='inline-block' />} Days</Text>\n      </Flex>\n      <CardActionsContainer userDataReady={userDataReady} farm={farm} account={account}\n                            addLiquidityUrl={addLiquidityUrl} addTokenUrl={AddTokenUrl} />\n\n      <DetailsSection\n        removed={removed}\n        stakingAddress={getEthScanAddressUrl(stakingAddress)}\n        lpInfoAddress={`${farm.infoURL?? BASE_INFO_URL}/${getAddress(farm.token.address)}`}\n        lpLabel={lpLabel}\n      />\n\n      {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const mainTokenAddress = quoteTokenAddress;\n  const pairTokenAddress = tokenAddress\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { Contract } from 'web3-eth-contract'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  token,\n  pairToken,\n  userDataReady,\n  stakingAddresses,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: token.address,\n    pairTokenAddress: pairToken.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string, contract: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const lpStakingAddress = getAddress(stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const dispatch = useAppDispatch()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.boxShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport usePrevious from 'hooks/refHelpers'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport ReactLoading from 'react-loading'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken, totalRewardRate } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const renderInactiveContent = (): JSX.Element => {\n    return (\n      <div>\n        <div style={{ margin: '20px' }}>\n          <Text fontSize=\"24px\" bold>\n            {' '}\n            Inactive Liquidity Pools{' '}\n          </Text>\n        </div>\n\n        <FlexLayout>\n          {farmsList(inactiveFarms).map((farm) => (\n            <FarmCard\n              userDataReady={userDataReady}\n              key={farm.pid}\n              farm={farm}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const [ isFetchData, setFetchData] = useState<boolean | null>(true); \n  \n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\n  \n  const { LPPrice, rewardPrice } = useFarmPrice(\n    Number(mggFarm.lpTotalSupply),\n    mggFarm.token.address[mggFarm.chain],\n    mggFarm.pairToken.address[mggFarm.chain],\n    mggFarm.quoteToken.address[mggFarm.chain],\n    mggFarm.lpAddresses[mggFarm.chain],\n    isFetchData, \n  )\n  \n  const prevLPPrice = usePrevious(LPPrice);\n  const prevRewardPrice = usePrevious(rewardPrice);\n  // console.log(`this is cur: ${LPPrice}`)\n  // console.log(`this is prev: ${prevLPPrice}`)\n  useEffect(() => {\n    if ((LPPrice > 0) || (rewardPrice > 0)) {\n      setFetchData(false);\n    }   \n    setTimeout(() => {\n      setFetchData(true);\n      if ((LPPrice !== prevLPPrice) || (rewardPrice !== prevRewardPrice)) {\n        setFetchData(true);\n      } else {\n        setFetchData(false);\n      }\n    }, 60000);\n    if ((prevLPPrice === LPPrice) || (prevRewardPrice === rewardPrice)) {\n      setFetchData(false);\n    }\n    \n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n\n  const farmV2Apr = useMemo(\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate)),\n    [LPPrice, rewardPrice, mggFarm.totalDeposits, mggFarm.rewardRate],\n  )\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} ` : <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\"/>\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)\n  // const tvr = useMemo(() => (new BigNumber(totalStaked).times(LPPrice)).toFixed(4), [totalStaked, LPPrice])\n  const tvr = useMemo(\n    () => new BigNumber(mggFarm.lpTotalSupply).times(LPPrice).toFixed(4),\n    [mggFarm.lpTotalSupply, LPPrice],\n  )\n    \n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Liquidity Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG with your LP tokens!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Tokens Staked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {' '}\n                  {totalStaked} {mggFarm.lpSymbol}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">{Number(tvr) > 0 ? `${tvr} USD` : <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\" /> }</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\">{apr}</Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}