{"version":3,"sources":["components/Balance.tsx","hooks/usePersistState.ts","utils/getTimePeriods.ts","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/index.ts","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","setValue","setItem","stringify","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","usePoolPrice","stakingTokenAddress","rewardTokenAddress","MoralisWeb3Api","useMoralisWeb3Api","chainId","useWeb3React","chainName","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","console","a","token","getTokenPrice","chain","address","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","_token1Price","_token2Price","account","getTokenBalances","token_addresses","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","BigNumber","balance","_totalToken2InPool","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","getAddress","symbol","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","sousId","isUsingBnb","dispatch","useAppDispatch","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","onUnstake","exit","useSousUnstake","enableEmergencyWithdraw","handleUnstake","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getBscScanLink","data","type","ChainId","MAINNET","BASE_BSC_SCAN_URLS","getEthScanLink","BASE_ETH_SCAN_URLS","ViewMode","StyledCard","keyframes","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","cake","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useContext","ThemeContext","flexDirection","height","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","useTheme","as","external","BASE_EXCHANGE_URL","ModalBody","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","userData","stakingLimit","stakingTokenContract","useERC20","useToast","toastSuccess","toastError","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","fullDecimalStakeAmount","plus","gte","handleConfirmClick","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","handleStakeInputChange","currentTarget","addLiquidityUrl","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","className","window","open","BASE_SWAP_URL","isDepositDisabled","border","borderTop","onMouseEnter","onMouseLeave","eq","target","isWithdrawDisabled","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","startBlock","endBlock","accountHasStakedBalance","toString","rewardPerBlock","currentBlock","useSelector","state","block","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","rate","getPoolApr","UnlockButton","getBscScanAddressUrl","getEthScanAddressUrl","AprRow","tooltipContent","getAprData","earningsPercentageToDisplay","apyModalLink","process","onPresentApyModal","ref","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","withdrawalFee","feeAsDecimal","parseInt","noFeeToPay","shouldShowTimer","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","accountHasVaultShares","useMemo","cakePool","map","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","mggPool","path","url","isExact","mainPool","minHeight","padding","flex","borderBottom","Page"],"mappings":"4LAqCeA,IAxByB,SAAC,GASlC,IARLC,EAQI,EARJA,MAQI,IAPJC,aAOI,MAPI,OAOJ,MANJC,gBAMI,MANO,EAMP,MALJC,kBAKI,SAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,QACGC,EACC,mFACEC,EAAgBC,iBAAO,GAK7B,OAHAC,qBAAU,WACRF,EAAcG,QAAUX,IACvB,CAACA,IAEF,eAAC,KAAD,yBAAMC,MAAOE,EAAa,eAAiBF,EAAOK,QAASA,GAAaC,GAAxE,cACGF,GAAU,+BAAOA,IAClB,cAAC,IAAD,CAASO,MAAOJ,EAAcG,QAASE,IAAKb,EAAOE,SAAUA,EAAUY,SAAU,EAAGC,UAAU,MAC7FX,GAAQ,+BAAOA,U,+ECvBhBY,EAAiB,CACrBC,QAASC,IACTC,UAAWD,KAyBEE,IAnBS,SAACC,EAAmBC,GAAyC,IAAD,6BAC7BN,GAAmBM,GAAhEC,EAD0E,EAC1EA,gBAAiBN,EADyD,EACzDA,QAASE,EADgD,EAChDA,UADgD,EAExDK,oBAAS,WACjC,IACE,IAAMC,EAAcC,aAAaC,QAAQJ,GAEzC,OAAOE,EAAcR,EAAQW,KAAKC,MAAMJ,IAAgBJ,EACxD,MAAOS,GACP,OAAOT,MARuE,mBAE3ErB,EAF2E,KAEpE+B,EAFoE,KAgBlF,OAJArB,qBAAU,WACRgB,aAAaM,QAAQT,EAAiBK,KAAKK,UAAUd,EAAUnB,OAC9D,CAACA,EAAOuB,EAAiBJ,IAErB,CAACnB,EAAO+B,K,kCCjCjB,IACMG,EAAkB,KAClBC,EAAiB,MACjBC,EAAmB,QACnBC,EAAkB,SAgDTC,IAzCQ,SAACC,GACtB,IAAIC,EAAQC,KAAKC,IAAIH,GACfI,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTT,QAAS,GA8BX,OA3BIC,GAASH,IACXM,EAASC,MAAQH,KAAKQ,MAAMT,EAAQH,GACpCG,GAASG,EAASC,MAAQP,GAGxBG,GAASJ,IACXO,EAASE,OAASJ,KAAKQ,MAAMT,EAAQJ,GACrCI,GAASG,EAASE,OAAST,GAGzBI,GAASL,IACXQ,EAASG,KAAOL,KAAKQ,MAAMT,EAAQL,GACnCK,GAASG,EAASG,KAAOX,GAGvBK,GAASN,IACXS,EAASI,MAAQN,KAAKQ,MAAMT,EAAQN,GACpCM,GAASG,EAASI,MAAQb,GAGxBM,GA1CoB,KA2CtBG,EAASK,QAAUP,KAAKQ,MAAMT,EA3CR,IA4CtBA,GA5CsB,GA4CbG,EAASK,SAGpBL,EAASJ,QAAUC,EAEZG,I,+LCYIO,EAAe,SAACC,EAA6BC,GACtD,IAAMC,EAAiBC,cACfC,EAAYC,cAAZD,QAEJE,EAAuD,MAC3D,OAAQF,GACN,KAAK,EACHE,EAAY,MACZ,MACF,KAAK,EACHA,EAAY,UACZ,MACF,KAAK,GACHA,EAAY,MACZ,MACF,KAAK,GACHA,EAAY,cACZ,MACF,QACEA,EAAY,MAnBqE,IA2BjFC,EACAC,EA5BiF,EAuB7CnC,mBAAS,GAvBoC,mBAuB9EoC,EAvB8E,KAuBhEC,EAvBgE,OAwB/CrC,mBAAS,GAxBsC,mBAwB9EsC,EAxB8E,KAwBjEC,EAxBiE,KA0B/EC,EAAOC,cAGb,IACIP,EAAuBM,EAAKE,MAAMC,kBAAkBhB,GACpDQ,EAAsBK,EAAKE,MAAMC,kBAAkBf,GAEvD,SACIgB,QAAQtC,MAAM,sCAuBlB,OApBApB,qBAAU,YACS,uCAAG,gCAAA2D,EAAA,+EAGChB,EAAeiB,MAAMC,cAAc,CAACC,MAAOf,EAAWgB,QAASf,IAHhE,cAGdgB,EAHc,OAIRC,EAAqBD,EAAOE,SAJpB,SAMCvB,EAAeiB,MAAMC,cAAc,CAACC,MAAOf,EAAWgB,QAASd,IANhE,OAMde,EANc,OAORG,EAAoBH,EAAOE,SAEjCf,EAAgBc,GAChBZ,EAAec,GAVD,kDAYhBT,QAAQtC,MAAM,wBAAd,MAZgB,0DAAH,qDAgBjBgD,KACC,CAACjB,EAAiBE,EAAeL,EAAsBC,EAAqBN,EAAgBI,IAExF,CAACG,eAAcE,gBAGbiB,EAAe,SAACC,EAAuBC,EAAuBC,EAAuB9B,EAA4B+B,GAC1H,IAAM9B,EAAiBC,cACfC,EAAYC,cAAZD,QAEJE,EAAuD,MAC3D,OAAQF,GACN,KAAK,EACHE,EAAY,MACZ,MACF,KAAK,EACHA,EAAY,UACZ,MACF,KAAK,GACHA,EAAY,MACZ,MACF,KAAK,GACHA,EAAY,cACZ,MACF,QACEA,EAAY,MAnBgI,IA8B5I2B,EACAC,EACA1B,EACA2B,EAjC4I,EA0BlH9D,mBAAS,GA1ByG,mBA0BzI+D,EA1ByI,KA0BhIC,EA1BgI,OA2B1GhE,mBAAS,GA3BiG,mBA2BzIsC,EA3ByI,KA2B5HC,EA3B4H,KA6B1IC,EAAOC,cAKb,IACImB,EAAiBpB,EAAKE,MAAMC,kBAAkBc,GAC9CI,EAAiBrB,EAAKE,MAAMC,kBAAkBe,GAC9CvB,EAAsBK,EAAKE,MAAMC,kBAAkBf,GACnDkC,EAAatB,EAAKE,MAAMC,kBAAkBgB,GAE9C,SACIf,QAAQtC,MAAM,sCA6ClB,OA1CApB,qBAAU,YACS,uCAAG,sCAAA2D,EAAA,+EAOChB,EAAeiB,MAAMC,cAAc,CAACC,MAAOf,EAAWgB,QAASW,IAPhE,cAOdV,EAPc,OAQRe,EAAef,EAAOE,SARd,SAUCvB,EAAeiB,MAAMC,cAAc,CAACC,MAAOf,EAAWgB,QAASY,IAVhE,cAUdX,EAVc,OAWRgB,EAAehB,EAAOE,SAXd,UAaCvB,EAAeiB,MAAMC,cAAc,CAACC,MAAOf,EAAWgB,QAASd,IAbhE,eAade,EAbc,OAcRG,EAAoBH,EAAOE,SAdnB,UAgBCvB,EAAesC,QAAQC,iBAAiB,CAACpB,MAAOf,EAAWgB,QAASa,EAAYO,gBAAiB,CAACT,EAAeC,KAhBlH,SAgBdX,EAhBc,QAiBH,GAAGoB,cAAcC,gBAAkBX,EAAeW,cACzDC,EAAqBC,YAAiB,IAAIC,IAAUxB,EAAO,GAAGyB,SAAUzB,EAAO,GAAGxE,UAGlFkG,EAAqBH,YAAiB,IAAIC,IAAUxB,EAAO,GAAGyB,SAAUzB,EAAO,GAAGxE,UAGlFwE,EAAO,GAAGoB,cAAcC,gBAAkBX,EAAeW,cACzDC,EAAqBC,YAAiB,IAAIC,IAAUxB,EAAO,GAAGyB,SAAUzB,EAAO,GAAGxE,UAGlFkG,EAAqBH,YAAiB,IAAIC,IAAUxB,EAAO,GAAGyB,SAAUzB,EAAO,GAAGxE,UAGtFsF,GAAcQ,EAAqBP,EAAkBW,EAAqBV,GAAkBV,GAC5FjB,EAAec,GAhCD,kDAkChBT,QAAQtC,MAAM,wBAAd,MAlCgB,0DAAH,qDAsCjBgD,KACC,CAACU,EAAYzB,EAAgBiB,EAAeI,EAAgBC,EAAgB1B,EAAqB2B,EAAY7B,EAAWJ,IAEpH,CAACkC,UAASzB,iB,mGClMfuC,EAAaC,IAAOC,IAAV,4CAGVC,EAAcF,YAAOG,IAAPH,CAAH,oHAQXI,EAAuB,SAACpC,GAAkB,IAAD,EACvCG,EAAUkC,YAA4B,QAAjBrC,EAAMsC,OAAmBC,IAAOC,KAAKrC,QAAUH,EAAMG,SAChF,MAAM,kBAAN,OAAyBA,EAAzB,sBAAoCH,EAAMyC,qBAA1C,QAA0D,QAY7CC,IATuC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eACrE,OACE,eAACV,EAAD,WACE,cAACH,EAAD,CAAYc,IAAKT,EAAqBO,GAAeG,IAAI,aACzD,cAACf,EAAD,CAAYc,IAAKT,EAAqBQ,GAAiBE,IAAI,kB,sJCVpDC,EAAe,SAACC,GAAwC,IAAxBC,EAAuB,wDAC5DC,EAAWC,cADiD,EAE9CjE,cAAZmC,EAF0D,EAE1DA,QACF+B,EAAqBC,cACrBC,EAAmBC,YAAYP,GAE/BQ,EAAcC,sBAAW,uCAC7B,WAAOC,EAAgB9H,GAAvB,SAAAmE,EAAA,yDACiB,IAAXiD,EADN,gCAEUW,YAAMP,EAAoB,EAAGM,EAAQrC,GAF/C,kCAGa4B,EAHb,iCAIUW,YAAaN,EAAkBI,EAAQrC,GAJjD,gDAMUwC,YAAUP,EAAkBI,EAAQ9H,EAAUyF,GANxD,QAQE6B,EAASY,YAAwBd,EAAQ3B,IACzC6B,EAASa,YAAkBf,EAAQ3B,IATrC,4CAD6B,wDAY7B,CAACA,EAAS6B,EAAUD,EAAYG,EAAoBE,EAAkBN,IAGxE,MAAO,CAAEgB,QAASR,IAGLS,IAvCE,SAACC,GAAiB,IACzB7C,EAAYnC,cAAZmC,QACF+B,EAAqBC,cAU3B,MAAO,CAAEW,QARWP,sBAAW,uCAC7B,WAAOC,EAAgBS,GAAvB,eAAApE,EAAA,sEACuB4D,YAAK,OAACQ,QAAD,IAACA,IAAWf,EAAoBc,EAAKR,EAAQrC,IAAW8C,GADpF,OACQC,EADR,OAEEtE,QAAQuE,KAAKD,GAFf,2CAD6B,wDAK7B,CAAC/C,EAAS+B,EAAoBc,O,wLCVrBI,EAAU,SAACH,GAAsB,IACpC9C,EAAYnC,cAAZmC,QACFkD,EAAkBC,YAAqBL,GAU7C,MAAO,CAAEM,UARahB,sBAAW,uCAC/B,WAAOC,GAAP,eAAA3D,EAAA,sEACuB2E,YAAKH,EAAiBlD,GAD7C,OACQ+C,EADR,OAEEtE,QAAQuE,KAAKD,GAFf,2CAD+B,sDAK/B,CAAC/C,EAASkD,MAqBDI,EAAiB,SAAC3B,GAA6C,IAArC4B,EAAoC,wDACnE1B,EAAWC,cADwD,EAErDjE,cAAZmC,EAFiE,EAEjEA,QACF+B,EAAqBC,cACrBC,EAAmBC,YAAYP,GAE/B6B,EAAgBpB,sBAAW,uCAC/B,WAAOC,EAAgB9H,GAAvB,mBAAAmE,EAAA,yDACiB,IAAXiD,EADN,gCAEyB8B,YAAQ1B,EAAoB,EAAGM,EAAQrC,GAFhE,OAEU+C,EAFV,OAGItE,QAAQuE,KAAKD,GAHjB,2BAIaQ,EAJb,kCAKyBG,YAAqBzB,EAAkBjC,GALhE,QAKU+C,EALV,OAMItE,QAAQuE,KAAKD,GANjB,yCAQyBY,YAAY1B,EAAkBI,EAAQ9H,EAAUyF,GARzE,QAQU+C,EARV,OASItE,QAAQuE,KAAKD,GATjB,QAWElB,EAASY,YAAwBd,EAAQ3B,IACzC6B,EAASa,YAAkBf,EAAQ3B,IACnC6B,EAAS+B,YAAwBjC,EAAQ3B,IAb3C,4CAD+B,wDAgB/B,CAACA,EAAS6B,EAAU0B,EAAyBxB,EAAoBE,EAAkBN,IAGrF,MAAO,CAAEyB,UAAWI,IAGPK,IA3CI,SAAChB,GAAiB,IAC3B7C,EAAYnC,cAAZmC,QACF+B,EAAqBC,cAU3B,MAAO,CAAEoB,UARahB,sBAAW,uCAC/B,WAAOC,GAAP,eAAA3D,EAAA,sEACuB+E,YAAQ1B,EAAoBc,EAAKR,EAAQrC,GADhE,OACQ+C,EADR,OAEEtE,QAAQuE,KAAKD,GAFf,2CAD+B,sDAK/B,CAAC/C,EAAS+B,EAAoBc,O,wLCxBrBiB,EAAW,SAACZ,GAA6B,IAC5ClD,EAAYnC,cAAZmC,QACF8C,EAAWK,YAAqBD,GAOtC,MAAO,CAAEa,SALW3B,sBAAW,sBAAC,4BAAA1D,EAAA,sEACTsF,YAAMlB,EAAU9C,GADP,cACxB+C,EADwB,yBAEvBA,GAFuB,2CAG7B,CAAC/C,EAAS8C,MAiBFmB,EAAiB,SAACtC,GAAgC,IAAxBC,EAAuB,wDACtDC,EAAWC,cAD2C,EAExCjE,cAAZmC,EAFoD,EAEpDA,QACFiC,EAAmBC,YAAYP,GAC/BI,EAAqBC,cAErBkC,EAAgB9B,sBAAW,sBAAC,sBAAA1D,EAAA,yDACjB,IAAXiD,EAD4B,gCAExBwC,YAAQpC,EAAoB,EAAG/B,GAFP,kCAGrB4B,EAHqB,iCAIxBwC,YAAgBnC,EAAkBjC,GAJV,gDAMxBqE,YAAapC,EAAkBjC,GANP,QAQhC6B,EAAS+B,YAAwBjC,EAAQ3B,IACzC6B,EAASa,YAAkBf,EAAQ3B,IATH,4CAU/B,CAACA,EAAS6B,EAAUD,EAAYG,EAAoBE,EAAkBN,IAEzE,MAAO,CAAEoC,SAAUG,K,qMC/CRI,EAAkB3D,IAAO4D,IAAV,2XAEN,qBAAGC,MAAkBC,OAAOC,cAM9C,qBAAGF,MAAkBG,aAAaC,MAOlC,qBAAGJ,MAAkBG,aAAaE,MAQzBC,EAAenE,IAAO4D,IAAV,8CAIZQ,EAAgBpE,IAAO4D,IAAV,yGAKbS,EAASrE,IAAO4D,IAAV,oFAGR,qBAAGC,MAAkBC,OAAOQ,S,oGCnBjCC,EAAOvE,IAAO4D,IAAV,yJAOJY,EAAWxE,IAAO4D,IAAV,0BAERa,EAAiBzE,IAAO4D,IAAV,iDA0JLc,IAtJ+C,SAAC,GAUxD,IATLC,EASI,EATJA,UACAC,EAQI,EARJA,WACAC,EAOI,EAPJA,IACAC,EAMI,EANJA,UACAC,EAKI,EALJA,SAKI,IAJJC,0BAII,MAJiB,OAIjB,MAHJC,wBAGI,MAHe,EAGf,MAFJC,yBAEI,MAFgB,EAEhB,MADJC,sBACI,MADa,EACb,EACIC,EAAMC,cAAND,EACFE,EAAiC,IAAOV,EAExCW,EAA2BC,YAAyC,CACxEC,aAAc,EACdC,QAASb,EACTD,aACAK,mBACAC,oBACAC,mBAEIQ,EAA2BH,YAAyC,CACxEC,aAAc,EACdC,QAASb,EACTD,aACAK,mBACAC,oBACAC,mBAEIS,EAA4BJ,YAAyC,CACzEC,aAAc,GACdC,QAASb,EACTD,aACAK,mBACAC,oBACAC,mBAEIU,EAA6BL,YAAyC,CAC1EC,aAAc,IACdC,QAASb,EACTD,aACAK,mBACAC,oBACAC,mBAGF,OACE,eAAC,KAAD,CAAOW,MAAOV,EAAE,OAAQT,UAAWA,EAAnC,UACE,eAACJ,EAAD,WACE,cAACE,EAAD,UACE,cAAC,KAAD,CAAMsB,SAAS,OAAOC,MAAI,EAACrM,MAAM,aAAasM,cAAc,YAAYC,GAAG,OAA3E,SACGd,EAAE,iBAGP,cAACX,EAAD,UACE,cAAC,KAAD,CAAMsB,SAAS,OAAOC,MAAI,EAACrM,MAAM,aAAasM,cAAc,YAAYE,GAAG,OAAOC,GAAG,OAAOF,GAAG,OAA/F,SACGd,EAAE,WAGP,cAACX,EAAD,UACE,cAAC,KAAD,CAAMsB,SAAS,OAAOC,MAAI,EAACrM,MAAM,aAAasM,cAAc,YAAYC,GAAG,OAA3E,SACGd,EAAE,sBAAuB,CAAE9E,OAAQ0E,QAIxC,cAACR,EAAD,UACE,cAAC,KAAD,UAAOY,EAAE,SAAU,CAAEiB,IAAK,QAE5B,cAAC7B,EAAD,UACE,eAAC,KAAD,CAAM2B,GAAG,OAAOC,GAAG,OAAnB,UACGE,YAAO,CAAEC,aAAchB,EAA0BiB,eAAgBlB,IAAkCmB,QAClGxB,GAFJ,SAOF,cAACT,EAAD,UACE,cAAC,KAAD,UAAOe,MAGT,cAACf,EAAD,UACE,cAAC,KAAD,UAAOY,EAAE,SAAU,CAAEiB,IAAK,QAE5B,cAAC7B,EAAD,UACE,eAAC,KAAD,CAAM2B,GAAG,OAAOC,GAAG,OAAnB,UACGE,YAAO,CAAEC,aAAcZ,EAA0Ba,eAAgBlB,IAAkCmB,QAClGxB,GAFJ,SAOF,cAACT,EAAD,UACE,cAAC,KAAD,UAAOmB,MAGT,cAACnB,EAAD,UACE,cAAC,KAAD,UAAOY,EAAE,SAAU,CAAEiB,IAAK,SAE5B,cAAC7B,EAAD,UACE,eAAC,KAAD,CAAM2B,GAAG,OAAOC,GAAG,OAAnB,UACGE,YAAO,CACNC,aAAcX,EACdY,eAAgBlB,IACfmB,QAAQxB,GAJb,SAQF,cAACT,EAAD,UACE,cAAC,KAAD,UAAOoB,MAGT,cAACpB,EAAD,CAAUkC,MAAO,CAAEC,SAAU,SAA7B,SACE,cAAC,KAAD,UAAOvB,EAAE,iBAEX,cAACZ,EAAD,UACE,eAAC,KAAD,CAAM2B,GAAG,OAAOC,GAAG,OAAnB,UACGE,YAAO,CACNC,aAAcV,EACdW,eAAgBlB,IACfmB,QAAQxB,GAJb,SAQF,cAACT,EAAD,UACE,cAAC,KAAD,UAAOqB,SAGX,cAAC,IAAD,CAAMe,eAAe,SAArB,SACE,eAAC,IAAD,CAAKV,GAAG,OAAOS,SAAS,QAAxB,UACE,cAAC,KAAD,CAAMZ,SAAS,OAAOc,UAAU,SAASlN,MAAM,aAA/C,SACGyL,EACC,sKACA,CAAE0B,KAAM5B,EAAkB6B,qBAG7B5B,EAAiB,GAChB,cAAC,KAAD,CAAM6B,GAAG,OAAOjB,SAAS,OAAOc,UAAU,SAASlN,MAAM,aAAzD,SACGyL,EAAE,gFAA4E,CAAE6B,IAAK9B,WAK9F,cAAC,IAAD,CAAMyB,eAAe,SAArB,SACE,cAAC,KAAD,CAAcM,KAAMnC,EAApB,SAA+BD,W,wPC3KjCqC,EAA8B,SAAClN,GAAW,IACtCmL,EAAMC,cAAND,EACR,OACE,cAAC,KAAD,yBAAKgC,QAAQ,YAAYC,SAAO,EAACC,UAAW,cAAC,KAAD,CAAcC,MAAM,OAAO5N,MAAM,YAAYwM,GAAG,SAAclM,GAA1G,aACGmL,EAAE,YAKHoC,EAAmC,SAACvN,GAAW,IAC3CmL,EAAMC,cAAND,EACR,OACE,cAAC,KAAD,yBAAKgC,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,CAAeC,MAAM,OAAO5N,MAAM,UAAUwM,GAAG,SAAclM,GAAvG,aACGmL,EAAE,iBAaHqC,EAA8B,SAACxN,GAAW,IACtCmL,EAAMC,cAAND,EACR,OACE,cAAC,KAAD,yBAAKgC,QAAQ,aAAaC,SAAO,GAAKpN,GAAtC,aACGmL,EAAE,YAKHsC,EAAoC,SAACzN,GAAW,IAC5CmL,EAAMC,cAAND,EACR,OACE,cAAC,KAAD,yBAAKgC,QAAQ,YAAYC,SAAO,EAACC,UAAW,cAAC,KAAD,CAAaC,MAAM,OAAO5N,MAAM,YAAYwM,GAAG,SAAclM,GAAzG,aACGmL,EAAE,cAKHuC,EAAyC,SAAC1N,GAAW,IACjDmL,EAAMC,cAAND,EACR,OACE,cAAC,KAAD,yBAAKgC,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,CAAeC,MAAM,OAAO5N,MAAM,UAAUwM,GAAG,SAAclM,GAAvG,aACGmL,EAAE,a,gDClDHwC,E,KAAa5H,EAAO4D,IAAV,uQAeDgE,O,kCCjBf,kCAAO,IAAMC,EAAW,CACtBC,UAAW,CACTC,SAAG,IACHC,SAAG,MAIMC,EAAW,SAACC,GACvB,OAAOA,EAAMC,QAAQ,qBAAqB,SAACC,GAAD,OAAOP,EAASC,UAAUM,IAAMA,O,+HCE/DC,GAPErI,IAAO4D,IAAtB,8GACsB,qBAAGC,MAAkBC,OAAOwE,cAM1BtI,IAAO4D,IAAV,8HAGH,qBAAGC,MAAkBC,OAAOyE,YAIjCC,EAAUxI,IAAOyI,GAAV,4KAGF,qBAAG5E,MAAkBC,OAAOyE,Y,yFCNxCG,EAAU1I,IAAO4D,IAAV,iDAIP+E,EAAqB3I,YAAO4I,KAAP5I,CAAH,iDAyBT6I,IArB0C,SAAC,GAGnD,IAFLC,EAEI,EAFJA,eACAC,EACI,EADJA,cAEQ3D,EAAMC,cAAND,EAER,OACE,eAACsD,EAAD,WAQE,cAACC,EAAD,CAAoBzB,KAAM4B,EAA1B,mCACA,cAACH,EAAD,CAAoBzB,KAAM6B,EAA1B,SAA0C3D,EAAE,wB,qDCXnC4D,IAfW,SAACC,EAAoBC,GAAuB,IAAD,EAC3BhO,oBAAS,GADkB,mBAC5DiO,EAD4D,KAC9CC,EAD8C,KAYnE,OATAhP,qBAAU,WACR,IAAIiP,EAMJ,OALIJ,IAAcE,EAChBC,GAAgB,IACNH,GAAaE,IACvBE,EAAYC,YAAW,kBAAMF,GAAgB,KAAQF,IAEhD,kBAAMK,aAAaF,MACzB,CAACJ,EAAWC,EAAWC,IACnBA,I,4ICnBHK,EAAQxJ,YAAOyJ,IAAPzJ,CAAH,qKACK,gBAAG6D,EAAH,EAAGA,MAAH,EAAU6F,WAAV,OAA2B7F,EAAM8F,OAAN,mEAAmF9F,EAAMC,OAAO8F,SAKrIC,EAAQ7J,YAAO8J,IAAP9J,CAAH,2EAWI+J,EANuC,SAAC,GAAD,IAAGL,EAAH,EAAGA,WAAYM,EAAf,EAAeA,SAAa/P,EAA5B,gDACpD,cAACuP,EAAD,yBAAOE,WAAYA,GAAgBzP,GAAnC,aACE,cAAC4P,EAAD,UAAQG,S,4HCONC,EAAmBjK,IAAO4D,IAAV,yNAIA,qBAAGC,MAAkBC,OAAOyE,WAZ7B,SAAC,GAAkC,IAAD,IAA/B2B,iBAA+B,SAAZrG,EAAY,EAAZA,MACzC,OAAIqG,EACKrG,EAAMsG,QAAQC,QAGhBvG,EAAMsG,QAAQE,SASZ,qBAAGxG,MAAkBC,OAAOQ,QAKjCgG,EAActK,YAAOuK,IAAPvK,CAAH,qPAOb,qBAAG6D,MAAkBG,aAAawG,MAIlC,qBAAG3G,MAAkBG,aAAaC,MAmFvBwG,EAjE+B,SAAC,GASO,IARLC,EAQI,EARJA,IAEAC,EAMI,EANJA,SACAC,EAKI,EALJA,YACAlR,EAII,EAJJA,MAII,IADJE,gBACI,MADO,GACP,EAC3CwL,EAAMC,cAAND,EACFyF,EAAwB,MAARH,IAAgBA,EAatC,OACE,sBAAKhE,MAAO,CAAEoE,SAAU,WAAYC,OAAQ,YAA5C,UACE,cAACd,EAAD,CAAkBC,UAAWW,EAA7B,SAIE,eAAC,IAAD,CAAMG,WAAW,WAAWpE,eAAe,eAA3C,UACE,cAAC0D,EAAD,CACEW,QAAO,8BAAyBrR,EAAzB,MACPsR,UAAU,UACVC,KAAK,MACLC,IAAI,IACJT,SAAUA,EACVU,YAAY,IACZ3R,MAAOA,IAET,cAAC,IAAD,CAAQ4R,KAAK,KAAKtR,QAAS4Q,EAAazE,GAAG,MAAMD,GAAG,MAApD,SACGd,EAAE,cAKT,cAAC,IAAD,S,2ZC9FC,SAASmG,EACdC,EACAC,GAES,IADTxO,EACQ,uDADWyO,IAAQC,QAE3B,OAAQF,GACN,IAAK,cACH,MAAM,GAAN,OAAUG,IAAmB3O,GAA7B,eAA4CuO,GAE9C,IAAK,QACH,MAAM,GAAN,OAAUI,IAAmB3O,GAA7B,kBAA+CuO,GAEjD,IAAK,QACH,MAAM,GAAN,OAAUI,IAAmB3O,GAA7B,kBAA+CuO,GAEjD,IAAK,YACH,MAAM,GAAN,OAAUI,IAAmB3O,GAA7B,4BAAyDuO,GAE3D,QACE,MAAM,GAAN,OAAUI,IAAmB3O,GAA7B,oBAAiDuO,IAIhD,SAASK,EACdL,EACAC,GAES,IADTxO,EACQ,uDADWyO,IAAQC,QAE3B,OAAQF,GACN,IAAK,cACH,MAAM,GAAN,OAAUK,IAAmB7O,GAA7B,eAA4CuO,GAE9C,IAAK,QACH,MAAM,GAAN,OAAUM,IAAmB7O,GAA7B,kBAA+CuO,GAEjD,IAAK,QACH,MAAM,GAAN,OAAUM,IAAmB7O,GAA7B,kBAA+CuO,GAEjD,IAAK,YACH,MAAM,GAAN,OAAUM,IAAmB7O,GAA7B,4BAAyDuO,GAE3D,QACE,MAAM,GAAN,OAAUM,IAAmB7O,GAA7B,oBAAiDuO,I,uHCvD3CO,G,WCWCC,IAZYC,YAAH,8KAYIjM,IAAO4D,IAAV,qRACD,SAAC3J,GAAD,OAAWA,EAAM4J,MAAMC,OAAOC,cAOpC,SAAC9J,GAAD,OAAWA,EAAM4J,MAAMC,OAAOoI,iBACnC,gBAAGC,EAAH,EAAGA,WAAH,SAAetI,MAAkBC,OAAOqI,EAAa,eAAiB,gBAC7E,qBAAGtI,MAAkBG,aAAaC,OAKzBmI,GAAkBpM,IAAO4D,IAAV,4EACZ,qBAAGC,MAAkBwI,KAAK3C,cAEpB,gBAAG4C,EAAH,EAAGA,eAAgBzI,EAAnB,EAAmBA,MAAnB,OAAgCyI,EAAiB,OAASzI,EAAM0I,MAAMF,Q,uCCtB7EG,GANoD,SAACvS,GAClE,IAAMwS,EAAe,yBAAqBpM,aAAWE,KAAOmM,KAAKvO,SAA5C,QAErB,OAAO,eAAC,KAAD,aAAgBwO,WAAYF,EAAiBG,aAAa,gCAAmC3S,KCAhGyO,GAAU1I,IAAO4D,IAAV,iHACe,qBAAEC,MAAiBC,OAAOC,cAqEvC8I,GArDV,SAAC,GAAgG,IAA9FC,EAA6F,EAA7FA,aAAcC,EAA+E,EAA/EA,aAA+E,IAAjEZ,kBAAiE,aAA7Ca,mBAA6C,WAAxBC,UAC7D5H,cAAND,EACmC,SAAxB0H,EAAaxM,QAAqByM,EAAazM,OA6BpD4M,qBAAWC,KAEzB,OACE,eAACzE,GAAD,CAASyD,WAAYA,EAAYzC,WA9BhB,aA8BjB,SACE,gBAAC,IAAD,CAAMsB,WAAW,SAASpE,eAAe,gBAAzC,UACE,eAAC,IAAD,CAAMwG,cAAc,SAAS1G,MAAO,CAACG,UAAW,QAAhD,SACE,gBAAC,IAAD,CAASlN,MAAM,OAAO2R,KAAK,KAA3B,0BACYyB,EAAazM,QADzB,IACmC,wBADnC,MAEK,wBAFL,eAGWwM,EAAaxM,aAGzB0M,EACC,eAAC,GAAD,CAAyBzF,MAAO,GAAI8F,OAAQ,KAE5C,eAAC3M,GAAA,EAAD,CAAgBC,aAAcoM,EAAcnM,eAAgBkM,EAAcvF,MAAO,GAAI8F,OAAQ,W,oBC3DjGC,GAAatN,YAAOuN,KAAPvN,CAAH,4CAsCDwN,GAlCmD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAa9I,EAAgB,EAAhBA,UACxES,EAAMC,cAAND,EACUsI,eAAV7J,MAER,OACE,gBAAC,KAAD,CACEiC,MAAOV,EAAE,oBAAqB,CAAE9E,OAAQmN,IACxC9I,UAAWA,EAFb,UAIE,eAAC,KAAD,CAAMhL,MAAM,UAAUqM,MAAI,EAA1B,SACGZ,EAAE,gCAAiC,CAAE9E,OAAQmN,MAEhD,eAAC,KAAD,CAAMzG,GAAG,OAAT,SAAiB5B,EAAE,mDAA+C,CAAE9E,OAAQmN,MAC5E,eAAC,KAAD,UACGrI,EAAE,kFAA8E,CAC/E9E,OAAQmN,MAGZ,gBAAC,IAAD,CAAQzG,GAAG,OAAO2G,GAAG,IAAIC,UAAQ,EAAC1G,KAAM2G,IAAxC,UACGzI,EAAE,OADL,IACcqI,KAEd,eAACH,GAAD,CAAYpG,KAAK,yBAAyB0G,UAAQ,EAAlD,SACE,gBAAC,IAAD,CAAQxG,QAAQ,YAAYJ,GAAG,MAAMO,MAAM,OAA3C,UACGnC,EAAE,iBACH,eAAC,KAAD,CAAazL,MAAM,UAAUyM,GAAG,aAGpC,eAAC,IAAD,CAAQgB,QAAQ,OAAOpN,QAAS2K,EAAhC,SACGS,EAAE,sB,yICRL0I,IAJa9N,YAAOuN,KAAPvN,CAAH,4CAIEA,YAAOG,KAAPH,CAAH,sFAmRA+N,GA9QqC,SAAC,GAQ9C,IAPLC,EAOI,EAPJA,UACAC,EAMI,EANJA,KACAC,EAKI,EALJA,oBACAC,EAII,EAJJA,kBAII,IAHJC,uBAGI,SAFJzJ,EAEI,EAFJA,UAEI,IADJ0J,iBACI,SACIrN,EAA+DiN,EAA/DjN,OAAQ+L,EAAuDkB,EAAvDlB,aAAcuB,EAAyCL,EAAzCK,SAAUC,EAA+BN,EAA/BM,aAAczB,EAAiBmB,EAAjBnB,aAEhD0B,GADarU,iBAAO,MACGsU,aAAS1B,EAAa5O,QAAUkC,aAAW0M,EAAa5O,SAAW,KACxFiH,EAAMC,cAAND,EAEApD,GADU0L,eAAV7J,MACY9C,aAAaC,EAAQgN,GAAjChM,SACAS,EAAcE,aAAe3B,EAAQiN,EAAKrL,yBAA1CH,UAPJ,EAQiCiM,eAA7BC,EARJ,EAQIA,aAAcC,EARlB,EAQkBA,WARlB,EAS8B1T,oBAAS,GATvC,mBASG2T,EATH,KAScC,EATd,OAWgC5T,mBAASmT,GAXzC,mBAWGU,EAXH,KAWeC,EAXf,OAYkC9T,mBAAS,IAZ3C,mBAYG+T,EAZH,KAYgBC,EAZhB,OAaqDhU,oBAAS,GAb9D,mBAaGiU,EAbH,KAayBC,EAbzB,OAc0BlU,mBAAS,GAdnC,mBAcYmU,GAdZ,WAeEC,EAAYf,EAAagB,MAAMjB,EAASkB,eAKxCC,IAJ4B,OAARnB,QAAQ,IAARA,OAAA,EAAAA,EAAUkB,eAChC7P,YAAiB,IAAIC,IAAU0O,EAASkB,eAAgBzC,EAAanT,UACrE8V,KAE+B,OAARpB,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,qBACjCvO,YAAiB,IAAIC,IAAU0O,EAASJ,qBAAsBnB,EAAanT,UAC3E8V,KACEC,GAA+B,OAARrB,QAAQ,IAARA,OAAA,EAAAA,EAAUkB,eACnC7P,YAAiB,IAAIC,IAAUqO,EAAKM,aAAagB,MAAMjB,EAASkB,gBAAiBzC,EAAanT,UAC9F8V,IACEE,EAAiBC,aAAkB9C,EAAa5O,QAAQ8P,EAAKhR,SAAUgR,EAAK6B,gBAAgB7B,EAAKhR,UA1BnG,EA2ByC8S,aAC3CvB,EACAxN,EACA8L,EAAaxM,OACb0P,YAAiB,IAAIpQ,IAAUqP,GAAclC,EAAanT,WAJpDqW,EA3BJ,EA2BIA,cAAeC,GA3BnB,EA2BmBA,kBAMjBC,GAA4B,WAChC,OAAI/B,EACKE,EAASkB,cAEXjB,EAAa6B,GAAGV,MAAaxB,EAAoBkC,GAAGd,GAAaA,EAAYpB,GAE/De,GAAeoB,YAAa,IAAIzQ,IAAUqP,GAAaqB,MAAMnC,GAAmBoC,YAEvGnW,qBAAU,WACR,GAAImU,EAAa6B,GAAG,KAAOhC,EAAiB,CAC1C,IAAMoC,EAAyBR,YAAiB,IAAIpQ,IAAUqP,GAAclC,EAAanT,UACzFwV,EAAyBoB,EAAuBC,KAAKnC,EAASkB,eAAeY,GAAG7B,IAElFS,EAAcY,EAAe/P,QAAQ6Q,IAAIV,YAAiB,IAAIpQ,IAAUqP,GAAclC,EAAanT,cAClG,CACDsW,GACAjB,EACAV,EACAD,EACAvB,EACAqB,EACAwB,EACAR,IAGF,IA0BMuB,GAAkB,yCAAG,uBAAA5S,EAAA,yDACzB+Q,GAAa,IAETV,EAHqB,0CAMf3L,EAAUwM,EAAalC,EAAanT,UANrB,OAOrB+U,EAAa,GAAD,OACPvJ,EAAE,YADK,KAEVA,EAAE,kEAAmE,CACnE9E,OAAQwM,EAAaxM,UAGzBwO,GAAa,GACbE,GAAc,GACdrK,IAfqB,kDAiBrBiK,EAAWxJ,EAAE,YAAaA,EAAE,kDAC5B0J,GAAa,GAlBQ,2DAuBf9M,EAAQiN,EAAalC,EAAanT,UAvBnB,QAwBrB+U,EAAa,GAAD,OACPvJ,EAAE,UADK,KAEVA,EAAE,oDAAqD,CACrD9E,OAAQyM,EAAazM,UAGzBwO,GAAa,GACbnK,IA/BqB,mDAiCrBiK,EAAWxJ,EAAE,YAAaA,EAAE,kDAC5B0J,GAAa,GAlCQ,kEAAH,qDAuCxB,OACE,eAAC,KAAD,CAAOhJ,MAAM,GAAGnB,UAAWA,EAA3B,SACE,gBAACmJ,GAAD,CAAWV,cAAc,SAAzB,UAUE,eAAC,KAAD,CAAMxG,eAAe,SAArB,SACE,eAAC,KAAD,CAAMjN,MAAM,aAAaoM,SAAS,OAAOG,GAAG,OAAOc,GAAG,QAAQN,MAAO,CAAEG,UAAW,UAAlF,SACGzB,EAAE,iEAAkE,CACnEwL,SAAUC,YAAsBtC,EAAcxB,EAAanT,UAC3DkX,YAAa7C,EAAKlB,aAAazM,aAKrC,eAAC,KAAD,CAAM0K,WAAW,SAASpE,eAAe,gBAAgBV,GAAG,MAA5D,SACE,eAAC,KAAD,CAAMF,MAAI,EAAV,4BAaF,eAACyE,GAAA,EAAD,CACE/Q,MAAOuV,EACPrE,YAAa,YA3FO,SAACmG,GAC3B,GAAIA,EAAgB,EAAG,CACrB,IAAMC,EAAyBb,KAA4Bc,UAAU,KAAKC,aAAaH,GACjFI,EAAgBN,YAAsBG,EAAwBjE,EAAanT,SAAUmT,EAAanT,UACxGsV,EAAeiC,QAEfjC,EAAe,IAEjBG,EAAW0B,GAoFHK,CAAoB,MAEtBzG,SAAU,SAAC0G,GAAD,OAzGa,SAACnJ,GAC9B,GAAIA,EAAO,CACT,IAAMoJ,EAAiBtB,YAAiB,IAAIpQ,IAAUsI,GAAQ6E,EAAanT,UACrE2X,EAAapV,KAAKQ,MAAM2U,EAAeL,UAAUd,MAA6Be,aAAa,KAAKX,YACtGlB,EAAWlT,KAAKiP,IAAImG,EAAY,WAEhClC,EAAW,GAEbH,EAAehH,GAiGQsJ,CAAuBH,EAAEI,cAAc/X,QACxDgR,IAAKmG,YAAsB,IAAIjR,IAAU0P,GAAYvC,EAAanT,SAAU,GAC5E0G,OAAQyM,EAAazM,OACrBoR,gBAAgB,KAKlB,gBAAC,KAAD,CAAM/X,MAAM,aAAaoM,SAAS,OAAOG,GAAG,MAAMQ,MAAO,CAAEG,UAAW,QAAtE,wCAC8B8I,EAD9B,IACqD1B,EAAKlB,aAAazM,UAGvE,+BACE,gBAAC,KAAD,CAAM8F,GAAG,OAAOzM,MAAM,aAAaoM,SAAS,OAAOG,GAAG,MAAMQ,MAAO,CAAEG,UAAW,QAAhF,sBAIY4I,EAAmBhJ,QAAQ,GAJvC,IAI4CwH,EAAKlB,aAAazM,YAmChE,gBAAC,KAAD,CAAMsG,eAAe,gBAAgB+K,UAAU,OAAOC,aAAa,OAAnE,UACE,eAAC,KAAD,CAAM5L,MAAI,EAAV,6BACA,gBAAC,KAAD,WACGrG,YAAiBiQ,EAAe/P,QAASkN,EAAanT,UADzD,IACqEqU,EAAKlB,aAAazM,aAGzF,gBAAC,KAAD,CAAMoG,MAAO,CAAEa,MAAO,QAAtB,UACE,eAAC,KAAD,CACEsK,UAAWhD,EAEXiD,QAAS5B,GAAoB,eAAC,IAAD,CAAe6B,MAAI,EAACpY,MAAM,iBAAoB,KAG3EK,QAASiW,EACT+B,UAAW/C,GAAeF,EAC1B/H,GAAG,OACHiL,WAAS,EACTC,YAAY,OAVd,qBAcA,eAAC,KAAD,CACEL,UAAWhD,EACXiD,QAASjD,EAAY,eAAC,IAAD,CAAekD,MAAI,EAACpY,MAAM,iBAAoB,KACnEK,QAAS2W,GACTqB,UAAW/C,GAAeE,IAAyBJ,EAEnD/H,GAAG,OACHiL,WAAS,EACTE,WAAW,OARb,SAWG/M,EAAE,sBCxQTgN,IAHapS,YAAOuN,KAAPvN,CAAH,4CAGGA,YAAOG,KAAPH,CAAH,gHAyMDqS,GAhM+B,SAAC,GAQxC,IAPLrE,EAOI,EAPJA,UACAC,EAMI,EANJA,KACAC,EAKI,EALJA,oBACAC,EAII,EAJJA,kBAGAxJ,GACI,EAHJ2N,YAGI,EAFJlE,gBAEI,EADJzJ,WAEQ3D,EAAqEiN,EAArEjN,OAAQ+L,EAA6DkB,EAA7DlB,aAAcuB,EAA+CL,EAA/CK,SAAUiE,EAAqCtE,EAArCsE,mBAAoBzF,EAAiBmB,EAAjBnB,aACpD7P,EAAYC,cAAZD,QACAmG,EAAaE,aAAetC,EAAQgN,GAApC5K,SACAX,EAAcE,aAAe3B,GAAQ,GAArCyB,UACA2C,EAAMC,cAAND,EACAvB,EAAU6J,eAAV7J,MANJ,EAOoC3I,oBAAS,GAP7C,mBAOGsX,EAPH,KAOiBC,EAPjB,KAQaC,EAAuBC,aAAgBtS,aAAW4N,EAAKnB,aAAa3O,UAA7E0B,QARJ,EASiC6O,eAA7BC,EATJ,EASIA,aAAcC,EATlB,EASkBA,WAChBa,GAA6B,OAARnB,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,qBACjCvO,YAAiB,IAAIC,IAAU0O,EAASJ,qBAAsBnB,EAAanT,UAC3E,EACEgZ,GAA4B,OAARtE,QAAQ,IAARA,OAAA,EAAAA,EAAUkB,eAChC7P,YAAiB,IAAIC,IAAU0O,EAASkB,eAAgBzC,EAAanT,UACrE,EACEiZ,EAAqBH,EAAqB/S,YAAiB,IAAIC,IAAU8S,IAAuB,EAChGI,GAA4B,OAARxE,QAAQ,IAARA,OAAA,EAAAA,EAAUyE,eAAgBpT,YAAiB,IAAIC,IAAU0O,EAASyE,gBAAkB,EAjB1G,EAkB8B7X,oBAAS,GAlBvC,mBAkBc4T,GAlBd,WAmBEkE,EAAO,IAAIpT,IAAUqO,EAAKgF,eAAe3C,MAAM,IAAI1Q,IAAU0O,EAASkB,eAAe5L,IAAIqK,EAAKiF,cAC9FC,GAAiB,OAAJlF,QAAI,IAAJA,OAAA,EAAAA,EAAMgF,eAAgBtT,YAAiBqT,GAAQ,EApB9D,EAqB2BI,aAC7B,eAACC,GAAD,CACErF,UAAWA,EACXC,KAAMA,EACNC,oBAAqBA,EACrBC,kBAAmBA,KALhBmF,EArBH,oBA8BEC,EAAoB,yCAAG,uBAAAxV,EAAA,6DAC3B+Q,GAAa,GADc,kBAInB1L,IAJmB,OAKzBuL,EAAa,GAAD,OACPvJ,EAAE,WADK,KAEVA,EAAE,wDAAyD,CAAE9E,OAAQwM,EAAaxM,UAEpFwO,GAAa,GACbnK,IAVyB,gDAYzBiK,EAAWxJ,EAAE,SAAUA,EAAE,uFACzBtH,QAAQtC,MAAR,MACAsT,GAAa,GAdY,yDAAH,qDAkBpBjM,EAAa,yCAAG,uBAAA9E,EAAA,6DACpB+Q,GAAa,GADO,kBAIZrM,EACJoO,YAAsB,IAAIjR,IAAU0O,EAASkB,eAAgBzC,EAAanT,SAAU,IACpFmT,EAAanT,UANG,OAQlB+U,EAAa,GAAD,OACPvJ,EAAE,YADK,KAEVA,EAAE,gEAAiE,CACjE9E,OAAQwM,EAAaxM,UAGzBwO,GAAa,GACbnK,IAfkB,gDAiBlBiK,EAAWxJ,EAAE,YAAaA,EAAE,kDAC5B0J,GAAa,GAlBK,yDAAH,qDAsBnB,OACE,eAAC,KAAD,CAAOhJ,MAAM,GAAGnB,UAAWA,EAA3B,SACE,gBAAC,KAAD,CAAMyI,cAAc,SAAS1G,MAAO,CAAEiL,UAAW,QAASpK,MAAO,SAAjE,UACE,eAAC,KAAD,CAAMxB,SAAS,OAAO6L,aAAa,OAAOO,WAAW,OAArD,0BAGA,eAAC,KAAD,CAAMpM,SAAS,OAAOoM,WAAW,OAAjC,0CAKA,gBAACC,GAAD,CAAYT,UAAU,OAAtB,UACE,gBAAC,KAAD,CAAMvE,cAAc,SAApB,UACE,eAAC,KAAD,CAAMrH,SAAS,OAAf,SAAuBsK,YAAaZ,EAAoB,EAAG,KAC3D,gBAAC,KAAD,CAAM9V,MAAM,aAAaiY,aAAa,OAAtC,UACG3D,EAAKlB,aAAazM,OADrB,aAGA,eAAC,KAAD,CACE0R,SAAUO,EACVN,WAAS,EACTuB,UAAU,WACVxZ,QAAS,WACPyZ,OAAOC,KAAP,UAAeC,IAAf,YAAgC1F,EAAKlB,aAAa5O,QAAQlB,IAAY,WAL1E,yBAWDgR,EAAKlB,aAAazM,SAAW2N,EAAKnB,aAAaxM,QAC9C,gBAAC,KAAD,CAAM8M,cAAc,SAApB,UACE,eAAC,KAAD,CAAMrH,SAAS,OAAf,SAAuBsK,YAAawC,EAAoB,EAAG,KAC3D,gBAAC,KAAD,CAAMlZ,MAAM,aAAaiY,aAAa,OAAtC,UACG3D,EAAKnB,aAAaxM,OADrB,aAGA,eAAC,KAAD,CACE2R,WAAS,EACTjY,QAAS,WACPyZ,OAAOC,KAAP,UAAeC,IAAf,YAAgC1F,EAAKnB,aAAa3O,QAAQlB,IAAY,WAH1E,yBAUJ,gBAAC,KAAD,CAAMmQ,cAAc,SAApB,UACE,eAAC,KAAD,CAAMrH,SAAS,OAAf,SAAuBsK,YAAauC,EAAmB,EAAG,KAC1D,gBAAC,KAAD,CAAMjZ,MAAM,aAAaiY,aAAa,OAAtC,UACG3D,EAAKlB,aAAazM,OADrB,aAGA,eAAC,KAAD,CAAQ2R,WAAS,EAACjY,QAASsZ,EAAsBtB,SAAU/D,EAAK2F,kBAAhE,gCAMJ,eAACxB,GAAD,UACE,qBAAI1L,MAAO,CAAEiL,UAAW,OAAQkC,OAAQ,OAAQC,UAAU,aAAD,OAAejQ,EAAMC,OAAOyE,cAEvF,gBAAC6J,GAAD,CAAYT,UAAU,OAAOC,aAAa,OAA1C,UACE,gBAAC,KAAD,CAAMxE,cAAc,SAApB,UACE,eAAC,KAAD,CAAMrH,SAAS,OAAf,SAAuBsK,YAAa8C,EAAY,EAAG,MACnD,gBAAC,KAAD,CAAMxZ,MAAM,aAAaoM,SAAS,OAAlC,uBACakI,EAAKnB,aAAaxM,OAD/B,eAIF,gBAAC,KAAD,CAAM8M,cAAc,SAApB,UACE,eAAC,KAAD,CAAMrH,SAAS,OAAf,SAAuBsK,YAAayC,EAAmB,EAAG,KAC1D,gBAAC,KAAD,CAAMnZ,MAAM,aAAaoM,SAAS,OAAlC,UACGkI,EAAKnB,aAAaxM,OADrB,wBAIF,eAAC,KAAD,CACE8M,cAAc,SACdlH,GAAG,OACHiM,WAAW,MACX4B,aAAc,kBAAMtB,GAAgB,IACpCuB,aAAc,kBAAMvB,GAAgB,IALtC,SAOGnE,EAASkB,cAAcyE,GAAG,GACzB,gBAAC,KAAD,CAAQjC,UAAQ,EAACC,WAAS,EAA1B,UACG,IADH,WAEW,OAGX,gBAAC,KAAD,CACEnH,SAAS,MACToJ,OAEE,gBAAC,KAAD,CAAQjC,WAAS,EAAC7K,QAAQ,YAAY4K,SAAU/D,EAAKkG,mBAArD,UACE,eAAC,KAAD,uBADF,IACyB3B,EAAe,eAAC,KAAD,IAAkB,eAAC,KAAD,OAL9D,UAUE,eAAC,KAAD,CAAQ/G,KAAK,SAASuG,SAAU/D,EAAKkG,mBAAoBlC,WAAS,EAACjY,QAASuZ,EAA5E,mBAGA,eAAC,KAAD,CAAQ9H,KAAK,SAASuG,SAAU/D,EAAKkG,mBAAoBna,QAAS6I,EAAlE,wCAOLoL,EAAKkG,oBACN,eAAC,KAAD,CAAMX,UAAU,SAASzN,SAAS,OAAOoM,WAAW,OAApD,yFCpGKiC,GAxGkC,SAAC,GAO3C,IANLnG,EAMI,EANJA,KACAC,EAKI,EALJA,oBACAsB,EAII,EAJJA,cACAxB,EAGI,EAHJA,UAGI,KAFJqG,SAEI,EADJxC,kBACI,SACI9E,EAAwEkB,EAAxElB,aAAcoB,EAA0DF,EAA1DE,kBAAmBI,EAAuCN,EAAvCM,aAAcpC,EAAyB8B,EAAzB9B,WAAYmC,EAAaL,EAAbK,SAC3DlJ,EAAMC,cAAND,EAFJ,GAGuBzF,YAAiB6P,EAAezC,EAAanT,UACvC+F,YAC/B6P,EAAc0B,aAAa/C,GAC3BpB,EAAanT,UAGkBwZ,aAAS,eAAC,GAAD,CAAsB3F,YAAaV,EAAazM,WATtF,uBAWqB8S,aACvB,eAAC,GAAD,CACEpF,UAAWA,EACXC,KAAMA,EACNC,oBAAqBA,EACrBC,kBAAmBA,MALhBmG,EAXH,sBAoBuBlB,aACzB,eAAC,GAAD,CACElF,oBAAqBA,EACrBF,UAAWA,EACXC,KAAMA,EACNE,kBAAmBA,EACnBC,iBAAe,KA1Bf,uBA8B2CmG,aAC7CnP,EAAE,6EACF,CAAEoP,UAAW,YAhCX,EA8BIC,UA9BJ,EA8BeC,QA9Bf,EA8BwBC,eAKFpG,EAAa6B,GAAG,IAAM9B,EAASkB,cAAckB,IAAInC,GAuD3E,OACE,eAAC,KAAD,CAAM3H,eAAe,gBAAgBoE,WAAW,SAAhD,SACG6G,EAAY,eAAC,KAAD,CAAUtK,MAAM,OAAO8F,OAAO,SAR3C,eAAC,KAAD,CAAQ4E,WAAS,EAACD,SAAU7F,GAAcqD,EAAcoF,UAAU,GAAI5a,QAASsa,EAA/E,SACGnI,GAAcqD,EAAcqF,cAAc,GAAK,WAAa,aC/F/DzC,IAJapS,YAAO8U,KAAP9U,CAAH,gDAIGA,YAAOG,IAAPH,CAAH,8EAgGD+U,GApFiC,SAAC,GAA6B,IAA3B9G,EAA0B,EAA1BA,KAAMuB,EAAoB,EAApBA,cACvCzC,GAAiGkB,EAAzGjN,OAAyGiN,EAAjGlB,cAAcD,EAAmFmB,EAAnFnB,aAActJ,EAAqEyK,EAArEzK,QAASwR,EAA4D/G,EAA5D+G,aAAc1G,EAA8CL,EAA9CK,SAA6B2G,GAAiBhH,EAApCiH,kBAAoCjH,EAAjBgH,cAG1FjH,EAAYgH,IAAiBG,IAAaC,QAE1CC,GADQhQ,cAAND,GACkB,OAARkJ,QAAQ,IAARA,OAAA,EAAAA,EAAU+G,WAAY,IAAIzV,IAAU0O,EAAS+G,WAAa3F,KACtExB,GAA8B,OAARI,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,qBAAsB,IAAItO,IAAU0O,EAASJ,qBAAuBwB,IAGpG2E,IAFmB,OAAR/F,QAAQ,IAARA,OAAA,EAAAA,EAAUyE,eAAgB,IAAInT,IAAU0O,EAASyE,eAAiBrD,IAC5D2F,EAAUjF,GAAG,GACnBZ,EAAcY,GAAG,IAC5ByB,GAAavD,EAEb4E,GAAsB,OAAR5E,QAAQ,IAARA,OAAA,EAAAA,EAAUkB,eAC1B7P,YAAiB,IAAIC,IAAU0O,EAASkB,eAAgBzC,EAAanT,UACrE,EACE0b,GAAsB,OAARhH,QAAQ,IAARA,OAAA,EAAAA,EAAUyE,eAAgBpT,YAAiB,IAAIC,IAAU0O,EAASyE,gBAAkB,EAExG,OACE,eAAC,IAAD,CAAM3F,cAAc,SAApB,SACE,gBAAC,IAAD,CAAMA,cAAc,SAApB,UACG5J,GACC,qCAeE,gBAAC,IAAD,CAAMoD,eAAe,gBAAgBgL,aAAa,OAAlD,UACE,eAAC,IAAD,CAAK2D,QAAQ,SAAb,SAEE,gBAAC,KAAD,CAAM5b,MAAM,OAAOsM,cAAc,YAAYF,SAAS,OAAtD,WACIkP,GAAgB5E,YAAa6C,EAAa,EAAG,GADjD,IACsD+B,GAAgB,IADtE,IAC4ElI,EAAazM,YAG3F,eAAC,IAAD,CAAKiV,QAAQ,SAAb,SAEE,gBAAC,KAAD,CAAM5b,MAAM,OAAOsM,cAAc,YAAYF,SAAS,OAAtD,WACIkP,GAAgB5E,YAAaiF,EAAa,EAAG,GADjD,IACsDL,GAAgB,IADtE,IAC4EnI,EAAaxM,iBAcjG,eAAC,GAAD,CAAYsG,eAAe,gBAAgB+K,UAAU,OAArD,SACE,eAAC6D,GAAD,CACE3D,UAAWA,EACX5D,KAAMA,EACNC,oBAAqBA,EACrBsB,cAAeA,EACfxB,UAAWA,EACXqG,SAAUA,Y,WCdPoB,GA1DkC,SAAC,GAM3C,IALLzH,EAKI,EALJA,UACAC,EAII,EAJJA,KAKQjN,GADJ,EAHJkN,oBAGI,EAFJC,kBAEI,EADJmE,YAE6ErE,EAArEjN,QAAsBsN,GAA+CL,EAA7DlB,aAA6DkB,EAA/CK,UAA8BxB,GAAiBmB,EAArCsE,mBAAqCtE,EAAjBnB,cADxD,EAE8B5R,oBAAS,GAFvC,mBAEc4T,GAFd,WAGEjL,EAAQqJ,qBAAWC,KACjB/H,EAAMC,cAAND,EAJJ,EAKiCsJ,eAA7BC,EALJ,EAKIA,aAAcC,EALlB,EAKkBA,WACdxL,EAAaE,aAAetC,EAAQgN,GAApC5K,SACF0P,GAA4B,OAARxE,QAAQ,IAARA,OAAA,EAAAA,EAAUyE,eAAgBpT,YAAiB,IAAIC,IAAU0O,EAASyE,gBAAkB,EACxGQ,EAAoB,yCAAG,uBAAAxV,EAAA,6DAC3B+Q,GAAa,GADc,kBAInB1L,IAJmB,OAKzBuL,EAAa,WAEXvJ,EAAE,wDAAyD,CAAE9E,OAAQwM,EAAaxM,UAEpFwO,GAAa,GATY,gDAWzBF,EAAW,6FACX9Q,QAAQtC,MAAR,MACAsT,GAAa,GAbY,yDAAH,qDAiB1B,OACE,gBAAC,KAAD,CAAiBpI,MAAO,CAAEqE,OAAQ,UAAlC,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAM/E,MAAI,EAACC,cAAc,YAAYtM,MAAOkK,EAAMC,OAAO4R,YAAa3P,SAAS,OAAO4P,GAAG,MAAzF,SACG7I,EAAaxM,SAEhB,eAAC,KAAD,CAAM0F,MAAI,EAACC,cAAc,YAAYtM,MAAM,aAAaoM,SAAS,OAAjE,uBAIF,gBAAC,KAAD,WACE,+BACE,eAAC,KAAD,UAASsK,YAAayC,EAAmB,EAAG,OAE9C,eAAC,KAAD,CACEd,SAAU1D,EAASkB,cAAcyE,GAAG,GACpCja,QAASuZ,EACT7M,MAAO,CAAEkP,aAAc,MAAOvI,OAAQ,QACtCjH,GAAG,MAJL,0BCoEOyP,GAjH6C,SAAC,GAAuB,IAArB5H,EAAoB,EAApBA,KAAM5O,EAAc,EAAdA,QAEjE2B,EAUEiN,EAVFjN,OACA+L,EASEkB,EATFlB,aACAD,EAQEmB,EARFnB,aACAX,EAOE8B,EAPF9B,WACAmC,EAMEL,EANFK,SACAwH,EAKE7H,EALF6H,WACAC,EAIE9H,EAJF8H,SACAd,EAGEhH,EAHFgH,aACA9G,EAEEF,EAFFE,kBACA6G,EACE/G,EADF+G,aAEM5P,EAAMC,cAAND,EACAnI,EAAYC,cAAZD,QACFuS,GAAwB,OAARlB,QAAQ,IAARA,OAAA,EAAAA,EAAUkB,eAAgB,IAAI5P,IAAU0O,EAASkB,eAAiBE,IAClFsG,EAA0BxG,EAAcY,GAAG,GAE3C8C,GADQhG,qBAAWC,KACLc,EAAKiF,YACrBvT,YAAiB,IAAIC,IAAUqO,EAAKiF,YAAY+C,YAAalJ,EAAanT,UAC1E,GAEEsc,GAAqB,OAAJjI,QAAI,IAAJA,OAAA,EAAAA,EAAMgF,eACzBtT,YAAiB,IAAIC,IAAUqO,EAAKgF,cAAcgD,YAAanJ,EAAalT,UAC5E,EAEEoZ,EAAO,IAAIpT,IAAUqO,EAAKgF,eAAe3C,MAAM,IAAI1Q,IAAU0O,EAASkB,eAAe5L,IAAIqK,EAAKiF,cAC9FC,GAAiB,OAAJlF,QAAI,IAAJA,OAAA,EAAAA,EAAMgF,eAAgBtT,YAAiBqT,GAAQ,EAE1DmD,EC/CDC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,SD+CnCH,aA7ByE,EAgC/EI,YAAiBtI,EAAMkI,GAD2BK,GA/B6B,EA+BzEC,yBA/ByE,EA+B/CC,iBA/B+C,EA+B7BF,iBAAiBG,EA/BY,EA+BZA,eA/BY,KA+BIC,gBAG/Cha,YAAayD,aAAW0M,EAAa5O,SAAUkC,aAAWyM,EAAa3O,WAArGb,EAlCyE,EAkCzEA,aAAcE,EAlC2D,EAkC3DA,YAChBqZ,EAAO1D,EAAa9C,YAAa8C,EAAY,EAAG,IAAM,IACtDnF,EAAYgH,IAAiBG,IAAaC,QAE1ClH,GADM4I,YAAWxZ,EAAcE,EAAa0V,EAAagD,IAC3B,OAAR5H,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,qBAAsB,IAAItO,IAAU0O,EAASJ,qBAAuBwB,KAG1G,OACE,gBAAC1D,GAAD,CAAYG,WAAYA,GAAyB,IAAXnL,EAAtC,UACE,eAAC,GAAD,CACEiM,UAAW+I,EACXlJ,aAAcA,EACdC,aAAcA,EACdZ,WAAYA,GAAyB,IAAXnL,IAE5B,gBAAC,IAAD,CAAM0F,MAAO,CAAEqE,OAAQ,QAAUqC,cAAc,SAASxG,eAAe,eAAvE,UACE,eAAC,IAAD,UACE,eAAC,GAAD,CACEsH,oBAAqBA,EACrBF,UAAWA,EACXC,KAAMA,EACNE,kBAAmBA,MAGvB,gBAAC,IAAD,CAAMvH,eAAe,gBAAgBF,MAAO,CAAEG,UAAW,QAAzD,UACE,eAAC,IAAD,uBACA,eAAC,IAAD,CACE+G,UAAQ,EACR1G,KACc,KAAZjK,GAA8B,KAAZA,EACdsO,EAAeoL,EAAiBZ,EAAWD,EAAY,aACvDjK,EAAe8K,EAAiBZ,EAAWD,EAAY,aAL/D,SAQE,gBAAC,IAAD,CAAMnc,MAAM,aAAZ,WACIsb,GAAD,UAAoB5E,YAAamG,EAAiB,EAAG,IADxD,IAC+DvB,GAAgB,IAD/E,kBAeJ,gBAAC,IAAD,CAAMrO,eAAe,gBAAgBF,MAAO,CAAEG,UAAW,QAAzD,UACE,eAAC,IAAD,UAAOzB,EAAE,UACT,gBAAC,IAAD,WACI6P,EAAsB,IAAP4B,EADnB,IACgC5I,EAAKnB,aAAaxM,OADlD,eAIF,eAAC,IAAD,CAAM0G,GAAG,OAAOoG,cAAc,SAASuE,UAAU,OAAjD,SACGtS,EACC,eAAC,GAAD,CAAa4O,KAAMA,EAAMuB,cAAeA,IAExC,qCACE,eAACuH,EAAA,EAAD,QAMN,eAAClO,GAAA,EAAD,CACEC,eACc,KAAZ7L,GAA8B,KAAZA,EACd+Z,YAAqB/I,EAAK6B,gBAAgB7S,IAC1Cga,YAAqBhJ,EAAK6B,gBAAgB7S,IAEhD8L,cAAc,Y,sBE/DTmO,GAtDuB,SAAC,GAAkC,IAAhCjJ,EAA+B,EAA/BA,KAA+B,IAAzB9I,sBAAyB,MAAR,EAAQ,EAC9DC,EAAMC,cAAND,EACA2H,EAAgFkB,EAAhFlB,aAAcD,EAAkEmB,EAAlEnB,aAAcX,EAAoD8B,EAApD9B,WAAYtH,EAAwCoJ,EAAxCpJ,IAAKqQ,EAAmCjH,EAAnCiH,kBAAmBlI,EAAgBiB,EAAhBjB,YAElEmK,EACF/R,EADmB4H,EACjB,iHACA,iFANgE,EAQvBuH,aAAW4C,EAAgB,CAAE3C,UAAW,iBAA/EC,EAR8D,EAQ9DA,UAAWC,EARmD,EAQnDA,QAASC,EAR0C,EAQ1CA,eAR0C,EAUYyC,YAAWnJ,EAAM9I,GAAtFkS,EAVyD,EAU9DxS,IAAkCI,EAV4B,EAU5BA,iBAAkBC,EAVU,EAUVA,kBAEtDoS,EACJvK,EAAa5O,SAAb,UACG0P,IADH,kCAC8Cd,EAAa5O,QAAQoZ,IAdC,EAgB1CnE,aAC1B,eAAC1O,GAAA,EAAD,CACEE,WAAYsQ,EACZrQ,IAAKA,EACLC,UAAWM,EAAE,eAAgB,CAAE9E,OAAQyM,EAAazM,SACpDyE,SAAUuS,GAAgBzJ,IAC1B7I,mBAAoB8H,EAAaxM,OACjC2E,iBAAkBA,EAClBC,kBAAmBA,EACnBC,eAAgBA,KATbqS,EAhB+D,oBA6BtE,OACE,gBAAC,IAAD,CAAMxM,WAAW,SAASpE,eAAe,gBAAzC,UACG+N,GAAkBD,EACnB,eAAC,KAAD,CAAa+C,IAAKhD,EAAlB,SAAyC,UAAMrP,EAAjB4H,EAAmB,MAAiB,OAAzB,OACxCb,IAAetH,EACd,eAAC,KAAD,CAAU0C,MAAM,OAAO8F,OAAO,SAE9B,gBAAC,IAAD,CAAMrC,WAAW,SAAjB,UACE,eAACvR,GAAA,EAAD,CACEsM,SAAS,OACTlM,WAAYsS,EACZzS,MAAO2d,EACPzd,SAAU,EACVE,KAAK,IACLkM,MAAI,IAEN,eAAC,IAAD,CAAYhM,QAASwd,EAAmBpQ,QAAQ,OAAOsQ,MAAM,KAA7D,SACE,eAAC,IAAD,CAAe/d,MAAM,aAAa4N,MAAM,kB,qBC5B9CoQ,GAAkB3X,YAAOG,IAAPH,CAAH,iFAOf4X,GAAgD,SAAC,GAAuB,IAAD,EAApB3J,EAAoB,EAApBA,KAAM5O,EAAc,EAAdA,QACrD+F,EAAMC,cAAND,EACA+Q,EAAiB0B,cAAjB1B,aAFmE,EAMvE2B,cAFFC,EAJyE,EAIzEA,iBACQ5S,EALiE,EAKzE6S,KAAQ7S,eAIR4H,EASEkB,EATFlB,aACAD,EAQEmB,EARFnB,aACAoG,EAOEjF,EAPFiF,YACA4C,EAME7H,EANF6H,WACAC,EAKE9H,EALF8H,SACAxH,EAIEN,EAJFM,aACAuB,EAGE7B,EAHF6B,gBACA9O,EAEEiN,EAFFjN,OACAgM,EACEiB,EADFjB,YAGIiL,EAAenL,EAAa3O,QAAUkC,aAAWyM,EAAa3O,SAAW,GACzE+Z,EAAsB7X,aAAWyP,GACjCqI,EAA2BC,eAC3BC,EAAQ,UAAMC,IAAN,0BAAgCL,EAAhC,QACRM,KAAqB,UAAE9E,OAAuB+E,gBAAzB,aAAC,EAAkCC,YACxDC,EAA8B,IAAX1X,EAzBkD,EA4BzEuV,YAAiBtI,EAAMkI,GADjBM,EA3BmE,EA2BnEA,yBAA0BC,EA3ByC,EA2BzCA,iBAAkBF,EA3BuB,EA2BvBA,gBAAiBG,EA3BM,EA2BNA,eAAgBC,EA3BV,EA2BUA,gBA3BV,EA8B5BrC,aAC7CnP,EAAE,gEACF,CAAEoP,UAAW,iBAFPC,EA9BmE,EA8BnEA,UAAWC,EA9BwD,EA8BxDA,QAASC,EA9B+C,EA8B/CA,eA9B+C,EAkDvEJ,aAAWnP,EAAE,+CAAgD,CAAE9E,OAAQyM,EAAazM,SAAW,CACjGkU,UAAW,WAJAmE,EA/C8D,EA+CzElE,UACSmE,EAhDgE,EAgDzElE,QACgBmE,EAjDyD,EAiDzElE,eAKF,OACE,gBAACgD,GAAD,CAAiBvK,cAAc,SAA/B,UACE,gBAAC,IAAD,CAAMlH,GAAG,MAAMU,eAAe,gBAAgBoE,WAAW,SAAzD,UACE,gBAAC,KAAD,CAAM8N,OAAK,EAAX,UAAa1T,EAAE,gBAAf,OACA,gBAAC,IAAD,CAAM4F,WAAW,aAAjB,UACGkI,GAAeA,EAAYxC,IAAI,GAC9B,uCACE,eAACjX,GAAA,EAAD,CAASqf,OAAK,EAACpf,MA1BG,WAC5B,GAAIsT,EACF,OAAOrN,YAAiBoY,EAAkBhL,EAAanT,UAEzD,GAAI8e,EAAkB,CACpB,IAAMK,EAAgC,IAAInZ,IAAUsT,GAAa3D,MAAMwI,GACvE,OAAOpY,YAAiBoZ,EAA+BhM,EAAanT,UAEtE,OAAO+F,YAAiBuT,EAAanG,EAAanT,UAkBlBof,GAAyBpf,SAAU,EAAGE,KAAI,WAAMiT,EAAazM,UACnF,uBAAMmX,IAAKkB,EAAX,SACE,eAAC,IAAD,CAAUhf,MAAM,aAAa4N,MAAM,OAAOnB,GAAG,MAAMY,GAAG,aAI1D,eAAC,KAAD,CAAUO,MAAM,OAAO8F,OAAO,SAE/BwL,GAA6BD,QAGjCrK,GAAgBA,EAAa6B,GAAG,IAC/B,gBAAC,IAAD,CAAMlK,GAAG,MAAMU,eAAe,gBAA9B,UACE,gBAAC,KAAD,CAAMkS,OAAK,EAAX,UAAa1T,EAAE,uBAAf,OACA,eAAC,KAAD,CAAM0T,OAAK,EAAX,mBAAgBjI,YAAsBtC,EAAcxB,EAAanT,SAAU,GAA3E,YAAiFmT,EAAazM,aAGjGmW,GACC,gBAAC,IAAD,CAAMvQ,GAAG,MAAMU,eAAe,gBAAgBoE,WAAW,SAAzD,UACE,gBAAC,KAAD,CAAM8N,OAAK,EAAX,UAA8B1T,EAAjBuR,EAAmB,UAAe,aAA/C,OACCH,GAAmBE,EAClB,eAAC,IAAD,CAAM1L,WAAW,SAAjB,SACE,gBAAC,KAAD,CAAM4C,UAAQ,EAAC1G,KAAM+R,YAA4BtC,EAAiBZ,EAAWD,GAA7E,UACE,eAACrc,GAAA,EAAD,CAASqf,OAAK,EAACpf,MAAOkd,EAAiBhd,SAAU,EAAGD,MAAM,YAC1D,eAAC,KAAD,CAAMmf,OAAK,EAAC1S,GAAG,MAAMzM,MAAM,UAAUsM,cAAc,YAAnD,SACGb,EAAE,YAEL,eAAC,KAAD,CAAWgB,GAAG,MAAMzM,MAAM,iBAI9B,eAAC,KAAD,CAAU4N,MAAM,OAAO8F,OAAO,YAInCL,GACC,gBAAC,IAAD,CAAM9G,GAAG,MAAMU,eAAe,gBAAgBoE,WAAW,SAAzD,UACG2J,GAAkBD,EACnB,eAAC,KAAD,CAAa+C,IAAKhD,EAAWqE,OAAK,EAAlC,SACG1T,EAAE,qBAEL,eAAC,IAAD,CAAM4F,WAAW,SAAjB,SACE,gBAAC,KAAD,CAAM5E,GAAG,MAAM0S,OAAK,EAApB,UACG3T,EAAiB,IADpB,YAMN,eAAC,IAAD,CAAMe,GAAG,MAAMU,eAAe,WAA9B,SACE,eAAC,KAAD,CAAcM,KAAI,yCAAoC7G,aAAWyM,EAAa3O,UAAY6H,MAAM,EAAO8S,OAAK,EAA5G,SACG1T,EAAE,iBAGP,eAAC,IAAD,CAAMc,GAAG,MAAMU,eAAe,WAA9B,SACE,eAAC,KAAD,CAAcM,KAAM4F,EAAaoM,YAAalT,MAAM,EAAO8S,OAAK,EAAhE,SACG1T,EAAE,yBAGN8S,GACC,eAAC,IAAD,CAAMhS,GAAG,MAAMU,eAAe,WAA9B,SACE,eAAC,KAAD,CACEM,KAAI,UAAKiS,IAAL,oBAAkCnM,EAAcmL,EAA2BD,GAC/ElS,MAAM,EACN8S,OAAK,EAHP,SAKG1T,EAAE,qBAIR/F,GAAWkZ,GAAqBN,GAC/B,eAAC,IAAD,CAAMrR,eAAe,WAArB,SACE,gBAAC,IAAD,CACEQ,QAAQ,OACRgS,EAAE,IACF/L,OAAO,OACPrT,QAAS,kBAAMqf,aAAcpB,EAAcnL,EAAaxM,OAAQwM,EAAalT,SAAUye,IAJzF,UAME,eAAC,KAAD,CAAM1e,MAAM,UAAUoM,SAAS,OAA/B,SACGX,EAAE,qBAEL,eAAC,KAAD,CAAcgB,GAAG,iBAQdkT,OAAMC,KAAK3B,IC7KpB4B,GAA0BxZ,YAAOG,IAAPH,CAAH,2HAyCdyZ,GAjCuB,SAAC,GAAuB,IAArBxL,EAAoB,EAApBA,KAAM5O,EAAc,EAAdA,QACrC2N,EAAgBiB,EAAhBjB,YACA5H,EAAMC,cAAND,EAFmD,EAGvBlK,oBAAS,GAHc,mBAGpDwe,EAHoD,KAGxCC,EAHwC,KAKrDC,EAAoBxU,EAAE,wEACtByU,EAAkBzU,EACtB,uGAPyD,EAUZmP,aAAWvH,EAAc6M,EAAkBD,EAAmB,CAC3GpF,UAAW,WADLC,EAVmD,EAUnDA,UAAWC,EAVwC,EAUxCA,QAASC,EAV+B,EAU/BA,eAI5B,OACE,gBAAC,IAAD,WACE,gBAAC6E,GAAD,WACE,gBAAC,IAAD,CAAMxO,WAAW,SAAjB,UACGgC,EAAc,eAAC,KAAD,IAAyB,eAAC,KAAD,IACvC2H,GAAkBD,EACnB,eAAC,IAAD,CAAM+C,IAAKhD,EAAX,SACE,eAAC,IAAD,CAAUrO,GAAG,MAAMmB,MAAM,OAAO8F,OAAO,OAAO1T,MAAM,oBAGxD,eAAC,IAAD,CAAiBmgB,SAAUJ,EAAY1f,QAAS,kBAAM2f,GAAeD,IAArE,SACgBtU,EAAbsU,EAAe,OAAY,gBAG/BA,GAAc,eAAC,GAAD,CAAgBzL,KAAMA,EAAM5O,QAASA,QCjB3C0a,GAxB4C,SAAC,GAA2C,IAAD,IAAxClI,iBAAwC,SAArBmI,EAAqB,EAArBA,eACvE5U,EAAMC,cAAND,EAD4F,EAGvD6U,aAAgBD,GAArD/J,EAH4F,EAG5FA,cAAeC,EAH6E,EAG7EA,kBAEvB,OACE,qCACG2B,EACC,eAAC,KAAD,CAAUtK,MAAM,OAAO8F,OAAO,SAE9B,eAAC,IAAD,CACEwE,UAAW3B,EACX4B,QAAS5B,EAAoB,eAAC,IAAD,CAAe6B,MAAI,EAACpY,MAAM,iBAAoB,KAC3EqY,SAAU9B,EACVlW,QAASiW,EACT1I,MAAM,OALR,SAOGnC,EAAE,e,UCIE8U,GA5Be,SAACC,EAA2BC,GAAyD,IAAlCC,EAAiC,uDAAX,OAAW,EAChEnf,mBAAS,MADuD,mBACzGof,EADyG,KACvFC,EADuF,OAElErf,oBAAS,GAFyD,mBAEzGsf,EAFyG,KAExFC,EAFwF,OAGpEvf,mBAASiB,KAAKQ,MAAM+d,KAAKC,MAAQ,MAHmC,mBAGzGC,EAHyG,KAGzFC,EAHyF,KAyBhH,OApBAzgB,qBAAU,WACR,IACM0gB,EADaX,EAAoBE,EACGO,EACpCG,EAAwBX,EAAWhK,GAAG,IAAM0K,EAAuB,EAKnEE,EAAgBC,aAAY,WAFhCJ,GAAkB,SAACK,GAAD,OAAiBA,EAAc,OAEH,KAShD,OARIH,GACFR,EAAoBO,GACpBL,GAAmB,KAEnBA,GAAmB,GACnBU,cAAcH,IAGT,kBAAMG,cAAcH,MAC1B,CAACb,EAAmBE,EAAqBE,EAAqBK,EAAgBR,IAE1E,CAAEI,kBAAiBF,qB,qBChBbc,GAPoD,SAAC,GAA0B,IAAxBd,EAAuB,EAAvBA,iBAC5DlV,EAAMC,cAAND,EADmF,EAE1DpJ,aAAese,GAAxC9d,EAFmF,EAEnFA,KAAMC,EAF6E,EAE7EA,MAAOC,EAFsE,EAEtEA,QAErB,OAAO,eAAC,KAAD,CAAMqJ,SAAS,OAAf,SAAuBX,EAAE,+BAAgC,CAAEiW,IAAK7e,EAAM8e,KAAM7e,EAAO8e,OAAQ7e,OC8DrF8e,GA3D2D,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACnErW,EAAMC,cAAND,EACA/F,EAAYnC,cAAZmC,QAFwF,EAM5FyY,cAN4F,IAI9FxJ,SAAY6L,EAJkF,EAIlFA,kBAAmBC,EAJ+D,EAI/DA,WAJ+D,IAK9FpC,KAAQ0D,EALsF,EAKtFA,cAAerB,EALuE,EAKvEA,oBAEnBsB,EAAeD,EAAgB,KAAO,IAPoD,EAQjDnH,aAC7C,uCACE,eAAC,KAAD,CAAMvO,MAAI,EAACE,GAAG,MAAd,SACGd,EAAE,wBAAyB,CAAE6B,IAAK0U,MAErC,eAAC,KAAD,UACGvW,EACC,sJAIN,CAAEoP,UAAW,iBAXPC,EARwF,EAQxFA,UAAWC,EAR6E,EAQ7EA,QAASC,EARoE,EAQpEA,eARoE,EAsBlDuF,GAC5C0B,SAASzB,EAAmB,IAC5BC,EACAC,GAHMC,EAtBwF,EAsBxFA,iBAAkBE,EAtBsE,EAsBtEA,gBAOpBqB,EAAa1B,IAAsBK,GAAmBJ,EAAWhK,GAAG,GAGpE0L,EAAkBzc,GAAW8a,GAAqBK,EAYxD,OACE,gBAAC,IAAD,CACExP,WAAYyQ,EAAiB,aAAe,SAC5C7U,eAAe,gBACfwG,cAAeqO,EAAiB,SAAW,MAH7C,UAKG9G,GAAkBD,EACnB,gBAAC,KAAD,CAAa+C,IAAKhD,EAAWqE,OAAK,EAAlC,UACG+C,EAAa,IAAMF,EADtB,KAhBEE,EACKzW,EAAE,iBAAiB3F,cAGnB2F,EADL0W,EACO,sBAEF,4CAaNA,GAAmB,eAAC,GAAD,CAAoBxB,iBAAkBA,QClBjDyB,GArC+B,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,mBAAoB/M,EAAkB,EAAlBA,YAC3D7J,EAAMC,cAAND,EAIFuW,EADF7D,cADFE,KAAQ0D,cAE2B,IAC/BO,GAAaC,WAAWjN,IAAgB0M,EAAe,MAAMlV,QAAQ,GANU,EAOtC8N,aAC7C,uCACE,eAAC,KAAD,CAAMvO,MAAI,EAACE,GAAG,MAAd,SACGd,EAAE,wBAAyB,CAAE6B,IAAK0U,MAErC,eAAC,KAAD,UACGvW,EACC,sJAIN,CAAEoP,UAAW,cAXPC,EAP6E,EAO7EA,UAAWC,EAPkE,EAOlEA,QAASC,EAPyD,EAOzDA,eAc5B,OACE,uCACE,gBAAC,IAAD,CAAM3N,GAAG,OAAOgE,WAAW,SAASpE,eAAe,gBAAnD,UACG+N,GAAkBD,EACnB,eAAC,KAAD,CAAa+C,IAAKhD,EAAWqE,OAAK,EAAlC,SACG1T,EAAE,mBAEL,gBAAC,KAAD,CAAMW,SAAS,OAAf,UACGkJ,EAAcgN,EAAY,IAD7B,IACmCD,QAGrC,eAAC,GAAD,QCfAG,GAAenc,YAAOoc,IAAPpc,CAAH,+CA4MHqc,GAxMyC,SAAC,GAA8D,IAA5DpO,EAA2D,EAA3DA,KAAMqO,EAAqD,EAArDA,WAAqD,IAAzClO,uBAAyC,SAAhBzJ,EAAgB,EAAhBA,UAC9FzD,EAAWC,eACT4L,EAAiBkB,EAAjBlB,aACA1N,EAAYnC,cAAZmC,QACFkd,EAAoBC,eAJ0F,EAQhH1E,cARgH,IAMlHxJ,SAAY6L,EANsG,EAMtGA,kBAAmBC,EANmF,EAMnFA,WAC/BqC,EAPkH,EAOlHA,kBAEMrX,EAAMC,cAAND,EAT4G,GAUlGsI,eAAV7J,MAC6B6K,gBAA7BC,EAX4G,EAW5GA,aAAcC,EAX8F,EAW9FA,WAX8F,EAYlF1T,oBAAS,GAZyE,mBAY7G2T,EAZ6G,KAYlGC,EAZkG,OAa9E5T,mBAAS,IAbqE,mBAa7G+T,EAb6G,KAahGC,EAbgG,OActFhU,mBAAS,GAd6E,mBAc7GwhB,EAd6G,KAcpGrN,EAdoG,KAe5GmL,EAAoBN,GAAsB0B,SAASzB,EAAmB,IAAKC,GAA3EI,gBACFmC,EAAgBC,cAChBC,EACJF,EAAcvM,GAAG,IAAMnB,EAAcoB,YAAa,IAAIzQ,IAAUqP,GAAaqB,MAAMqM,GAAepM,YAAc,GAa5Ga,EAAsB,SAACL,GAC3B,GAAIA,EAAgB,EAAG,CACrB,IAAMC,EAAyBsL,EAAWrL,UAAU,KAAKC,aAAaH,GAChEI,EAAgBN,YAAsBG,EAAwBjE,EAAanT,SAAUmT,EAAanT,UACxGsV,EAAeiC,QAEfjC,EAAe,IAEjBG,EAAW0B,IAGP+L,EAAgB,yCAAG,WAAOC,GAAP,oBAAAhf,EAAA,sDACvB+Q,GAAa,GACPkO,EAAuBC,YAAoBF,EAAsBN,GAEjES,EAA8B,IAAItd,IAAU,MAC5Cud,EAAkB/C,EAAW7K,MAAMyN,EAAqBI,mBACrCD,EAAgBE,IAAIH,GAG3CX,EAAkBe,QACfC,cACAC,KAAK,CAAEC,KAAMpe,IACbqe,GAAG,WAAW,WACb5O,GAAa,MAEd4O,GAAG,WAAW,WACb/O,EAAavJ,EAAE,aAAcA,EAAE,0DAC/B0J,GAAa,GACbnK,IACAzD,EAASyc,aAAuB,CAAEte,gBAEnCqe,GAAG,SAAS,SAACliB,GACZsC,QAAQtC,MAAMA,GAEdoT,EAAWxJ,EAAE,SAAUA,EAAE,8BAA+B,CAAE5J,MAAOA,EAAMoiB,WACvE9O,GAAa,MAGjByN,EAAkBe,QACfO,SAASb,EAAqBI,kBAAkBnH,YAGhDuH,KAAK,CAAEC,KAAMpe,IACbqe,GAAG,WAAW,WACb5O,GAAa,MAEd4O,GAAG,WAAW,WACb/O,EAAavJ,EAAE,aAAcA,EAAE,0DAC/B0J,GAAa,GACbnK,IACAzD,EAASyc,aAAuB,CAAEte,gBAEnCqe,GAAG,SAAS,SAACliB,GACZsC,QAAQtC,MAAMA,GAEdoT,EAAWxJ,EAAE,SAAUA,EAAE,8BAA+B,CAAE5J,MAAOA,EAAMoiB,WACvE9O,GAAa,MA9CI,2CAAH,sDAmDhBgP,EAAa,yCAAG,WAAOf,GAAP,UAAAhf,EAAA,sDACpBwe,EAAkBe,QACfS,QAAQhB,EAAqB9G,YAG7BuH,KAAK,CAAEC,KAAMpe,IACbqe,GAAG,WAAW,WACb5O,GAAa,MAEd4O,GAAG,WAAW,WACb/O,EAAavJ,EAAE,WAAYA,EAAE,4CAC7B0J,GAAa,GACbnK,IACAzD,EAASyc,aAAuB,CAAEte,gBAEnCqe,GAAG,SAAS,SAACliB,GACZsC,QAAQtC,MAAMA,GAEdoT,EAAWxJ,EAAE,SAAUA,EAAE,8BAA+B,CAAE5J,MAAOA,EAAMoiB,WACvE9O,GAAa,MAnBG,2CAAH,sDAuBb6B,EAAkB,yCAAG,6BAAA5S,EAAA,sDACnBgf,EAAuB/M,YAAiB,IAAIpQ,IAAUqP,GAAclC,EAAanT,UACvFkV,GAAa,GAETV,EACF0O,EAAiBC,GAGjBe,EAAcf,GARS,2CAAH,qDAYxB,OACE,gBAAC,KAAD,CACEjX,MAAyBV,EAAlBgJ,EAAoB,UAAe,iBAC1CzJ,UAAWA,EAFb,UAIE,gBAAC,IAAD,CAAMqG,WAAW,SAASpE,eAAe,gBAAgBV,GAAG,MAA5D,UACE,gBAAC,KAAD,CAAMF,MAAI,EAAV,UAA8BZ,EAAlBgJ,EAAoB,UAAe,SAA/C,OACA,gBAAC,IAAD,CAAMpD,WAAW,SAASgT,SAAS,OAAnC,UACE,eAAC,IAAD,CACEnd,IAAG,yBAAoBR,aAAW0M,EAAa5O,SAA5C,QACHoJ,MAAO,GACP8F,OAAQ,GACRvM,IAAKiM,EAAazM,SAEpB,eAAC,KAAD,CAAM8F,GAAG,MAAMJ,MAAI,EAAnB,SACG+G,EAAazM,eAIpB,eAAC,IAAD,CACE5G,MAAOuV,EACPgP,YAjIyB,SAAC/V,GAC9B,GAAIA,EAAO,CACT,IAAMoJ,EAAiB,IAAI1R,IAAUsI,GAAOgJ,aAAagN,IAAQC,IAAIpR,EAAanT,WAC5E2X,EAAapV,KAAKQ,MAAM2U,EAAeL,UAAUqL,GAAYpL,aAAa,KAAKX,YACrFlB,EAAWkC,EAAa,IAAM,IAAMA,QAEpClC,EAAW,GAEbH,EAAehH,IA0HXkW,cAAezB,EAAcvM,GAAG,IAAjB,WAA2ByM,GAAkB,EAA7C,QACfjjB,SAAUmT,EAAanT,WAEzB,eAAC,KAAD,CAAMoN,GAAG,MAAMZ,GAAG,OAAOzM,MAAM,aAAaoM,SAAS,OAAOG,GAAG,MAA/D,SACGd,EAAE,qBAAsB,CAAEvF,QAASgR,YAAsByL,EAAYvP,EAAanT,cAErF,eAAC,KAAD,CACEwR,IAAK,EACLV,IAAK,IACLhR,MAAOgjB,EACP2B,eAAgBjN,EAChBkN,KAAK,QACLC,WAAU,UAAK7B,EAAL,KACVvR,KAAM,IAER,gBAAC,IAAD,CAAMH,WAAW,SAASpE,eAAe,gBAAgBI,GAAG,MAA5D,UACE,eAACmV,GAAD,CAAczE,MAAM,KAAK8G,GAAG,MAAMpF,EAAE,WAAWhS,QAAQ,WAAWpN,QAAS,kBAAMoX,EAAoB,KAArG,iBAGA,eAAC+K,GAAD,CAAczE,MAAM,KAAK8G,GAAG,MAAMpF,EAAE,WAAWhS,QAAQ,WAAWpN,QAAS,kBAAMoX,EAAoB,KAArG,iBAGA,eAAC+K,GAAD,CAAczE,MAAM,KAAK8G,GAAG,MAAMpF,EAAE,WAAWhS,QAAQ,WAAWpN,QAAS,kBAAMoX,EAAoB,KAArG,iBAGA,eAAC+K,GAAD,CAAczE,MAAM,KAAK8G,GAAG,MAAMpF,EAAE,WAAWhS,QAAQ,WAAWpN,QAAS,kBAAMoX,EAAoB,MAArG,SACGhM,EAAE,YAGNgJ,GAAmBoM,GAClB,eAAC,GAAD,CAAYwB,mBAAoBjP,EAAazM,OAAQ2O,YAAaA,IAEpE,eAAC,IAAD,CACE4C,UAAWhD,EACXiD,QAASjD,EAAY,eAAC,IAAD,CAAekD,MAAI,EAACpY,MAAM,iBAAoB,KACnEK,QAAS2W,EACTqB,UAAW/C,GAA2C,IAA5BiN,WAAWjN,GACrCjI,GAAG,OALL,SAOe5B,EAAZyJ,EAAc,aAAkB,cAEjCT,GACA,eAAC,IAAD,CAAQpH,GAAG,MAAM2G,GAAG,IAAIC,UAAQ,EAAC1G,KAAM2G,IAAmBzG,QAAQ,YAAlE,SACGhC,EAAE,eAAgB,CAAE9E,OAAQyM,EAAazM,eCzKrCme,GAxCyC,SAAC,GAAmC,IAAjCxQ,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBAA0B,EAIrF4J,cAFUsC,EAF2E,EAEvF9L,SAAY8L,WACZqC,EAHuF,EAGvFA,kBAEM1P,EAAiBkB,EAAjBlB,aALiF,EAMxC2R,YAAoBtE,EAAYqC,GAAzEkC,EANiF,EAMjFA,gBAAiBC,EANgE,EAMhEA,oBACnBjC,EAAgBC,cAChBiC,EAAoBlC,EAAcvM,GAAG,GACvCzQ,YAAiBgf,EAAgBzN,aAAayL,GAAgB5P,EAAanT,UAC3E,EAVqF,EAYxDwZ,aAAS,eAAC,GAAD,CAAsB3F,YAAaV,EAAazM,UAAnFwe,EAZkF,sBAahE1L,aAAS,eAAC,GAAD,CAAiBkJ,WAAYpO,EAAqBD,KAAMA,KAAnFqG,EAbkF,sBAc9DlB,aAAS,eAAC,GAAD,CAAiBkJ,WAAYqC,EAAiB1Q,KAAMA,EAAMG,iBAAe,KAAtG2Q,EAdkF,oBAgBzF,OACE,gBAAC,IAAD,CAAMnY,eAAe,gBAAgBoE,WAAW,SAAhD,UACE,gBAAC,IAAD,CAAMoC,cAAc,SAApB,UACE,eAAC3T,GAAA,EAAD,CAASsM,SAAS,OAAOC,MAAI,EAACtM,MAAOklB,EAAqBhlB,SAAU,IACpE,eAAC,KAAD,CAAMmM,SAAS,OAAOpM,MAAM,aAA5B,SACGgjB,EAAcvM,GAAG,GAChB,eAAC3W,GAAA,EAAD,CAASC,MAAOmlB,EAAmB9Y,SAAS,OAAOpM,MAAM,aAAaC,SAAU,EAAGG,OAAO,IAAID,KAAK,SAEnG,eAAC,KAAD,CAAUkN,GAAG,MAAMqG,OAAQ,GAAI9F,MAAO,UAI5C,gBAAC,IAAD,WACE,eAAC,IAAD,CAAYH,QAAQ,YAAYpN,QAAS+kB,EAAkB5Y,GAAG,MAA9D,SACE,eAAC,KAAD,CAAWxM,MAAM,UAAU4N,MAAM,WAEnC,eAAC,IAAD,CAAYH,QAAQ,YAAYpN,QAASkU,EAAoBkC,GAAG,GAAKkE,EAAiBwK,EAAtF,SACE,eAAC,IAAD,CAASnlB,MAAM,UAAU4N,MAAM,OAAO8F,OAAO,kBCXxC2R,GAtB6C,SAAC,GAKtD,IAJL/Q,EAII,EAJJA,KACAC,EAGI,EAHJA,oBACA+Q,EAEI,EAFJA,uBAEI,IADJpN,iBACI,SACI9E,EAAiBkB,EAAjBlB,aACA3H,EAAMC,cAAND,EAFJ,EAG6BgO,aAAS,eAAC,GAAD,CAAsB3F,YAAaV,EAAazM,UAAnFwe,EAHH,sBAIqB1L,aAAS,eAAC,GAAD,CAAiBkJ,WAAYpO,EAAqBD,KAAMA,KAAnFqG,EAJH,oBAcJ,OAAO,eAAC,IAAD,CAAMlH,cAAc,SAApB,SAA8ByE,EAAY,eAAC,KAAD,CAAUtK,MAAM,OAAO8F,OAAO,SAPtE4R,EACL,eAAC,GAAD,CAAkBhR,KAAMA,EAAMC,oBAAqBA,IAEnD,eAAC,IAAD,CAAQlU,QAASkU,EAAoBkC,GAAG,GAAKkE,EAAiBwK,EAA9D,SAAuF1Z,EAAE,cCpBzF8Z,GAAalf,YAAO8U,KAAP9U,CAAH,kDAmDDmf,GA3CV,SAAC,GAAiD,IAA/ClR,EAA8C,EAA9CA,KAAMgR,EAAwC,EAAxCA,uBAAwBpN,EAAgB,EAAhBA,UAC5B9E,EAA2BkB,EAA3BlB,aAAcuB,EAAaL,EAAbK,SACdlJ,EAAMC,cAAND,EACF8I,GAA8B,OAARI,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,qBAAsB,IAAItO,IAAU0O,EAASJ,qBAAuBwB,IAHtD,EAKR0P,eAApCC,EAL4C,EAK5CA,gBAAiBrF,EAL2B,EAK3BA,eAEzB,OACE,eAAC,IAAD,CAAM5M,cAAc,SAApB,SACE,gBAAC,IAAD,CAAMA,cAAc,SAApB,UACE,gBAAC,IAAD,CAAKmI,QAAQ,SAAb,UACE,gBAAC,GAAD,CACE5b,MAAOslB,EAAyB,YAAc,aAC9ChZ,cAAc,YACdD,MAAI,EACJD,SAAS,OAJX,UAMGkZ,EAAyBlS,EAAazM,OAAS8E,EAAE,SAAU,OAE9D,eAAC,GAAD,CACEzL,MAAOslB,EAAyB,aAAe,YAC/ChZ,cAAc,YACdD,MAAI,EACJD,SAAS,OAJX,SAMGkZ,EAAyB7Z,EAAE,wBAAL,UAAkC2H,EAAazM,aAGzE+e,EACC,eAAC,GAAD,CACExN,UAAWA,EACX5D,KAAMA,EACNC,oBAAqBA,EACrB+Q,uBAAwBA,IAG1B,eAAC,GAAD,CAAqBpN,UAAWA,EAAWmI,eAAgBA,UCftDsF,GA7ByD,SAAC,GAIlE,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,qBACAC,EACI,EADJA,oBAEQra,EAAMC,cAAND,EADJ,EAG2CmP,aAC7C,uCACE,eAAC9a,GAAA,EAAD,CAASsM,SAAS,OAAOrM,MAAO6lB,EAAe3lB,SAAU,EAAGoM,MAAI,EAAClM,KAAK,UACtE,eAACL,GAAA,EAAD,CAASsM,SAAS,OAAOrM,MAAO8lB,EAAsB5lB,SAAU,EAAGoM,MAAI,EAACjM,OAAO,OAC9EqL,EAAE,iCACH,eAAC,KAAD,UAAOqa,OAET,CACEjL,UAAW,eARPC,EAHJ,EAGIA,UAAWC,EAHf,EAGeA,QAASC,EAHxB,EAGwBA,eAY5B,OACE,uCACGA,GAAkBD,EACnB,eAAC,KAAD,CAAa+C,IAAKhD,EAAWqE,OAAK,EAAlC,SACE,eAACrf,GAAA,EAAD,CAASsM,SAAS,OAAOrM,MAAO6lB,UCQzBG,GAlCsB,WAAO,IAClCta,EAAMC,cAAND,EACA/F,EAAYnC,cAAZmC,QAFiC,EAMrCyY,cAFF2E,EAJuC,EAIvCA,kBAJuC,IAKvCnO,SAAYqR,EAL2B,EAK3BA,qBAAsBvF,EALK,EAKLA,WAAYwF,EALP,EAKOA,mBAE1CjD,EAAgBC,cAPmB,EAQwBiD,YAC/DxgB,EACAsgB,EACAvF,EACAqC,EACAE,EAAcpM,YALRuP,EARiC,EAQjCA,gBAAiBC,EARgB,EAQhBA,kBAAmBC,EARH,EAQGA,iBAQtCC,EAAiBL,GAAqD,IAA/BhE,SAASgE,GAEhDH,EADqB,IAAI/E,KAAKuF,GACWlZ,iBAE/C,OACE,gBAAC,IAAD,CAAMiE,WAAW,SAASpE,eAAe,gBAAzC,UACE,eAAC,KAAD,CAAMb,SAAS,OAAf,mBAA0BX,EAAE,sBAA5B,OACC0a,GACC,eAAC,GAAD,CACEP,cAAeQ,EACfP,qBAAsBQ,EACtBP,oBAAqBA,QCjBzBS,GAAiBlgB,YAAOmgB,IAAPngB,CAAH,kDACJ,qBAAG6R,UAA6B,IAAM,WA6DvCuO,GArDiC,SAAC,GAA8B,IAA5BnS,EAA2B,EAA3BA,KAAMoS,EAAqB,EAArBA,eAC/Cjb,EAAMC,cAAND,EAEA/F,GADSihB,cAATC,KACYrjB,cAAZmC,SAHoE,EAOxEyY,cAPwE,IAK1ExJ,SAAY8L,EAL8D,EAK9DA,WAAuBoG,EALuC,EAKlD3O,UAChB1M,EANkE,EAM1E6S,KAAQ7S,eAGJ8Z,EAAyB7E,GAAcA,EAAWhK,GAAG,GACrDyB,GAAa5D,EAAKK,UAAYkS,EAC9BC,EAA0Btb,GAAkBA,EAAiB,IAEnE,OAAIkb,IAAmBpB,EACd,KAIP,eAACjT,GAAD,UACE,gBAACI,GAAD,WACE,eAAC,GAAD,CACEa,UAAWgS,EACXjS,aAAW,EACXF,aAAcvM,KAAOmM,KACrBK,aAAcxM,KAAOmM,OAEvB,gBAACwT,GAAD,CAAgBrO,UAAWA,EAA3B,UACE,eAAC,GAAD,CAAQ5D,KAAMA,EAAM9I,eAAgBsb,IACpC,eAAC,IAAD,CAAKzZ,GAAG,OAAR,SACE,eAAC0Z,GAAD,MAEF,eAAC,IAAD,CAAK1Z,GAAG,MAAR,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAMA,GAAG,OAAOoG,cAAc,SAA9B,SACG/N,EACC,eAACshB,GAAD,CAAkB1S,KAAMA,EAAMgR,uBAAwBA,EAAwBpN,UAAWA,IAEzF,uCACE,eAAC,IAAD,CAAM3L,GAAG,OAAOD,cAAc,YAAYF,SAAS,OAAOpM,MAAM,aAAaqM,MAAI,EAAjF,SACGZ,EAAE,mBAEL,eAAC2R,EAAA,EAAD,YAKR,eAAC6J,GAAD,CAAY3S,KAAMA,EAAM5O,QAASA,UCvEnCwhB,I,QAAW7gB,IAAO4D,IAAV,uJAmBCid,IATY7gB,YAAOG,IAAPH,CAAH,4IAIpB8U,MAKW+L,ICSTC,ICfa9gB,YAAO6gB,GAAP7gB,CAAH,sJAIZ,qBAAG6D,MAAkBG,aAAaC,MCCnBjE,YAAO6gB,GAAP7gB,CAAH,gFAEZ,qBAAG6D,MAAkBG,aAAaC,MAKdjE,IAAO4D,IAAV,qD,OCfF5D,YAAO6gB,GAAP7gB,CAAH,qFAEZ,qBAAG6D,MAAkBG,aAAa+c,MCAnB/gB,YAAO6gB,GAAP7gB,CAAH,kDCAGA,YAAO6gB,GAAP7gB,CAAH,kDCJGA,YAAO6gB,GAAP7gB,CAAH,4PAOZ,qBAAG6D,MAAkBG,aAAa+c,MAOpB/gB,YAAOghB,IAAPhhB,CAAH,kEACA,qBAAGihB,QAAyB,iBAAmB,eCxB/BjhB,IAAO4D,IAAV,kaAEN,qBAAGC,MAAkBC,OAAOoE,SAM9C,qBAAGrE,MAAkBG,aAAaC,MAQlC,qBAAGJ,MAAkBG,aAAaE,MASVlE,IAAO4D,IAAV,uEAKI5D,IAAO4D,IAAV,2GCVA5D,IAAO4D,IAAV,gDRSCqI,YAAH,yGASfiV,GAAoBjV,YAAH,wGASGjM,IAAO4D,IAAV,4OACR,qBAAGkW,SAEVqH,YADI,0EAEAL,IAEJK,YAJI,0EAKAD,OAQR,qBAAGrd,MAAkBG,aAAaod,MAMdphB,IAAO4D,IAAV,sLAIjB,qBAAGC,MAAkBG,aAAaC,MAwBlBjE,YAAOyJ,IAAPzJ,CAAH,mKAKb,qBAAG6D,MAAkBG,aAAaod,MSnFpBphB,IAAO4D,IAAV,sGCPK5D,IAAO4D,IAAV,qJACE,qBAAGC,MAAkB0I,MAAMF,QAExB,qBAAGxI,MAAkBwI,KAAK3C,cAEjB,qBAAG7F,MAAkBC,OAAOud,gBAIjCrhB,IAAO4D,IAAV,iHACJ,qBAAGC,MAAkB0I,MAAMF,QAKhBrM,IAAO4D,IAAV,0H,StCxBfmI,K,cAAAA,E,aAAAA,Q,KAUM/L,IAAO4D,IAAV,wIAIX,qBAAGC,MAAkBG,aAAaC,MAJtC,I,euCuBMqd,GAAathB,YAAO4H,IAAP5H,CAAH,+EAuBVuhB,IAlBevhB,YAAOG,IAAPH,CAAH,yHAGd,qBAAG6D,MAAkBG,aAAa+c,MAKV/gB,YAAOG,IAAPH,CAAH,+EAKFA,YAAOG,IAAPH,CAAH,4DAKJA,YAAOG,IAAPH,CAAH,8IAuSEwhB,UA5RS,WAAO,IAAD,EACtB3d,EAAQqJ,qBAAWC,KACnBsU,EAAWC,cACTtc,EAAMC,cAAND,EAHoB,EAIClI,cAArBmC,EAJoB,EAIpBA,QAASpC,EAJW,EAIXA,QAJW,EAK6B0kB,YAAStiB,GAAnDuiB,EALa,EAKpBC,MAA8BC,EALV,EAKUA,eALV,EAMQhnB,aAAgB,EAAO,CAAEG,gBAAiB,wBANlD,mBAMrB8mB,EANqB,aAO4B7mB,mBAT1B,KAEF,mBAOrB8mB,EAPqB,KAOCC,EAPD,OAQc/mB,oBAAS,GARvB,mBAQrBgnB,EARqB,KAQNC,EARM,KAStBC,EAAcjoB,iBAAuB,MATf,EAUIW,YAAgBiR,GAASsW,MAAO,CAAEpnB,gBAAiB,sBAVvD,gCAWUC,mBAAS,KAXnB,mBAWrBonB,EAXqB,aAYQpnB,mBAAS,QAZjB,mBAYrBqnB,EAZqB,KAatBC,IAbsB,KAaXC,IAAS,CAAE9b,SAAU,OAbV,GAmBxBmR,cAnBwB,MAe1BxJ,SAAYqR,GAfc,GAedA,qBAAsBvF,GAfR,GAeQA,WAC1BjV,GAhBkB,GAgB1B6S,KAAQ7S,eACRsX,GAjB0B,GAiB1BA,kBACA1E,GAlB0B,GAkB1BA,iBAEI2K,GAAwBtI,IAAcA,GAAWhK,GAAG,GACpDqQ,GAA0Btb,IAAkBA,GAAiB,IAE7D0c,GAAQc,mBAAQ,WACpB,IAAMC,EAAWhB,EAAsBiB,KAAI,SAAC5U,GAAD,OAA0B,IAAhBA,EAAKjN,UACvC,2BAAQ4hB,GAAR,IAAkB5V,aAAa,IAElD,OAAO,YAAI4U,KACV,CAACA,IA5BwB,GA+BSe,mBAAQ,kBAAMG,IAAUjB,IAAO,SAAC5T,GAAD,OAAUA,EAAK9B,gBAAa,CAAC0V,KA/BrE,qBA+BpBkB,GA/BoB,MA+BLC,GA/BK,SAgCgBL,mBAAQ,kBAAMG,IAAUjB,IAAO,SAAC5T,GAAD,OAAUA,EAAKgH,kBAAe,CAAC4M,KAhC9E,qBAiCtBoB,IAjCsB,YAiCIN,mBAC9B,kBACAI,GAAcG,QAAO,SAACjV,GAClB,OAAIA,EAAKjB,YACA0V,GAEFzU,EAAKK,UAAY,IAAI1O,IAAUqO,EAAKK,SAASkB,eAAeqF,cAAc,QAErF,CAACkO,GAAeL,MAEZS,GAAsBR,mBAC1B,kBACEK,GAAUE,QAAO,SAACjV,GAChB,OAAIA,EAAKjB,YACA0V,GAEFzU,EAAKK,UAAY,IAAI1O,IAAUqO,EAAKK,SAASkB,eAAeqF,cAAc,QAErF,CAACmO,GAAWN,KAEkBO,GAAwBG,OAExDC,cACAC,cACAC,cAEAnpB,qBAAU,WAQH8nB,IACsB,IAAIsB,sBART,SAACC,GAAY,YACjBA,EADiB,MAEvBC,gBACRzB,GAAwB,SAAC0B,GAAD,OAA2BA,EAjE3B,QAsEuC,CAC/DC,WAAY,MACZC,UAAW,IAEIC,QAAQ1B,EAAY/nB,SACrC8nB,GAAiB,MAElB,CAACD,IAEJ,IAAM6B,GAAoBtC,EAASuC,SAASC,SAAS,WAC/CC,GAAoBzC,EAASuC,SAASC,SAAS,YAiD/CE,GAAc,WAClB,IAAIC,EAAc,GASlB,GAPEA,EADEF,IAEOH,GADKhC,EAAakB,GAA0BF,GAIvChB,EAAaoB,GAAsBH,GAG/CV,EAAa,CACf,IAAM+B,EAAiBpc,YAASqa,EAAY7iB,eAC5C2kB,EAAcA,EAAYlB,QAAO,SAACjV,GAAD,OAC/BhG,YAASgG,EAAKnB,aAAaxM,OAAOb,eAAewkB,SAASI,MAI9D,OAxDgB,SAACC,GACjB,OAAQ/B,GACN,IAAK,MAEH,OAAOgC,IACLD,GACA,SAACrW,GAAD,OAAiBA,EAAKpJ,IAAMuS,YAAWnJ,EAAMwS,IAAyB5b,IAAM,IAC5E,QAEJ,IAAK,SACH,OAAO0f,IACLD,GACA,SAACrW,GACC,OAAKA,EAAKK,UAAaL,EAAKiH,kBAGrBjH,EAAKjB,YACR6S,YACExgB,EACAsgB,GACAvF,GACAqC,GACAxO,EAAKiH,mBACL8K,iBACF/R,EAAKK,SAASyE,cAAczC,MAAMrC,EAAKiH,mBAAmB3E,WAVrD,IAYX,QAEJ,IAAK,cACH,OAAOgU,IACLD,GACA,SAACrW,GAAD,OAAiBA,EAAKjB,YAAc+K,GAAiBxH,WAAatC,EAAKiF,YAAY3C,aACnF,QAEJ,QACE,OAAO+T,GAqBJE,CAAUJ,GAAaK,MAAM,EAAGzC,IAGnC0C,GACJ,eAACpD,GAAD,UACG6C,KAActB,KAAI,SAAC5U,GAAD,OACjBA,EAAKjB,YACH,eAAC,GAAD,CAA+BiB,KAAMA,EAAMoS,eAAgB0B,GAAxC,aAEnB,eAAC,GAAD,CAA4B9T,KAAMA,EAAM5O,QAASA,GAAlC4O,EAAKjN,aAzJA,IA+JWmjB,KACRQ,eACzBC,IAjKsB,GAgKpBC,KAhKoB,GAgKdC,IAhKc,GAgKTC,QACH/B,GAAUE,QAAO,SAACjV,GAAD,OAAUA,EAAK+W,YAAU,IACpD9R,GAAc0R,GAAQ1R,YAAcvT,YAAiB,IAAIC,IAAUglB,GAAQ1R,YAAY+C,YAAa2O,GAAQ7X,aAAanT,UAAY,EACrIsc,IAAwB,OAAP0O,SAAO,IAAPA,QAAA,EAAAA,GAAS3R,eAAgBtT,YAAiB,IAAIC,IAAUglB,GAAQ3R,cAAcgD,YAAa2O,GAAQ9X,aAAalT,UAAY,EAnKvH,GAoKQgD,YAAagoB,GAAQ7X,aAAa5O,QAAQlB,GAAU2nB,GAAQ9X,aAAa3O,QAAQlB,IAA9GK,GApKqB,GAoKrBA,aAAcE,GApKO,GAoKPA,YACZ,EAAGsZ,YAAWxZ,GAAcE,GAAa0V,GAAagD,IAE/D,OACE,uCACE,eAACnM,EAAA,EAAD,UACE,eAAC,IAAD,CACEiB,WAAW,SACXpE,eAAe,eACfwG,cAAe,CAAC,SAAU,KAAM,OAChC1G,MAAO8b,GAAW,CAAEpV,cAAe,kBAAqB,CAAE6X,UAAW,OAAQ9S,WAAY,SACzF+S,QAAQ,OALV,SAOE,gBAAC,IAAD,CAAM9X,cAAc,SAAS+X,KAAK,IAAlC,UACE,gBAAC,IAAD,CACEve,eAAe,eACfwG,cAAc,SACd8X,QAAQ,qBACR/e,GAAI,CAAC,MAAO,GACZO,MAAO,CAAE0e,aAAa,aAAD,OAAevhB,EAAMC,OAAOC,aALnD,UAOE,eAAC,IAAD,CAAMpK,MAAOkK,EAAMC,OAAOyE,QAASxC,SAAS,OAAOC,MAAI,EAAvD,0BAGA,eAAC,IAAD,CAAMrM,MAAM,OAAOqM,MAAI,EAACU,MAAO8b,GAAW,CAAEzc,SAAU,QAAW,CAAEA,SAAU,QAA7E,sDAIF,eAACwb,GAAD,CAAS7a,MAAO,CAAEa,MAAO,QAAUwD,OAAO,mBAAmBnE,eAAe,gBAA5E,SACE,gBAAC,IAAD,CAAMwG,cAAc,SAApB,UACE,eAAC,IAAD,CAAMrH,SAAS,OAAOC,MAAI,EAACrM,MAAOkK,EAAMC,OAAO4R,YAA/C,8BAGA,gBAAC,IAAD,CAAM3P,SAAS,OAAf,cAAwBmN,GAAxB,IAAsC0R,GAAQ7X,aAAazM,sBAkBrE,gBAAC+kB,EAAA,EAAD,WAsBGnB,IACC,uCACE,eAAC,IAAD,CAAUxd,MAAO,CAAEiL,UAAW,UAE9B,eAAC,IAAD,CAAM/K,eAAe,gBAAgBF,MAAO,CAAEqE,OAAQ,QAAtD,SACE,eAAC,IAAD,CAAMqC,cAAc,SAASjH,GAAI,CAAC,MAAO,GAAzC,SACE,eAAC,IAAD,CAASuR,MAAM,KAAK/d,MAAM,OAA1B,SACGyL,EAAE,mEAQZ2e,IACC,uCACE,eAAC,IAAD,CAAUrd,MAAO,CAAEiL,UAAW,UAE9B,eAAC,IAAD,CAAM/K,eAAe,gBAAgBF,MAAO,CAAEqE,OAAQ,QAAtD,SACE,eAAC,IAAD,CAAMqC,cAAc,SAASjH,GAAI,CAAC,MAAO,GAAzC,SACE,eAAC,IAAD,CAASuR,MAAM,KAAK/d,MAAM,OAA1B,SACGyL,EAAE,wFASZsf,GAED,sBAAKjN,IAAK2K","file":"static/js/8.6d679d11.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport const useTokenPrice = (tokenAddress: string) => {\r\n  const MoralisWeb3Api = useMoralisWeb3Api()\r\n  const { chainId } = useWeb3React()\r\n\r\n  let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\r\n  switch (chainId){\r\n    case 1:\r\n      chainName = \"eth\"\r\n      break\r\n    case 3:\r\n      chainName = \"ropsten\"\r\n      break\r\n    case 56:\r\n      chainName = \"bsc\"\r\n      break\r\n    case 97:\r\n      chainName = \"bsc testnet\"\r\n      break\r\n    default:\r\n      chainName = \"eth\"\r\n      break\r\n  }\r\n\r\n  const [tokenPrice, setTokenPrice] = useState(0)\r\n  const web3 = useWeb3()\r\n\r\n  let _tokenAddress\r\n  try{\r\n    if (tokenAddress === undefined) throw new Error(\"Token address undefined\");\r\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\r\n  }\r\n  catch{\r\n      console.error('Invalid staking and reward address')\r\n  }\r\n\r\n  useEffect(() => {\r\n      const fetchData = async () => {\r\n      try {\r\n          const result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _tokenAddress})\r\n          const _tokenPrice = result.usdPrice\r\n          \r\n          setTokenPrice(_tokenPrice)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\r\n\r\n  return {tokenPrice}\r\n}\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n\r\n    let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\r\n    switch (chainId){\r\n      case 1:\r\n        chainName = \"eth\"\r\n        break\r\n      case 3:\r\n        chainName = \"ropsten\"\r\n        break\r\n      case 56:\r\n        chainName = \"bsc\"\r\n        break\r\n      case 97:\r\n        chainName = \"bsc testnet\"\r\n        break\r\n      default:\r\n        chainName = \"eth\"\r\n        break\r\n    }\r\n\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try{\r\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let result\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _stakingTokenAddress})\r\n            const _stakingTokenPrice = result.usdPrice\r\n\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\r\n            const _rewardTokenPrice = result.usdPrice\r\n            \r\n            setStakingPrice(_stakingTokenPrice)\r\n            setRewardPrice(_rewardTokenPrice)\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName])\r\n\r\n    return {stakingPrice, rewardPrice}\r\n}\r\n\r\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, lpAddress: string) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n\r\n    let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\r\n    switch (chainId){\r\n      case 1:\r\n        chainName = \"eth\"\r\n        break\r\n      case 3:\r\n        chainName = \"ropsten\"\r\n        break\r\n      case 56:\r\n        chainName = \"bsc\"\r\n        break\r\n      case 97:\r\n        chainName = \"bsc testnet\"\r\n        break\r\n      default:\r\n        chainName = \"eth\"\r\n        break\r\n    }\r\n    \r\n    // const options = { chain: chainName, address: _tokenAddress };\r\n    // const result = await MoralisWeb3Api.token.getTokenPrice(options)\r\n\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    let _lpAddress\r\n    try{\r\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n        _lpAddress = web3.utils.toChecksumAddress(lpAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n\r\n            let _totalToken1InPool\r\n            let _totalToken2InPool\r\n\r\n            let result\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\r\n            const _token1Price = result.usdPrice\r\n\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\r\n            const _token2Price = result.usdPrice\r\n            \r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\r\n            const _rewardTokenPrice = result.usdPrice\r\n\r\n            result = await MoralisWeb3Api.account.getTokenBalances({chain: chainName, address: _lpAddress, token_addresses: [_token1Address,_token2Address]})\r\n            if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()){\r\n                _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), result[0].decimals)\r\n            }\r\n            else{\r\n                _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), result[0].decimals)\r\n            }\r\n\r\n            if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()){\r\n                _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), result[1].decimals)\r\n            }\r\n            else{\r\n                _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), result[1].decimals)\r\n            }\r\n\r\n            setLPPrice( ((_totalToken1InPool * _token1Price ) + (_totalToken2InPool * _token2Price )) / lpTotalSupply )\r\n            setRewardPrice(_rewardTokenPrice)\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _lpAddress, chainName, MoralisWeb3Api])\r\n\r\n    return {LPPrice, rewardPrice}\r\n}\r\n\r\nexport default usePoolPrice","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n    // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n                                                 max,\r\n                                                 // symbol,\r\n                                                 onChange,\r\n                                                 onSelectMax,\r\n                                                 value,\r\n                                                 // addLiquidityUrl,\r\n                                                 // inputTitle,\r\n                                                 decimals = 18,\r\n                                               }) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems='flex-end' justifyContent='space-around'>\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode='decimal'\r\n            step='any'\r\n            min='0'\r\n            onChange={onChange}\r\n            placeholder='0'\r\n            value={value}\r\n          />\r\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n\r\n\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { ChainId, CurrencyAmount, JSBI, Percent } from '@pancakeswap-libs/sdk'\r\nimport { BASE_BSC_SCAN_URLS, BASE_ETH_SCAN_URLS } from '../config'\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function getBscScanLink(\r\n  data: string | number,\r\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\r\n    }\r\n    case 'block': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\r\n    }\r\n    case 'countdown': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\r\n    }\r\n    default: {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\r\n    }\r\n  }\r\n}\r\nexport function getEthScanLink(\r\n  data: string | number,\r\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${BASE_ETH_SCAN_URLS[chainId]}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${BASE_ETH_SCAN_URLS[chainId]}/token/${data}`\r\n    }\r\n    case 'block': {\r\n      return `${BASE_ETH_SCAN_URLS[chainId]}/block/${data}`\r\n    }\r\n    case 'countdown': {\r\n      return `${BASE_ETH_SCAN_URLS[chainId]}/block/countdown/${data}`\r\n    }\r\n    default: {\r\n      return `${BASE_ETH_SCAN_URLS[chainId]}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address)\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-right: 0px;\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n    margin-right: 16px;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import styled, { css, keyframes } from 'styled-components'\r\nimport { Card } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst PromotedGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n  max-width: 450px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: baseline;\r\n  position: relative;\r\n  justify-content: space-around;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin: 0 12px 46px;\r\n  }\r\n`\r\n\r\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\r\n  background: ${({ theme }) => theme.card.background};\r\n\r\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\r\n`\r\n\r\nexport default StyledCard\r\n","import React from 'react'\r\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\r\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\r\n\r\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\r\n}\r\n\r\nexport default CakeVaultTokenPairImage\r\n","import React, { useContext } from 'react'\r\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\r\n\r\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n//  background: ${({ isFinished, background, theme }) =>\r\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\r\n// border-radius: ${({ theme, isPromotedPool }) =>\r\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\r\nconst StyledCardHeader: React.FC<{\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  isAutoVault?: boolean\r\n  isFinished?: boolean\r\n  isStaking?: boolean\r\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\r\n  const { t } = useTranslation()\r\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\r\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\r\n  const background = 'cardHeader'\r\n\r\n/*\r\n  const getHeadingPrefix = () => {\r\n    if (isAutoVault) {\r\n      // vault\r\n      return t('Auto')\r\n    }\r\n    if (isCakePool) {\r\n      // manual cake\r\n      return t('Manual')\r\n    }\r\n    // all other pools\r\n    return t('Earn')\r\n  }\r\n*/\r\n\r\n  const getCardTitle = () => {\r\n    if (isAutoVault) {\r\n      return t('Automatic restaking')\r\n    }\r\n    if (isCakePool) {\r\n      return t(`Stake CAKE to Earn CAKE`)\r\n    }\r\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\r\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Wrapper isFinished={isFinished} background={background}>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\r\n          <Heading color='text' size=\"lg\">\r\n            {`Stake ${stakingToken.symbol}`} <br/>\r\n            to <br />\r\n            {`Earn ${earningToken.symbol}`}\r\n          </Heading>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <CakeVaultTokenPairImage width={64} height={64} />\r\n        ) : (\r\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\r\n        )}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StyledCardHeader\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\ninterface NotEnoughTokensModalProps {\r\n  tokenSymbol: string\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Modal\r\n      title={t('%symbol% required', { symbol: tokenSymbol })}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Text color=\"failure\" bold>\r\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\r\n      </Text>\r\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\r\n      <Text>\r\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\r\n          symbol: tokenSymbol,\r\n        })}\r\n      </Text>\r\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\r\n        {t('Buy')} {tokenSymbol}\r\n      </Button>\r\n      <StyledLink href=\"https://yieldwatch.net\" external>\r\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\r\n          {t('Locate Assets')}\r\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\r\n        </Button>\r\n      </StyledLink>\r\n      <Button variant=\"text\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default NotEnoughTokensModal\r\n","import React, { useEffect, useState, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\r\nimport { Modal, Text, Flex, Image, Button } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useSousStake } from 'hooks/useStake'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\r\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onSelectMax?: () => void\r\n  onDismiss?: () => void\r\n  isApprove?: boolean\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst ModalBody = styled(Flex)`\r\n  width: 450px;\r\n  margin-top: -20px;\r\n  padding: 20px;\r\n`\r\nconst StakeActionModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n  isApprove = false,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const approveBtn = useRef(null)\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useSousStake(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  // const [approvedTx, setApprovedTx] = useState(false)\r\n  const [isApproved, setIsApproved] = useState(isApprove)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const userLimit = stakingLimit.minus(userData.stakedBalance)\r\n  const totalStakedTokens = userData?.stakedBalance\r\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\r\n    : BIG_ZERO\r\n  const numTotalStaked = totalStakedTokens\r\n  const totalStakingTokens = userData?.stakingTokenBalance\r\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\r\n    : BIG_ZERO\r\n  const remainingStakeTokens = userData?.stakedBalance\r\n    ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals)\r\n    : BIG_ZERO\r\n  const totalAllowance = useTokenAllowance(stakingToken.address[pool.chainId], pool.contractAddress[pool.chainId])\r\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(\r\n    stakingTokenContract,\r\n    sousId,\r\n    earningToken.symbol,\r\n    getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals),\r\n  )\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\r\n  }\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\r\n  }, [\r\n    requestedApproval,\r\n    stakeAmount,\r\n    stakingLimit,\r\n    userData,\r\n    stakingToken,\r\n    isRemovingStake,\r\n    totalAllowance,\r\n    setHasReachedStakedLimit,\r\n  ])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // const handleApproveClick = async () => {\r\n  //   setApprovedTx(true)\r\n  // }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        setIsApproved(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      <ModalBody flexDirection=\"column\">\r\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\r\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n            {t('Max stake for this pool: %amount% %token%', {\r\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n              token: stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        )} */}\r\n\r\n        <Flex justifyContent=\"center\">\r\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center' }}>\r\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\r\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\r\n              tokensymbol: pool.stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        </Flex>\r\n\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text bold>Stake amount</Text>\r\n          {/* <Flex alignItems=\"center\">\r\n            <Image\r\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n              width={24}\r\n              height={24}\r\n              alt={stakingToken.symbol}\r\n            />\r\n            <Text ml=\"4px\" bold>\r\n              {stakingToken.symbol}\r\n            </Text>\r\n          </Flex> */}\r\n        </Flex>\r\n        <ModalInput\r\n          value={stakeAmount}\r\n          onSelectMax={() => {\r\n            handleChangePercent(100)\r\n          }}\r\n          onChange={(e) => handleStakeInputChange(e.currentTarget.value)}\r\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\r\n          symbol={stakingToken.symbol}\r\n          addLiquidityUrl=\"\"\r\n        />\r\n\r\n        {/* Fetch and display actual balance */}\r\n\r\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\r\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\r\n        </Text>\r\n\r\n        <div>\r\n          <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\r\n            {/* {t('Balance: %balance%', {\r\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n          })} */}\r\n            Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\r\n          </Text>\r\n        </div>\r\n\r\n        {/* {hasReachedStakeLimit && (\r\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n            {t('Maximum total stake: %amount% %token%', {\r\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n              token: stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        )} */}\r\n        {/* <Flex>\r\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\r\n          {t('Balance: %balance%', {\r\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n          })}\r\n        </Text>\r\n        </Flex> */}\r\n        {/* <Slider\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handleChangePercent}\r\n          name=\"stake\"\r\n          valueLabel={`${percent}%`}\r\n          step={1}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n        </Flex> */}\r\n\r\n        <Flex justifyContent=\"space-between\" marginTop=\"17px\" marginBottom=\"17px\">\r\n          <Text bold>Approved Tokens</Text>\r\n          <Text>\r\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Flex style={{ width: '100%' }}>\r\n          <Button\r\n            isLoading={pendingTx}\r\n            // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            // onClick={handleApproveClick}\r\n            // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\r\n            onClick={handleApprove}\r\n            disabled={!stakeAmount || isApproved}\r\n            mt=\"24px\"\r\n            fullWidth\r\n            marginRight=\"20px\"\r\n          >\r\n            Approve\r\n          </Button>\r\n          <Button\r\n            isLoading={pendingTx}\r\n            endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            onClick={handleConfirmClick}\r\n            disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\r\n            // disabled={!approvedTx}\r\n            mt=\"24px\"\r\n            fullWidth\r\n            marginLeft=\"20px\"\r\n          >\r\n            {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\r\n            {t('Deposit')}\r\n          </Button>\r\n        </Flex>\r\n        {/* {!isRemovingStake && (\r\n          <StyledLink external href={BASE_EXCHANGE_URL}>\r\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\r\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n            </Button>\r\n          </StyledLink>\r\n        )} */}\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeActionModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport BigNumber from 'bignumber.js'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { Pool } from 'state/types'\r\n\r\nimport StakeTokenModal from './Stake'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\nimport { BASE_SWAP_URL } from '../../../../../config'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n  justify-content: center;\r\n\r\n  & > * {\r\n    flex: 1;\r\n    margin: 0px 10px;\r\n  }\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  addTokenUrl,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n}) => {\r\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\r\n  const { chainId } = useWeb3React()\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\r\n  const { toastSuccess, toastError } = useToast()\r\n  const totalStakingTokens = userData?.stakingTokenBalance\r\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\r\n    : 0\r\n  const totalStakedTokens = userData?.stakedBalance\r\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\r\n    : 0\r\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\r\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\r\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\r\n  const [onPresentStakeAction] = useModal(\r\n    <StakeTokenModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // harvesting\r\n    try {\r\n      await onReward()\r\n      toastSuccess(\r\n        `${t('Claimed')}!`,\r\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n      )\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleUnstake = async () => {\r\n    setPendingTx(true)\r\n    // unstaking\r\n    try {\r\n      await onUnstake(\r\n        getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18),\r\n        stakingToken.decimals,\r\n      )\r\n      toastSuccess(\r\n        `${t('Unstaked')}!`,\r\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\r\n          symbol: earningToken.symbol,\r\n        }),\r\n      )\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      <Flex flexDirection=\"column\" style={{ marginTop: '-50px', width: '550px' }}>\r\n        <Text fontSize=\"20px\" marginBottom=\"10px\" marginLeft=\"10px\">\r\n          Account Info\r\n        </Text>\r\n        <Text fontSize=\"15px\" marginLeft=\"10px\">\r\n          Staking, balances & earnings\r\n        </Text>\r\n\r\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\r\n        <StyledFlex marginTop=\"21px\">\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"24px\">{formatNumber(totalStakingTokens, 2, 5)}</Text>\r\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\r\n              {pool.stakingToken.symbol} Tokens\r\n            </Text>\r\n            <Button\r\n              disabled={isAddTokenDisabled}\r\n              fullWidth\r\n              className=\"disabled\"\r\n              onClick={() => {\r\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[chainId]}`, '_blank')\r\n              }}\r\n            >\r\n              Add More\r\n            </Button>\r\n          </Flex>\r\n          {pool.stakingToken.symbol !== pool.earningToken.symbol && (\r\n            <Flex flexDirection=\"column\">\r\n              <Text fontSize=\"24px\">{formatNumber(totalEarningTokens, 2, 5)}</Text>\r\n              <Text color=\"textSubtle\" marginBottom=\"24px\">\r\n                {pool.earningToken.symbol} Tokens\r\n              </Text>\r\n              <Button\r\n                fullWidth\r\n                onClick={() => {\r\n                  window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[chainId]}`, '_blank')\r\n                }}\r\n              >\r\n                Add More\r\n              </Button>\r\n            </Flex>\r\n          )}\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"24px\">{formatNumber(totalStakedTokens, 2, 5)}</Text>\r\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\r\n              {pool.stakingToken.symbol} Staked\r\n            </Text>\r\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>\r\n              Stake Tokens\r\n            </Button>\r\n          </Flex>\r\n        </StyledFlex>\r\n\r\n        <StyledFlex>\r\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\r\n        </StyledFlex>\r\n        <StyledFlex marginTop=\"30px\" marginBottom=\"20px\">\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"24px\">{formatNumber(rewardRate, 2, 10)}</Text>\r\n            <Text color=\"textSubtle\" fontSize=\"17px\">\r\n              Your Rate {pool.earningToken.symbol}/block\r\n            </Text>\r\n          </Flex>\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"24px\">{formatNumber(totalEarnedTokens, 2, 5)}</Text>\r\n            <Text color=\"textSubtle\" fontSize=\"17px\">\r\n              {pool.earningToken.symbol} Token Earnings\r\n            </Text>\r\n          </Flex>\r\n          <Flex\r\n            flexDirection=\"column\"\r\n            mb=\"16px\"\r\n            marginLeft=\"5px\"\r\n            onMouseEnter={() => setActiveSelect(true)}\r\n            onMouseLeave={() => setActiveSelect(false)}\r\n          >\r\n            {userData.stakedBalance.eq(0) ? (\r\n              <Button disabled fullWidth>\r\n                {' '}\r\n                Withdraw{' '}\r\n              </Button>\r\n            ) : (\r\n              <Dropdown\r\n                position=\"top\"\r\n                target={\r\n                  // Disable component if total staked tokens is empty\r\n                  <Button fullWidth variant=\"secondary\" disabled={pool.isWithdrawDisabled}>\r\n                    <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\r\n                  </Button>\r\n                }\r\n              >\r\n                {/* Disable Claim & Withdraw if no staked tokens */}\r\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\r\n                  Claim\r\n                </Button>\r\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\r\n                  Claim & Withdraw\r\n                </Button>\r\n              </Dropdown>\r\n            )}\r\n          </Flex>\r\n        </StyledFlex>\r\n        {!!pool.isWithdrawDisabled && (\r\n          <Text className=\"yellow\" fontSize=\"15px\" marginLeft=\"10px\">\r\n            MGG Withdrawals and Deposits are locked for 48 hours during launchpad\r\n          </Text>\r\n        )}\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n","import React from 'react'\r\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../Modals/StakeModal'\r\n\r\ninterface StakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  isBnbPool: boolean\r\n  isStaked: ConstrainBoolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst StakeAction: React.FC<StakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakedBalance,\r\n  isBnbPool,\r\n  isStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  const renderStakeAction = () => {\r\n    // isStaked ? (\r\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n    //     <Flex flexDirection=\"column\">\r\n    //       <>\r\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\r\n    //         {stakingTokenPrice !== 0 && (\r\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\r\n    //             <Balance\r\n    //               fontSize=\"12px\"\r\n    //               color=\"textSubtle\"\r\n    //               decimals={2}\r\n    //               value={stakedTokenDollarBalance}\r\n    //               prefix=\"~\"\r\n    //               unit=\" USD\"\r\n    //             />\r\n    //           </Text>\r\n    //         )}\r\n    //       </>\r\n    //     </Flex>\r\n    //     <Flex>\r\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\r\n    //       </IconButton>\r\n    //       {reachStakingLimit ? (\r\n    //         <span ref={targetRef}>\r\n    //           <IconButton variant=\"secondary\" disabled>\r\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n    //           </IconButton>\r\n    //         </span>\r\n    //       ) : (\r\n    //         <IconButton\r\n    //           variant=\"secondary\"\r\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\r\n    //           disabled={isFinished}\r\n    //         >\r\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n    //         </IconButton>\r\n    //       )}\r\n    //     </Flex>\r\n    //     {tooltipVisible && tooltip}\r\n    //   </Flex>\r\n    // ) :\r\n\r\n    // Reserve function for future use\r\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\r\n    return (\r\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={onPresentStake}>\r\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake'}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      {isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport ApprovalAction from './ApprovalAction'\r\nimport StakeActions from './StakeActions'\r\nimport HarvestActions from './HarvestActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  & > * {\r\n    flex: 1;\r\n    height: 60px;\r\n  }\r\n`\r\n\r\ninterface CardActionsProps {\r\n  pool: Pool\r\n  stakedBalance: BigNumber\r\n}\r\n\r\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\r\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\r\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const { t } = useTranslation()\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  const needsApproval = !allowance.gt(0) && !isBnbPool\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isLoading = !userData\r\n\r\n  const totalStaked = userData?.stakedBalance\r\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\r\n    : 0\r\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        {harvest && (\r\n          <>\r\n            {/* <Flex justifyContent=\"space-between\">\r\n              <Box display=\"inline\">\r\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\r\n                  {`${stakingToken.symbol} Staked`}\r\n                </Text>\r\n              </Box>\r\n              <Box display=\"inline\">\r\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\r\n                  {`${earningToken.symbol} Earned`}\r\n                </Text>\r\n              </Box>\r\n            </Flex> */}\r\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\r\n              <Box display=\"inline\">\r\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\r\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n                  {!isComingSoon && formatNumber(totalStaked, 2, 5)} {isComingSoon && '-'} {stakingToken.symbol}\r\n                </Text>\r\n              </Box>\r\n              <Box display=\"inline\">\r\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\r\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n                  {!isComingSoon && formatNumber(totalEarned, 2, 5)} {isComingSoon && '-'} {earningToken.symbol}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n          </>\r\n        )}\r\n        {/* <Box display=\"inline\">\r\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box> */}\r\n        <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\r\n          <StakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            stakedBalance={stakedBalance}\r\n            isBnbPool={isBnbPool}\r\n            isStaked={isStaked}\r\n          />\r\n          {/* <HarvestActions\r\n              earnings={earnings}\r\n              earningToken={earningToken}\r\n              sousId={sousId}\r\n              earningTokenPrice={earningTokenPrice}\r\n              isBnbPool={isBnbPool}\r\n              isLoading={isLoading}\r\n            /> */}\r\n        </StyledFlex>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport {\r\n  ActionContainer,\r\n  ActionContent,\r\n  ActionTitles,\r\n  Earned,\r\n} from '../../../Farms/components/FarmTable/Actions/styles'\r\n\r\ninterface StakeActionsProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst ClaimAction: React.FC<StakeActionsProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  addTokenUrl,\r\n}) => {\r\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const theme = useContext(ThemeContext)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // harvesting\r\n    try {\r\n      await onReward()\r\n      toastSuccess(\r\n        `Claimed!`,\r\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n      )\r\n      setPendingTx(false)\r\n    } catch (e) {\r\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\r\n      console.error(e)\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\r\n          {earningToken.symbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          Earned\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\r\n        </div>\r\n        <Button\r\n          disabled={userData.stakedBalance.eq(0)}\r\n          onClick={handleHarvestConfirm}\r\n          style={{ borderRadius: '3px', height: '40px' }}\r\n          ml=\"4px\"\r\n        >\r\n          Claim\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default ClaimAction\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { usePoolPrice } from 'hooks/price'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBscScanAddressUrl, getEthScanAddressUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { getBscScanLink, getEthScanLink } from 'utils'\r\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\r\nimport { StyledCard, StyledCardInner } from './StyledCard'\r\nimport CardFooter from './CardFooter'\r\nimport StyledCardHeader from './StyledCardHeader'\r\nimport CardActions from './CardActions'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport ClaimAction from '../ClaimAction'\r\n\r\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    isFinished,\r\n    userData,\r\n    startBlock,\r\n    endBlock,\r\n    isComingSoon,\r\n    stakingTokenPrice,\r\n    poolCategory,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const { chainId } = useWeb3React()\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const accountHasStakedBalance = stakedBalance.gt(0)\r\n  const theme = useContext(ThemeContext)\r\n  const totalStaked = pool.totalStaked\r\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\r\n    : 0\r\n\r\n  const rewardPerBlock = pool?.tokenPerBlock\r\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\r\n    : 0\r\n\r\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\r\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { stakingPrice, rewardPrice } = usePoolPrice(getAddress(stakingToken.address), getAddress(earningToken.address))\r\n  const rate = rewardRate ? formatNumber(rewardRate, 2, 10) : '-'\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const isLoading = !userData\r\n\r\n  return (\r\n    <StyledCard isFinished={isFinished && sousId !== 0}>\r\n      <StyledCardHeader\r\n        isStaking={accountHasStakedBalance}\r\n        earningToken={earningToken}\r\n        stakingToken={stakingToken}\r\n        isFinished={isFinished && sousId !== 0}\r\n      />\r\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\r\n        <Flex>\r\n          <ClaimAction\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            isBnbPool={isBnbPool}\r\n            pool={pool}\r\n            stakingTokenPrice={stakingTokenPrice}\r\n          />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\r\n          <Text>Duration</Text>\r\n          <Link\r\n            external\r\n            href={\r\n              chainId === 56 || chainId === 97\r\n                ? getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')\r\n                : getEthScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')\r\n            }\r\n          >\r\n            <Text color=\"textSubtle\">\r\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\r\n            </Text>\r\n          </Link>\r\n        </Flex>\r\n\r\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\r\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\r\n            <Text>Total Deposit</Text>\r\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\r\n          </Flex> */}\r\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\r\n              <Text>Reward per block</Text>\r\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\r\n          </Flex> */}\r\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\r\n          <Text>{t('Rate')}</Text>\r\n          <Text>\r\n            {!isComingSoon ? rate : '-'} {pool.earningToken.symbol}/block\r\n          </Text>\r\n        </Flex>\r\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\r\n          {account ? (\r\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\r\n          ) : (\r\n            <>\r\n              <UnlockButton />\r\n            </>\r\n          )}\r\n        </Flex>\r\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\r\n        {/* <CardFooter pool={pool} account={account} /> */}\r\n        <DetailsSection\r\n          stakingAddress={\r\n            chainId === 56 || chainId === 97\r\n              ? getBscScanAddressUrl(pool.contractAddress[chainId])\r\n              : getEthScanAddressUrl(pool.contractAddress[chainId])\r\n          }\r\n          lpInfoAddress=\"\"\r\n        />\r\n      </Flex>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default PoolCard\r\n","import { useEffect, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { setBlock } from '.'\r\nimport { State } from '../types'\r\n\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n","import React from 'react'\r\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { Pool } from 'state/types'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { getAprData } from 'views/Pools/helpers'\r\n\r\ninterface AprRowProps {\r\n  pool: Pool\r\n  performanceFee?: number\r\n}\r\n\r\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\r\n  const { t } = useTranslation()\r\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\r\n\r\n  const tooltipContent = isAutoVault\r\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\r\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink =\r\n    stakingToken.address &&\r\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\r\n      {isFinished || !apr ? (\r\n        <Skeleton width=\"82px\" height=\"32px\" />\r\n      ) : (\r\n        <Flex alignItems=\"center\">\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n            bold\r\n          />\r\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AprRow\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport {\r\n  Flex,\r\n  MetamaskIcon,\r\n  Text,\r\n  TooltipText,\r\n  LinkExternal,\r\n  TimerIcon,\r\n  Skeleton,\r\n  useTooltip,\r\n  Button,\r\n  Link,\r\n  HelpIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport Balance from 'components/Balance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\n\r\ninterface ExpandedFooterProps {\r\n  pool: Pool\r\n  account: string\r\n}\r\n\r\nconst ExpandedWrapper = styled(Flex)`\r\n  svg {\r\n    height: 14px;\r\n    width: 14px;\r\n  }\r\n`\r\n\r\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\r\n  const { t } = useTranslation()\r\n  const { currentBlock } = useBlock()\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const {\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    sousId,\r\n    isAutoVault,\r\n  } = pool\r\n\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <ExpandedWrapper flexDirection=\"column\">\r\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text small>{t('Total staked')}:</Text>\r\n        <Flex alignItems=\"flex-start\">\r\n          {totalStaked && totalStaked.gte(0) ? (\r\n            <>\r\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n              <span ref={totalStakedTargetRef}>\r\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <Skeleton width=\"90px\" height=\"21px\" />\r\n          )}\r\n          {totalStakedTooltipVisible && totalStakedTooltip}\r\n        </Flex>\r\n      </Flex>\r\n      {stakingLimit && stakingLimit.gt(0) && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\r\n          <Text small>{t('Max. stake per user')}:</Text>\r\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n        </Flex>\r\n      )}\r\n      {shouldShowBlockCountdown && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n          {blocksRemaining || blocksUntilStart ? (\r\n            <Flex alignItems=\"center\">\r\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n                  {t('Blocks')}\r\n                </Text>\r\n                <TimerIcon ml=\"4px\" color=\"primary\" />\r\n              </Link>\r\n            </Flex>\r\n          ) : (\r\n            <Skeleton width=\"54px\" height=\"21px\" />\r\n          )}\r\n        </Flex>\r\n      )}\r\n      {isAutoVault && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          {tooltipVisible && tooltip}\r\n          <TooltipText ref={targetRef} small>\r\n            {t('Performance Fee')}\r\n          </TooltipText>\r\n          <Flex alignItems=\"center\">\r\n            <Text ml=\"4px\" small>\r\n              {performanceFee / 100}%\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\r\n          {t('Info site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\r\n          {t('View Project Site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      {poolContractAddress && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <LinkExternal\r\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n            bold={false}\r\n            small\r\n          >\r\n            {t('View Contract')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      )}\r\n      {account && isMetaMaskInScope && tokenAddress && (\r\n        <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n          >\r\n            <Text color=\"primary\" fontSize=\"14px\">\r\n              {t('Add to Metamask')}\r\n            </Text>\r\n            <MetamaskIcon ml=\"4px\" />\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </ExpandedWrapper>\r\n  )\r\n}\r\n\r\nexport default React.memo(ExpandedFooter)\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport ExpandedFooter from './ExpandedFooter'\r\n\r\ninterface FooterProps {\r\n  pool: Pool\r\n  account: string\r\n  totalCakeInVault?: BigNumber\r\n}\r\n\r\nconst ExpandableButtonWrapper = styled(Flex)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  button {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\r\n  const { isAutoVault } = pool\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <CardFooter>\r\n      <ExpandableButtonWrapper>\r\n        <Flex alignItems=\"center\">\r\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n          {tooltipVisible && tooltip}\r\n          <Flex ref={targetRef}>\r\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n          </Flex>\r\n        </Flex>\r\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n          {isExpanded ? t('Hide') : t('Details')}\r\n        </ExpandableLabel>\r\n      </ExpandableButtonWrapper>\r\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\r\n    </CardFooter>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useVaultApprove } from 'hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  setLastUpdated: () => void\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VaultApprovalAction\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\r\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\r\n\r\n  useEffect(() => {\r\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\r\n    const secondsRemainingCalc = feeEndTime - currentSeconds\r\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\r\n\r\n    const tick = () => {\r\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\r\n    }\r\n    const timerInterval = setInterval(() => tick(), 1000)\r\n    if (doesUnstakingFeeApply) {\r\n      setSecondsRemaining(secondsRemainingCalc)\r\n      setHasUnstakingFee(true)\r\n    } else {\r\n      setHasUnstakingFee(false)\r\n      clearInterval(timerInterval)\r\n    }\r\n\r\n    return () => clearInterval(timerInterval)\r\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\r\n\r\n  return { hasUnstakingFee, secondsRemaining }\r\n}\r\n\r\nexport default useWithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\r\n  const { t } = useTranslation()\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\r\n}\r\n\r\nexport default WithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return t('Unstaking Fee').toLowerCase()\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n","import React from 'react'\r\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\n\r\ninterface FeeSummaryProps {\r\n  stakingTokenSymbol: string\r\n  stakeAmount: string\r\n}\r\n\r\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    fees: { withdrawalFee },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100\r\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'top-start' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        {tooltipVisible && tooltip}\r\n        <TooltipText ref={targetRef} small>\r\n          {t('Unstaking Fee')}\r\n        </TooltipText>\r\n        <Text fontSize=\"14px\">\r\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\r\n        </Text>\r\n      </Flex>\r\n      <UnstakingFeeCountdownRow />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FeeSummary\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      cakeVaultContract.methods\r\n        .withdrawAll()\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setPendingTx(true)\r\n        })\r\n        .on('receipt', () => {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        })\r\n        .on('error', (error) => {\r\n          console.error(error)\r\n          // Remove message from toast before prod\r\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n          setPendingTx(false)\r\n        })\r\n    } else {\r\n      cakeVaultContract.methods\r\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\r\n        // .toString() being called to fix a BigNumber error in prod\r\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setPendingTx(true)\r\n        })\r\n        .on('receipt', () => {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        })\r\n        .on('error', (error) => {\r\n          console.error(error)\r\n          // Remove message from toast before prod\r\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n          setPendingTx(false)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    cakeVaultContract.methods\r\n      .deposit(convertedStakeAmount.toString())\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setPendingTx(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      })\r\n      .on('error', (error) => {\r\n        console.error(error)\r\n        // Remove message from toast before prod\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        setPendingTx(false)\r\n      })\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    setPendingTx(true)\r\n    // unstaking\r\n    if (isRemovingStake) {\r\n      handleWithdrawal(convertedStakeAmount)\r\n      // staking\r\n    } else {\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport { convertSharesToCake } from '../../../helpers'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\n\r\ninterface HasStakeActionProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n}\r\n\r\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { stakingToken } = pool\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0)\r\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\r\n    : 0\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\">\r\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {cakePriceBusd.gt(0) ? (\r\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\r\n          ) : (\r\n            <Skeleton mt=\"1px\" height={16} width={64} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"24px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HasSharesActions\r\n","import React from 'react'\r\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\nimport HasSharesActions from './HasSharesActions'\r\n\r\ninterface VaultStakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  accountHasSharesStaked: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  accountHasSharesStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken } = pool\r\n  const { t } = useTranslation()\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const renderStakeAction = () => {\r\n    return accountHasSharesStaked ? (\r\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\r\n    ) : (\r\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default VaultStakeActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport VaultApprovalAction from './VaultApprovalAction'\r\nimport VaultStakeActions from './VaultStakeActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst CakeVaultCardActions: React.FC<{\r\n  pool: Pool\r\n  accountHasSharesStaked: boolean\r\n  isLoading: boolean\r\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\r\n  const { stakingToken, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        <Box display=\"inline\">\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {isVaultApproved ? (\r\n          <VaultStakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            accountHasSharesStaked={accountHasSharesStaked}\r\n          />\r\n        ) : (\r\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCardActions\r\n","import React from 'react'\r\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface RecentCakeProfitBalanceProps {\r\n  cakeToDisplay: number\r\n  dollarValueToDisplay: number\r\n  dateStringToDisplay: string\r\n}\r\n\r\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\r\n  cakeToDisplay,\r\n  dollarValueToDisplay,\r\n  dateStringToDisplay,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    {\r\n      placement: 'bottom-end',\r\n    },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\r\n      </TooltipText>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitBalance\r\n","import React from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\r\nimport {Box,CardBody} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from '../PoolCard/AprRow'\r\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\r\nimport CardFooter from '../PoolCard/CardFooter'\r\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\r\nimport VaultCardActions from './VaultCardActions'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\r\n\r\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\r\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\r\n`\r\n\r\ninterface CakeVaultProps {\r\n  pool: Pool\r\n  showStakedOnly: boolean\r\n}\r\n\r\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading },\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  const isLoading = !pool.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  if (showStakedOnly && !accountHasSharesStaked) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardInner>\r\n        <StyledCardHeader\r\n          isStaking={accountHasSharesStaked}\r\n          isAutoVault\r\n          earningToken={tokens.cake}\r\n          stakingToken={tokens.cake}\r\n        />\r\n        <StyledCardBody isLoading={isLoading}>\r\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n          <Box mt=\"24px\">\r\n            <RecentCakeProfitRow />\r\n          </Box>\r\n          <Box mt=\"8px\">\r\n            <UnstakingFeeCountdownRow />\r\n          </Box>\r\n          <Flex mt=\"32px\" flexDirection=\"column\">\r\n            {account ? (\r\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\r\n            ) : (\r\n              <>\r\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                  {t('Start earning')}\r\n                </Text>\r\n                <UnlockButton />\r\n              </>\r\n            )}\r\n          </Flex>\r\n        </StyledCardBody>\r\n        <CardFooter pool={pool} account={account} />\r\n      </StyledCardInner>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCard\r\n","import { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseCell = styled.div`\r\n  color: black;\r\n\r\n  padding: 24px 8px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`\r\n\r\nexport const CellContent = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-height: 40px;\r\n  ${Text} {\r\n    line-height: 1;\r\n  }\r\n`\r\n\r\nexport default BaseCell\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HelpIcon,\r\n  Link,\r\n  LinkExternal,\r\n  MetamaskIcon,\r\n  Skeleton,\r\n  Text,\r\n  TimerIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport Harvest from './Harvest'\r\nimport Stake from './Stake'\r\nimport Apr from '../Apr'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 700px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 700px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  justify-content: center;\r\n  padding: 12px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\ntype MediaBreakpoints = {\r\n  isXs: boolean\r\n  isSm: boolean\r\n  isMd: boolean\r\n  isLg: boolean\r\n  isXl: boolean\r\n}\r\n\r\ninterface ActionPanelProps {\r\n  account: string\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n  expanded: boolean\r\n  breakpoints: MediaBreakpoints\r\n}\r\n\r\nconst InfoSection = styled(Box)`\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  flex-basis: auto;\r\n  padding: 8px 8px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding: 0;\r\n    flex-basis: 230px;\r\n  }\r\n`\r\n\r\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const { currentBlock } = useBlock()\r\n  const { isXs, isSm, isMd } = breakpoints\r\n  const showSubtitle = (isXs || isSm) && sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const {\r\n    targetRef: tagTargetRef,\r\n    tooltip: tagTooltip,\r\n    tooltipVisible: tagTooltipVisible,\r\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom-start',\r\n  })\r\n\r\n  const maxStakeRow = stakingLimit.gt(0) ? (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n      <Text>{t('Max. stake per user')}:</Text>\r\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n    </Flex>\r\n  ) : null\r\n\r\n  const blocksRow =\r\n    blocksRemaining || blocksUntilStart ? (\r\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n        <Flex>\r\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n              {t('Blocks')}\r\n            </Text>\r\n            <TimerIcon ml=\"4px\" color=\"primary\" />\r\n          </Link>\r\n        </Flex>\r\n      </Flex>\r\n    ) : (\r\n      <Skeleton width=\"56px\" height=\"16px\" />\r\n    )\r\n\r\n  const aprRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\r\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\r\n    </Flex>\r\n  )\r\n\r\n  const totalStakedRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\r\n      <Flex alignItems=\"center\">\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <>\r\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n            <span ref={totalStakedTargetRef}>\r\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <Skeleton width=\"56px\" height=\"16px\" />\r\n        )}\r\n        {totalStakedTooltipVisible && totalStakedTooltip}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <StyledActionPanel expanded={expanded}>\r\n      <InfoSection>\r\n        {maxStakeRow}\r\n        {(isXs || isSm) && aprRow}\r\n        {(isXs || isSm || isMd) && totalStakedRow}\r\n        {shouldShowBlockCountdown && blocksRow}\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\r\n            {t('Info site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={earningToken.projectLink} bold={false}>\r\n            {t('View Project Site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        {poolContractAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <LinkExternal\r\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n              bold={false}\r\n            >\r\n              {t('View Contract')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {account && isMetaMaskInScope && tokenAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <Button\r\n              variant=\"text\"\r\n              p=\"0\"\r\n              height=\"auto\"\r\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n            >\r\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\r\n              <MetamaskIcon ml=\"4px\" />\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n        {tagTooltipVisible && tagTooltip}\r\n        <span ref={tagTargetRef}>\r\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n        </span>\r\n      </InfoSection>\r\n      <ActionContainer>\r\n        {showSubtitle && (\r\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\r\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\r\n          </Text>\r\n        )}\r\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\r\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\r\n      </ActionContainer>\r\n    </StyledActionPanel>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface NameCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 5;\r\n  flex-direction: row;\r\n  padding-left: 12px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 150px;\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\r\n  const {\r\n    userData: { userShares },\r\n  } = useCakeVault()\r\n  const hasVaultShares = userShares && userShares.gt(0)\r\n\r\n  const stakingTokenSymbol = stakingToken.symbol\r\n  const earningTokenSymbol = earningToken.symbol\r\n\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\r\n\r\n  let title = `${t('Earn')} ${earningTokenSymbol}`\r\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\r\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\r\n\r\n  if (isAutoVault) {\r\n    title = t('Auto CAKE')\r\n    subtitle = t('Automatic restaking')\r\n  } else if (isManualCakePool) {\r\n    title = t('Manual CAKE')\r\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isAutoVault ? (\r\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\r\n      ) : (\r\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\r\n      )}\r\n      <CellContent>\r\n        {showStakedTag && (\r\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\r\n            {t('Staked')}\r\n          </Text>\r\n        )}\r\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\r\n          {title}\r\n        </Text>\r\n        {showSubtitle && (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default NameCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\n\r\ninterface EarningsCellProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 4.5;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 120px;\r\n  }\r\n`\r\n\r\nconst HelpIconWrapper = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto CAKE vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = account && earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto CAKE vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningsDollarValue}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isManualCakePool}\r\n    />,\r\n  )\r\n\r\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentCollect()\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {labelText}\r\n        </Text>\r\n        {!userDataLoaded && account ? (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        ) : (\r\n          <>\r\n            {tooltipVisible && tooltip}\r\n            <Flex>\r\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\r\n                <Balance\r\n                  mt=\"4px\"\r\n                  bold={!isXs && !isSm}\r\n                  fontSize={isXs || isSm ? '14px' : '16px'}\r\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\r\n                  decimals={hasEarnings ? 5 : 1}\r\n                  value={hasEarnings ? earningTokenBalance : 0}\r\n                />\r\n                {hasEarnings ? (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\r\n                    decimals={2}\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                    prefix=\"~\"\r\n                  />\r\n                ) : (\r\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\r\n                    0 USD\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\r\n                <HelpIconWrapper ref={targetRef}>\r\n                  <HelpIcon color=\"textSubtle\" />\r\n                </HelpIconWrapper>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EarningsCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport Apr from '../Apr'\r\n\r\ninterface AprCellProps {\r\n  pool: Pool\r\n  performanceFee: number\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 1 0 50px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n  }\r\n`\r\n\r\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { isAutoVault } = pool\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {isAutoVault ? t('APY') : t('APR')}\r\n        </Text>\r\n        <Apr\r\n          pool={pool}\r\n          performanceFee={isAutoVault ? performanceFee : 0}\r\n          showIcon={!isXs && !isSm}\r\n          alignItems=\"flex-start\"\r\n        />\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default AprCell\r\n","import React, { useMemo } from 'react'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface TotalStakedCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\r\n  const { totalCakeInVault } = useCakeVault()\r\n\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const totalStakedBalance = useMemo(() => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {t('Total staked')}\r\n        </Text>\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <Flex height=\"100%\" alignItems=\"center\">\r\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell from './BaseCell'\r\n\r\ninterface ExpandActionCellProps {\r\n  expanded: boolean\r\n  isFullLayout: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  flex: 1;\r\n  padding-right: 12px;\r\n  padding-left: 0px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n    padding-right: 32px;\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 24px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isFullLayout && (\r\n        <Text color=\"primary\" bold>\r\n          {expanded ? t('Hide') : t('Details')}\r\n        </Text>\r\n      )}\r\n      <ArrowIcon color=\"primary\" toggled={expanded} />\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 32px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\r\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps {\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    stakingLimit,\r\n    isFinished,\r\n    poolCategory,\r\n    userData,\r\n    stakingTokenPrice,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\r\n    stakingTokenContract,\r\n    sousId,\r\n    earningToken.symbol,\r\n  )\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\r\n    useVaultApprove(setLastUpdated)\r\n\r\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\r\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\r\n\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\r\n\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const hasSharesStaked = userShares && userShares.gt(0)\r\n  const isVaultWithShares = isAutoVault && hasSharesStaked\r\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\r\n\r\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  const onStake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultStake()\r\n    } else {\r\n      onPresentStake()\r\n    }\r\n  }\r\n\r\n  const onUnstake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultUnstake()\r\n    } else {\r\n      onPresentUnstake()\r\n    }\r\n  }\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (needsApproval) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Enable pool')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n            {t('Enable')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  // Wallet connected, user data loaded and approved\r\n  if (isNotVaultAndHasStake || isVaultWithShares) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n            {stakingToken.symbol}{' '}\r\n          </Text>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n            <Balance\r\n              lineHeight=\"1\"\r\n              bold\r\n              fontSize=\"20px\"\r\n              decimals={5}\r\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\r\n            />\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              color=\"textSubtle\"\r\n              decimals={2}\r\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Flex>\r\n          <IconButtonWrapper>\r\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\r\n              <MinusIcon color=\"primary\" width=\"14px\" />\r\n            </IconButton>\r\n            {reachStakingLimit ? (\r\n              <span ref={targetRef}>\r\n                <IconButton variant=\"secondary\" disabled>\r\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n                </IconButton>\r\n              </span>\r\n            ) : (\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n                disabled={isFinished}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            )}\r\n          </IconButtonWrapper>\r\n          {tooltipVisible && tooltip}\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n          {t('Stake')}{' '}\r\n        </Text>\r\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n          {stakingToken.symbol}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n          variant=\"secondary\"\r\n          disabled={isFinished}\r\n        >\r\n          {t('Stake')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport NameCell from './Cells/NameCell'\r\nimport EarningsCell from './Cells/EarningsCell'\r\nimport AprCell from './Cells/AprCell'\r\nimport TotalStakedCell from './Cells/TotalStakedCell'\r\nimport EndsInCell from './Cells/EndsInCell'\r\nimport ExpandActionCell from './Cells/ExpandActionCell'\r\nimport ActionPanel from './ActionPanel/ActionPanel'\r\n\r\ninterface PoolRowProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  background-color: transparent;\r\n  display: flex;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\r\n\r\n  const toggleExpanded = () => {\r\n    setExpanded((prev) => !prev)\r\n  }\r\n\r\n  const {\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  return (\r\n    <>\r\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\r\n        <NameCell pool={pool} />\r\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\r\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\r\n        {isXl && <EndsInCell pool={pool} />}\r\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\r\n      </StyledRow>\r\n      {shouldRenderActionPanel && (\r\n        <ActionPanel\r\n          account={account}\r\n          pool={pool}\r\n          userDataLoaded={userDataLoaded}\r\n          expanded={expanded}\r\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolRow\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport PoolRow from './PoolRow'\r\n\r\ninterface PoolsTableProps {\r\n  pools: Pool[]\r\n  userDataLoaded: boolean\r\n  account: string\r\n}\r\n\r\nconst StyledTable = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  > div:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst StyledTableBorder = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  padding: 1px 1px 3px 1px;\r\n  background-size: 400% 400%;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\r\n  const { t } = useTranslation()\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n  return (\r\n    <StyledTableBorder>\r\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\r\n        {pools.map((pool) => (\r\n          <PoolRow\r\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\r\n            pool={pool}\r\n            account={account}\r\n            userDataLoaded={userDataLoaded}\r\n          />\r\n        ))}\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </StyledTable>\r\n    </StyledTableBorder>\r\n  )\r\n}\r\n\r\nexport default PoolsTable\r\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\r\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { usePoolPrice } from 'hooks/price'\r\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { StyledHr } from 'views/Farms/components/Divider'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport useMedia from 'use-media'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport HelpButton from './components/HelpButton'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n  margin: 25px 0px;\r\n`\r\n\r\nconst PoolControls = styled(Flex)`\r\n  flex-direction: column;\r\n  margin-bottom: 24px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst SearchSortContainer = styled(Flex)`\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Pools: React.FC = () => {\r\n  const theme = useContext(ThemeContext)\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account, chainId } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\r\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\r\n\r\n    return [...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [ finishedPools, openPools ] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\r\n  const [ upcomingPools, notUpcomingPools ] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n    finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n  const showUpcomingPools = location.pathname.includes('upcoming')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  const poolsToShow = () => {\r\n    let chosenPools = []\r\n    if (showUpcomingPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else if (showFinishedPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else {\r\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n    }\r\n\r\n    if (searchQuery) {\r\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n      chosenPools = chosenPools.filter((pool) =>\r\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n      )\r\n    }\r\n\r\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  }\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {poolsToShow().map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\r\n  const { path, url, isExact } = useRouteMatch()\r\n  const mggPool = openPools.filter((pool) => pool.mainPool)[0];\r\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\r\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\r\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[chainId], mggPool.earningToken.address[chainId])\r\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? '0'\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-around\"\r\n          flexDirection={['column', null, 'row']}\r\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n          padding=\"24px\"\r\n        >\r\n          <Flex flexDirection=\"column\" flex=\"2\">\r\n            <Flex\r\n              justifyContent=\"space-around\"\r\n              flexDirection=\"column\"\r\n              padding=\"25px 25px 25px 0px\"\r\n              mr={['8px', 0]}\r\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\r\n            >\r\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\r\n                Pool Staking\r\n              </Text>\r\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n                Earn MGG and other tokens by staking!\r\n              </Text>\r\n            </Flex>\r\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total MGG Staked\r\n                </Text>\r\n                <Text fontSize=\"20px\"> {totalStaked} {mggPool.stakingToken.symbol}</Text>\r\n              </Flex>\r\n              {/* <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total Value Locked\r\n                </Text>\r\n                <Text fontSize=\"20px\">- USD</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  APR\r\n                </Text>\r\n                <Text fontSize=\"20px\"> {apr} % </Text>\r\n              </Flex> */}\r\n            </InfoBox>\r\n          </Flex>\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        {/* {!showFinishedPools && !showUpcomingPools && (\r\n          <div>\r\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\r\n            {' '}\r\n            Stake tokens to earn{' '}\r\n          </Text>\r\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\r\n\r\n           // Header title for Active Pools  \r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('Stake tokens to earn')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </div>\r\n        )} */}\r\n\r\n        {/* UPCOMING  */}\r\n        {showUpcomingPools && (\r\n          <>\r\n            <StyledHr style={{ marginTop: '35px' }} />\r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('These pools are coming in the near future. Stay tuned.')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </>\r\n        )}\r\n\r\n        {/* ENDED  */}\r\n        {showFinishedPools && (\r\n          <>\r\n            <StyledHr style={{ marginTop: '35px' }} />\r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </>\r\n        )}\r\n\r\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\r\n\r\n        {cardLayout}\r\n\r\n        <div ref={loadMoreRef} />\r\n        {/* <Image\r\n          mx=\"auto\"\r\n          mt=\"12px\"\r\n          src=\"/images/3d-syrup-bunnies.png\"\r\n          alt=\"Pancake illustration\"\r\n          width={192}\r\n          height={184.5}\r\n        /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n"],"sourceRoot":""}