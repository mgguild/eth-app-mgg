{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","components/Balance.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","utils/callHelpers.ts","hooks/useApprove.ts","hooks/usePersistState.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","hooks/price.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/refHelpers.ts","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useERC721","getErc721Contract","useCake","getCakeContract","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","getEthScanAddressUrl","BASE_ETH_SCAN_URL","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","Balance","value","color","decimals","isDisabled","unit","prefix","previousValue","start","end","duration","separator","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","ref","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","fastRefresh","useRefresh","a","contract","methods","allowance","call","res","BigNumber","console","error","prev","fetchBalance","useGetBnbBalance","setBalance","eth","getBalance","walletBalance","refresh","useTokenBalance","balanceOf","approve","lpContract","masterChefContract","options","ethers","constants","MaxUint256","send","from","approveWithAmount","amount","stake","pid","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","enterStaking","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","useApprove","contractAddress","onApprove","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","info","useExit","stakingContract","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","useSousHarvest","handleHarvest","networkFinder","networkId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","chainId","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","Number","_totalToken2InPool","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","usePrevious","React","FlexLayout","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","HarvestAction","tokenRewardSymbol","rewardTokenPrice","earningsBigNumber","cakePrice","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_EXCHANGE_URL","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","usePriceCakeBusd","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","farmV2Apr","type","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/9.6c819327.chunk.js","sourcesContent":["import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n  getChainlinkOracleContract,\r\n  getSouschefV2Contract,\r\n  getLotteryV2Contract,\r\n  getLpStakingContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useLPStakingContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryV2Contract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const useSousChefV2 = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n\r\nexport const useChainlinkOracleContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport web3NoAccount from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : web3NoAccount)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { BASE_BSC_SCAN_URL, BASE_ETH_SCAN_URL } from 'config'\r\n\r\nexport const getBscScanAddressUrl = (address: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\r\n}\r\n\r\n// Etherscan\r\n\r\nexport const getEthScanAddressUrl = (address: string) => {\r\n  return `${BASE_ETH_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getEthScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_ETH_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getEthScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_ETH_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getEthScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_ETH_SCAN_URL}/block/countdown/${block}`\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\r\n      {t('Connect Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.allowance(account, allowedAddress).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\r\nimport farms from 'config/constants/farms'\r\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\r\nimport tokens from 'config/constants/tokens'\r\nimport { web3WithArchivedNodeProvider } from './web3'\r\nimport { getBalanceAmount } from './formatBalance'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, amount)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\r\n  if (useV2) {\r\n    return masterChefContract.methods\r\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({\r\n      from: account,\r\n      gas: DEFAULT_GAS_LIMIT,\r\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const exit = async (contract: Contract, account) => {\r\n  return contract.methods\r\n    .exit()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claim = async (contract, account) => {\r\n  return contract.methods\r\n    .getReward()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking('0')\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\n// const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n// const cakeBnbPid = 251\r\n// const cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\r\n\r\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\r\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\r\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\r\n\r\n/**\r\n * Returns the total CAKE staked in the CAKE-BNB LP\r\n */\r\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\r\n//   try {\r\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\r\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\r\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\r\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\r\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\r\n//\r\n//     const pair: Pair = new Pair(\r\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\r\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\r\n//     )\r\n//     const cakeLPBalance = pair.getLiquidityValue(\r\n//       pair.token0,\r\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\r\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\r\n//       false,\r\n//     )\r\n//\r\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\r\n//   } catch (error) {\r\n//     console.error(`CAKE-BNB LP error: ${error}`)\r\n//     return BIG_ZERO\r\n//   }\r\n// }\r\n\r\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\r\n  try {\r\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\r\n\r\n    return {\r\n      stakedTokens: await contract.methods.balanceOf(account).call(),\r\n      totalDeposits: await contract.methods.totalSupply().call(),\r\n      rewardRate: await contract.methods.rewardRate().call(),\r\n    }\r\n  } catch (error) {\r\n    console.error(`LP Staking error: ${error}`)\r\n    return {\r\n      totalDeposits: '-',\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the cake staked in the main pool\r\n */\r\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\r\n  try {\r\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\r\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\r\n\r\n    return getBalanceAmount(new BigNumber(response.amount))\r\n  } catch (error) {\r\n    console.error('Error getting stake in CAKE pool', error)\r\n    return BIG_ZERO\r\n  }\r\n}\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { approve, approveWithAmount } from 'utils/callHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\r\nimport useToast from './useToast'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\r\n  const { account } = useWeb3React()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      return await approve(lpContract, contractAddress, account)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lpContract, contractAddress])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (tx) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), e?.message)\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (tx) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), e?.message)\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve CAKE auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = () => {\r\n    cakeContract.methods\r\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setRequestedApproval(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n        setLastUpdated()\r\n        setRequestedApproval(false)\r\n      })\r\n      .on('error', (error) => {\r\n        console.error(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      })\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\r\n        const currentAllowance = new BigNumber(response)\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      return await approve(cakeContract, lotteryContract, account)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useMoralis, useMoralisWeb3Api } from 'react-moralis'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst networkFinder = (networkId: number) => {\r\n  switch (networkId) {\r\n    case 1:\r\n      return 'eth'\r\n    case 3:\r\n      return 'ropsten'\r\n    case 56:\r\n      return 'bsc'\r\n    case 97:\r\n      return 'bsc testnet'\r\n    default:\r\n      return 'eth'\r\n  }\r\n}\r\n\r\nexport const useTokenPrice = (tokenAddress: string) => {\r\n  const MoralisWeb3Api = useMoralisWeb3Api()\r\n  const { chainId } = useWeb3React()\r\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\r\n  switch (chainId) {\r\n    case 1:\r\n      chainName = 'eth'\r\n      break\r\n    case 3:\r\n      chainName = 'ropsten'\r\n      break\r\n    case 56:\r\n      chainName = 'bsc'\r\n      break\r\n    case 97:\r\n      chainName = 'bsc testnet'\r\n      break\r\n    default:\r\n      chainName = 'eth'\r\n      break\r\n  }\r\n\r\n  const [tokenPrice, setTokenPrice] = useState(0)\r\n  const web3 = useWeb3()\r\n\r\n  let _tokenAddress\r\n  try {\r\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\r\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\r\n  } catch {\r\n    console.error('Invalid staking and reward address')\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\r\n        const _tokenPrice = result.usdPrice\r\n\r\n        setTokenPrice(_tokenPrice)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\r\n\r\n  return { tokenPrice }\r\n}\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\r\n  const MoralisWeb3Api = useMoralisWeb3Api()\r\n  const { chainId } = useWeb3React()\r\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\r\n  chainName = networkFinder(chainId)\r\n  const [stakingPrice, setStakingPrice] = useState(0)\r\n  const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n  const web3 = useWeb3()\r\n  let _stakingTokenAddress\r\n  let _rewardTokenAddress\r\n  try {\r\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n  } catch {\r\n    console.error('Invalid staking and reward address')\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let result\r\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\r\n        const _stakingTokenPrice = result.usdPrice\r\n\r\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\r\n        const _rewardTokenPrice = result.usdPrice\r\n\r\n        setStakingPrice(_stakingTokenPrice)\r\n        setRewardPrice(_rewardTokenPrice)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (isFetchData){\r\n      fetchData()\r\n    }\r\n    \r\n  }, [setStakingPrice, setRewardPrice, _stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName, isFetchData])\r\n\r\n  return { stakingPrice, rewardPrice }\r\n}\r\n\r\nexport const useFarmPrice = (\r\n  lpTotalSupply: number,\r\n  token1Address: string,\r\n  token2Address: string,\r\n  rewardTokenAddress: string,\r\n  lpAddress: string,\r\n  isFetchData?: boolean,\r\n) => {\r\n  const MoralisWeb3Api = useMoralisWeb3Api()\r\n  const { chainId } = useWeb3React()\r\n  const chainName = networkFinder(chainId)\r\n  const [LPPrice, setLPPrice] = useState(0)\r\n  const [rewardPrice, setRewardPrice] = useState(0)\r\n  const web3 = useWeb3()\r\n  let _token1Address\r\n  let _token2Address\r\n  let _rewardTokenAddress\r\n  let _lpAddress\r\n  try {\r\n    _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n    _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    _lpAddress = web3.utils.toChecksumAddress(lpAddress)\r\n  } catch {\r\n    console.error('Invalid staking and reward address')\r\n  }\r\n\r\n  useEffect(() => {\r\n    const findPrice = async (tokenAddress: string) => {\r\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\r\n      const price = result.usdPrice\r\n      return price\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        let _totalToken1InPool\r\n        let _totalToken2InPool\r\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\r\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\r\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\r\n        const _token1Price = findPrice(_token1Address)\r\n        const _token2Price = findPrice(_token2Address)\r\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\r\n        const res = MoralisWeb3Api.account.getTokenBalances({\r\n          chain: chainName,\r\n          address: _lpAddress,\r\n          token_addresses: [_token1Address, _token2Address],\r\n        })\r\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\r\n        const result = data[3]\r\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\r\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\r\n        } else {\r\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance),  Number(result[0].decimals))\r\n        }\r\n\r\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\r\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance),  Number(result[1].decimals))\r\n        } else {\r\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\r\n        }\r\n\r\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\r\n        setRewardPrice(data[2])\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (isFetchData) {\r\n      fetchData()\r\n    }\r\n   \r\n   \r\n  }, [\r\n    isFetchData,\r\n    setLPPrice,\r\n    setRewardPrice,\r\n    lpTotalSupply,\r\n    _token1Address,\r\n    _token2Address,\r\n    _rewardTokenAddress,\r\n    _lpAddress,\r\n    chainName,\r\n    MoralisWeb3Api,\r\n  ])\r\n\r\n  return { LPPrice, rewardPrice }\r\n}\r\n\r\nexport default usePoolPrice\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","\r\nimport React, {useRef, useEffect} from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    const ref = React.useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [value]); \r\n    return ref.current;\r\n}\r\n\r\nexport default usePrevious;","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal> }\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n    // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n                                                 max,\r\n                                                 // symbol,\r\n                                                 onChange,\r\n                                                 onSelectMax,\r\n                                                 value,\r\n                                                 // addLiquidityUrl,\r\n                                                 // inputTitle,\r\n                                                 decimals = 18,\r\n                                               }) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems='flex-end' justifyContent='space-around'>\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode='decimal'\r\n            step='any'\r\n            min='0'\r\n            onChange={onChange}\r\n            placeholder='0'\r\n            value={value}\r\n          />\r\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n\r\n\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\r\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\r\n  const firstPart =\r\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\r\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  farmSymbol?: string\r\n  tokenSymbol?: string\r\n  rewardToken?:string\r\n  token: Token\r\n  quoteToken: Token\r\n  pairToken?: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  farmSymbol,\r\n  rewardToken,\r\n  token,\r\n  pairToken\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"row\" alignItems=\"\">\r\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\r\n      </Flex>\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\r\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import * as React from 'react'\r\nimport { Box, CircularProgress } from '@material-ui/core'\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\r\n      <CircularProgress color='inherit' />\r\n    </Box>\r\n  );\r\n}\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Flex, Modal, Text } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from '../../../hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  farm?: any,\r\n  staked?: any,\r\n  earnings?: any,\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\r\n  {\r\n    farm,\r\n    staked,\r\n    earnings,\r\n    onConfirm,\r\n    onDismiss,\r\n    max, tokenName = '',\r\n  }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title='' onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\r\n        <Text>and withdrawing the staked amount of</Text>\r\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\r\n        <Button\r\n          disabled={pendingTx}\r\n          fullWidth onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onConfirm(val)\r\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\r\n            onDismiss()\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n        }}>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\n\r\nconst Container = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    height: auto;\r\n`\r\n\r\nconst DetailsCont = styled.div`\r\n    width: 30%;\r\n    height: auto;\r\n    overflow: visible;\r\n`\r\n\r\nconst ActionDiv = styled.div`\r\n    margin: 15px 0px;\r\n    padding: 10px;\r\n`\r\nconst ModalFooter = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport { DetailsCont, ActionDiv, ModalFooter }\r\nexport default Container;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \r\n\r\nconst Container = styled.div`\r\n    margin-top: -30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 500px;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n    padding: 10px 0px;\r\n`\r\nconst CancelButton = styled(Button)`\r\n    flex: 1;\r\n    margin-right: 10px;\r\n`\r\nconst DepositButton = styled(Button)`\r\n    flex: 1;\r\n    margin-left: 10px;\r\n`\r\n\r\nexport {StyledFlex, CancelButton, DepositButton}\r\nexport default Container;\r\n\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { Modal, Text } from '@metagg/mgg-uikit'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\r\nimport useToast from '../../../../hooks/useToast'\r\nimport { useTranslation } from '../../../../contexts/Localization'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\n\r\ninterface StakeModalInterface {\r\n  pid: number,\r\n  onDismiss?: () => void\r\n  max: BigNumber\r\n  symbol: string\r\n  placeholder?: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  lpStakingContract?: Contract\r\n}\r\n\r\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\r\n  const [val, setVal] = useState('0')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const onClick = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n      await onConfirm(val, lpStakingContract)\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        `${t('Staked')}!`,\r\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\r\n      )\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(\r\n        t('Error'),\r\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n      console.error(e)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n  return (\r\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\r\n      <Container>\r\n        <Text>Stake amount: </Text>\r\n        <ModalInput\r\n          value={val}\r\n          onSelectMax={handleSelectMax}\r\n          onChange={handleChange}\r\n          max={fullBalance}\r\n          symbol={symbol}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          //  inputTitle={t('Stake')}\r\n        />\r\n      </Container>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <Text>{ symbol } balance: </Text>\r\n        <Text>{ fullBalance }</Text>\r\n      </StyledFlex>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <CancelButton\r\n          onClick={onDismiss}\r\n        >\r\n         Close\r\n        </CancelButton>\r\n        <DepositButton\r\n          onClick={onClick}\r\n          // disable Deposit button if not yet approved\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n        >\r\n        Deposit\r\n        </DepositButton>\r\n      </StyledFlex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Stake\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\r\n\r\ninterface ClaimModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\r\n  \r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\r\n        <Button fullWidth>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\r\nimport { ModalHr } from './Divider'\r\nimport StakeModal from './Modals/Stake'\r\nimport ClaimModal from './Modals/ClaimModal'\r\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\r\n\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n  handleUnstake?: (amount: string) => void\r\n  maxStake?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = (\r\n  {\r\n    max,\r\n    onConfirm,\r\n    onDismiss,\r\n    tokenName = '',\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n    handleUnstake,\r\n    farm,\r\n    maxStake,\r\n  }) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const {\r\n    allowance,\r\n    tokenBalance,\r\n    stakedBalance,\r\n    earnings,\r\n  } = farm.userData || {}\r\n  const userRate = calculateUserRewardRate(farm)\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { pid, lpAddresses } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpContract = useERC20(lpAddress)\r\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\r\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\r\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\r\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\r\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\r\n\r\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\r\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setIsApproved(true)\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      pid={pid}\r\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      inputTitle={t('Stake')} />,\r\n  )\r\n\r\n  const [onPresentClaim] = useModal(<ClaimModal />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedTokenBalance}\r\n      earnings={formatTokenEarnings}\r\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\r\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\r\n        Staking, balances & earnings\r\n      </Text>\r\n      <Container>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {farm.quoteToken.symbol}\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\r\n              Get {farm.quoteToken.symbol}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {tokenName} Tokens\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\r\n              Get {tokenName}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            Your {tokenName} Deposits\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            {isApproved ?\r\n              <Button fullWidth onClick={onPresentStake}>\r\n                Stake {tokenName}\r\n              </Button>\r\n              :\r\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\r\n                Enable Farm\r\n              </Button>\r\n            }\r\n\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n      </Container>\r\n      <ModalHr />\r\n      <ModalFooter>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {userRate}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont\r\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n          onMouseEnter={() => setActiveSelect(true)}\r\n          onMouseLeave={() => setActiveSelect(false)}\r\n        >\r\n          <Button fullWidth onClick={onPresentWithdraw}>\r\n            <Text>Claim & Withdraw</Text>\r\n          </Button>\r\n        </DetailsCont>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake, { useExit } from 'hooks/useUnstake'\r\nimport { Farm } from 'state/types'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Loading from 'components/Loading'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady?: boolean\r\n  userRate?:string,\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  addTokenUrl,\r\n  farm,\r\n  userDataReady\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string, contract?: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      addTokenUrl={addTokenUrl}\r\n      farm={farm}\r\n      handleUnstake={handleUnstake}\r\n      maxStake={stakedBalance}\r\n    />\r\n  )\r\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\r\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedBalance}\r\n      earnings={earnings}\r\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    let buttonTxt = 'Deposit'\r\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\r\n      buttonTxt = 'Withdraw'\r\n    }\r\n    return (\r\n      <Button\r\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\r\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        fullWidth\r\n      >\r\n        {userDataReady?\r\n          buttonTxt\r\n          : <Loading /> }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = (\r\n  {\r\n    userDataReady,\r\n    farm,\r\n    account,\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n  }) => {\r\n  const { t } = useTranslation()\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n\r\n  const renderDepositButton = () => {\r\n    return (\r\n      <StakeAction\r\n        userDataReady={userDataReady}\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        addTokenUrl={addTokenUrl}\r\n        farm={farm}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useClaim } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\r\nimport useToast from '../../../../../hooks/useToast'\r\n\r\n\r\ninterface HarvestActionProps {\r\n  pid: number\r\n  stakingContract?: string,\r\n  tokenRewardSymbol?: string,\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n  }\r\n  userDataReady: boolean\r\n  rewardTokenPrice?: number\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\r\n  {\r\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady, rewardTokenPrice\r\n  }) => {\r\n    const earningsBigNumber = new BigNumber(userData.earnings)\r\n    const cakePrice = rewardTokenPrice\r\n    let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useClaim(stakingContract)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\r\n          {tokenRewardSymbol}\r\n        </Text>\r\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\r\n          )}\r\n        </div>\r\n        <Button\r\n          style={{borderRadius: '3px', height: '40px'}}\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Claimed')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml='4px'\r\n        >\r\n          {t('Claim')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useContext, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes, ThemeContext } from 'styled-components'\r\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { getFarmV2Apr } from 'utils/apr'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport DetailsSection from './DetailsSection'\r\nimport { getBscScanAddressUrl, getEthScanAddressUrl } from '../../../../utils/bscscan'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  max-width: 450px;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  // padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.card};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\r\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.quoteToken.symbol\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n\r\n  const stakingAddress = getAddress(farm.stakingAddresses);\r\n\r\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const AddTokenUrl = `${BASE_EXCHANGE_URL}/#/swap/${farm.token.address[farm.chain]}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  const theme = useContext(ThemeContext)\r\n\r\n\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[farm.chain], farm.pairToken.address[farm.chain], farm.quoteToken.address[farm.chain], farm.lpAddresses[farm.chain])\r\n\r\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\r\n  const apr = (aprBlackList.includes(farm.lpAddresses[farm.chain]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        farmSymbol={farm.lpSymbol}\r\n        tokenSymbol={farm.token.symbol}\r\n        rewardToken={farm.quoteToken.symbol}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n        pairToken={farm.pairToken}\r\n      />\r\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\r\n      {/* {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )} */}\r\n\r\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\r\n        <Text>{t('Total Deposits')}</Text>\r\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\r\n      </Flex> */}\r\n      <div style={{margin: '24px'}}>\r\n      <Flex>\r\n        <HarvestAction stakingContract={getAddress(farm.stakingAddresses)}\r\n                       tokenRewardSymbol={earnLabel} userDataReady={userDataReady} userData={farm.userData}\r\n                       pid={farm.pid} rewardTokenPrice={rewardPrice} />\r\n      </Flex>\r\n      {/* <Flex justifyContent='space-between'>\r\n        <Text>{t('APR')}</Text>\r\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\r\n      </Flex> */}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{t('Rate')}</Text>\r\n        <Text color='textSubtle'>\r\n          {formatTotalRewardRate ?? <Skeleton width={60} display='inline-block' />} {earnLabel} / week</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{t('Duration')}</Text>\r\n        <Text color='textSubtle'>{farm.remainingDays ??  <Skeleton width={60} display='inline-block' />} Days</Text>\r\n      </Flex>\r\n      <CardActionsContainer userDataReady={userDataReady} farm={farm} account={account}\r\n                            addLiquidityUrl={addLiquidityUrl} addTokenUrl={AddTokenUrl} />\r\n\r\n      <DetailsSection\r\n        removed={removed}\r\n        stakingAddress={getEthScanAddressUrl(stakingAddress)}\r\n        lpInfoAddress={`${farm.infoURL?? BASE_INFO_URL}/${getAddress(farm.token.address)}`}\r\n        lpLabel={lpLabel}\r\n      />\r\n\r\n      {/* <Divider />\r\n       <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={farm.totalDeposits}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n      <Flex justifyContent='center'>\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\r\n      </Flex> */}\r\n      </div>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const mainTokenAddress = quoteTokenAddress;\r\n  const pairTokenAddress = tokenAddress\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  token,\r\n  pairToken,\r\n  userDataReady,\r\n  stakingAddresses,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: token.address,\r\n    pairTokenAddress: pairToken.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string, contract: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const lpStakingAddress = getAddress(stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.boxShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport usePrevious from 'hooks/refHelpers'\r\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport ReactLoading from 'react-loading'\r\nimport Page from 'components/layout/Page'\r\nimport useMedia from 'use-media'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\r\n  const { account, chainId } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('earned')\r\n  const theme = useContext(ThemeContext)\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return (\r\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\r\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\r\n          )\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        // case 'promoted':\r\n        //   return orderBy(\r\n        //     farms,\r\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\r\n        //     'desc',\r\n        //   )\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'duration':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\r\n            'desc',\r\n          )\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const handleItemClick = (index: number) => setActiveTab(index)\r\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n    // Uncomment this if !comingsoon\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken, totalRewardRate } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                userDataReady={userDataReady}\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                userDataReady={userDataReady}\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                userDataReady={userDataReady}\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n          {/* {farmsList(activeFarms).map((farm) => ( */}\r\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\r\n          {/* ))} */}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const renderInactiveContent = (): JSX.Element => {\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '20px' }}>\r\n          <Text fontSize=\"24px\" bold>\r\n            {' '}\r\n            Inactive Liquidity Pools{' '}\r\n          </Text>\r\n        </div>\r\n\r\n        <FlexLayout>\r\n          {farmsList(inactiveFarms).map((farm) => (\r\n            <FarmCard\r\n              userDataReady={userDataReady}\r\n              key={farm.pid}\r\n              farm={farm}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const [ isFetchData, setFetchData] = useState<boolean | null>(true); \r\n  \r\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\r\n  const lpTotalSupply = getBalanceNumber(new BigNumber(mggFarm.totalDeposits))\r\n  const { LPPrice, rewardPrice } = useFarmPrice(\r\n    Number(lpTotalSupply),\r\n    mggFarm.token.address[mggFarm.chain],\r\n    mggFarm.pairToken.address[mggFarm.chain],\r\n    mggFarm.quoteToken.address[mggFarm.chain],\r\n    mggFarm.lpAddresses[mggFarm.chain],\r\n    isFetchData, \r\n  )\r\n  \r\n  const prevLPPrice = usePrevious(LPPrice);\r\n  const prevRewardPrice = usePrevious(rewardPrice);\r\n  useEffect(() => {\r\n    if ((LPPrice > 0) || (rewardPrice > 0)) {\r\n      setFetchData(false);\r\n    }   \r\n    setTimeout(() => {\r\n      setFetchData(true);\r\n      if ((LPPrice !== prevLPPrice) || (rewardPrice !== prevRewardPrice)) {\r\n        setFetchData(true);\r\n      } else {\r\n        setFetchData(false);\r\n      }\r\n    }, 60000);\r\n    if ((prevLPPrice === LPPrice) || (prevRewardPrice === rewardPrice)) {\r\n      setFetchData(false);\r\n    }\r\n    \r\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\r\n\r\n  useEffect(() => {\r\n    return setFetchData(null)\r\n  }, [])\r\n\r\n  const farmV2Apr = useMemo(\r\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate)),\r\n    [LPPrice, rewardPrice, mggFarm.totalDeposits, mggFarm.rewardRate],\r\n  )\r\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\"/>\r\n  const totalStaked = Number(getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)) > 0 ? `${getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)} ${mggFarm.lpSymbol}`: <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\" />\r\n  // const tvr = useMemo(() => (new BigNumber(totalStaked).times(LPPrice)).toFixed(4), [totalStaked, LPPrice])\r\n  const tvr = useMemo(\r\n    () => new BigNumber(mggFarm.lpTotalSupply).times(LPPrice).toFixed(4),\r\n    [mggFarm.lpTotalSupply, LPPrice],\r\n  )\r\n    \r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-around\"\r\n          flexDirection={['column', null, 'row']}\r\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n          padding=\"24px\"\r\n        >\r\n          <Flex flexDirection=\"column\" flex=\"2\">\r\n            <Flex\r\n              justifyContent=\"space-around\"\r\n              flexDirection=\"column\"\r\n              padding=\"25px 25px 25px 0px\"\r\n              mr={['8px', 0]}\r\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\r\n            >\r\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\r\n                Liquidity Staking\r\n              </Text>\r\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n                Earn MGG with your LP tokens!\r\n              </Text>\r\n            </Flex>\r\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total Tokens Staked\r\n                </Text>\r\n                <Text fontSize=\"20px\">\r\n                  {' '}\r\n                  {totalStaked}\r\n                </Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total Value Locked\r\n                </Text>\r\n                <Text fontSize=\"20px\">{Number(tvr) > 0 ? `${tvr} USD` : <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\" /> }</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  APR\r\n                </Text>\r\n                <Text fontSize=\"20px\">{apr}</Text>\r\n              </Flex>\r\n            </InfoBox>\r\n          </Flex>\r\n          {/* <Flex style={isMobile ? {\r\n            fontSize: '150px',\r\n            margin: 'auto',\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n          } : { fontSize: '240px', marginRight: '-118px' }}>\r\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\r\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        {/* <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          {/* <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  // {\r\n                  //   label: t('APR'),\r\n                  //   value: 'apr',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Multiplier'),\r\n                  //   value: 'multiplier',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Promoted'),\r\n                  //   value: 'promoted',\r\n                  // },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Duration'),\r\n                    value: 'duration',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform='uppercase'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer> */}\r\n\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}