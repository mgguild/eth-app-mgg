{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","hooks/useLastUpdated.ts","hooks/useTokenBalance.ts","hooks/usePreviousValue.ts","hooks/usePersistState.ts","utils/getTimePeriods.ts","views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useERC721","getErc721Contract","useCake","getCakeContract","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","getEthScanAddressUrl","BASE_ETH_SCAN_URL","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","fastRefresh","useRefresh","a","contract","methods","allowance","call","res","BigNumber","console","error","prev","fetchBalance","useGetBnbBalance","setBalance","eth","getBalance","walletBalance","refresh","useTokenBalance","balanceOf","value","ref","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","HistoryTabs","useGetLatestOraclePrice","price","setPrice","chainlinkOracleContract","latestAnswer","response","getBalanceAmount","fetchPrice","usePollOraclePrice","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","MGG_gradient","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","href","message","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","borderColor","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","claimedHash","getResultColor","StyledBetDetails","MGG_container","BetDetails","bullMultiplier","bearMultiplier","LIVE","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","gradients","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","BIG_TEN","pow","BIG_NINE","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","togglePosition","onBack","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","minBetAmount","useGetMinBetAmount","balanceDisplay","maxBalance","minBetAmountBalance","valueAsBn","showFieldWarning","percent","setPercent","handlePercentChange","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","toFormat","lte","eq","isNaN","key","lt","getButtonProps","bnValue","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","percentage","min","isWarning","inputProps","name","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","Number","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader"],"mappings":"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","file":"static/js/16.535c1fba.chunk.js","sourcesContent":["import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n  getChainlinkOracleContract,\r\n  getSouschefV2Contract,\r\n  getLotteryV2Contract,\r\n  getLpStakingContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useLPStakingContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryV2Contract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const useSousChefV2 = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n\r\nexport const useChainlinkOracleContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport web3NoAccount from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : web3NoAccount)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { BASE_BSC_SCAN_URL, BASE_ETH_SCAN_URL } from 'config'\r\n\r\nexport const getBscScanAddressUrl = (address: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\r\n}\r\n\r\n// Etherscan\r\n\r\nexport const getEthScanAddressUrl = (address: string) => {\r\n  return `${BASE_ETH_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getEthScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_ETH_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getEthScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_ETH_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getEthScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_ETH_SCAN_URL}/block/countdown/${block}`\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\r\n      {t('Connect Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.allowance(account, allowedAddress).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { getBubbleGumBackground } from '../../helpers'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useChainlinkOracleContract } from 'hooks/useContract'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(BIG_ZERO)\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n  const chainlinkOracleContract = useChainlinkOracleContract()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\r\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateMarketData } from 'state/predictions'\r\nimport { getMarketData } from 'state/predictions/helpers'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollRoundData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(async () => {\r\n      const marketData = await getMarketData()\r\n\r\n      dispatch(updateMarketData(marketData))\r\n    }, POLL_TIME_IN_SECONDS * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport default usePollRoundData\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.MGG_gradient};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import BigNumber from 'bignumber.js'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { DefaultTheme } from 'styled-components'\r\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const getBnbAmount = (bnbBn: BigNumber) => {\r\n  return getBalanceAmount(bnbBn, 18)\r\n}\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\r\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier\r\n}\r\n\r\n// TODO: Move this to the UI Kit\r\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\r\n  if (theme.isDark) {\r\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\r\n  }\r\n\r\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/hooks'\r\nimport { markBetAsCollected } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { formatBnb } from '../helpers'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: number\r\n  roundId: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  roundId,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleClick = () => {\r\n    predictionsContract.methods\r\n      .claim(epoch)\r\n      .send({ from: account })\r\n      .once('sending', () => {\r\n        setIsPendingTx(true)\r\n      })\r\n      .once('receipt', async (result) => {\r\n        if (onSuccess) {\r\n          await onSuccess()\r\n        }\r\n\r\n        dispatch(markBetAsCollected({ account, roundId }))\r\n        onDismiss()\r\n        setIsPendingTx(false)\r\n        toastSuccess(\r\n          t('Winnings collected!'),\r\n          <Box>\r\n            <Text as=\"p\" mb=\"8px\">\r\n              {t('Your prizes have been sent to your wallet')}\r\n            </Text>\r\n            {result.transactionHash && (\r\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\r\n                {t('View on BscScan')}\r\n              </LinkExternal>\r\n            )}\r\n          </Box>,\r\n        )\r\n      })\r\n      .once('error', (error) => {\r\n        setIsPendingTx(false)\r\n        toastError(t('Error'), error?.message)\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Collecting')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: number\r\n  roundId: string\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  roundId,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = () => {\r\n    predictionsContract.methods\r\n      .claim(epoch)\r\n      .send({ from: account })\r\n      .once('sending', () => {\r\n        setIsPendingTx(true)\r\n      })\r\n      .once('receipt', async () => {\r\n        if (onSuccess) {\r\n          await onSuccess()\r\n        }\r\n        setIsPendingTx(false)\r\n        toastSuccess(t('Position reclaimed!'))\r\n      })\r\n      .once('error', (error) => {\r\n        setIsPendingTx(false)\r\n        toastError(t('Error'), error?.message)\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, Round } from 'state/types'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: Round['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// LockPriceRow\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.borderColor\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const predictionsContract = usePredictionsContract()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\r\n\r\n      if (canClaim) {\r\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\r\n        setIsRefundable(refundable)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, predictionsContract, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchBet } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getPayout } from '../../helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const canClaim = useBetCanClaim(account, bet.round.id)\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchBet({ account, id: bet.id }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton\r\n            payout={payout}\r\n            roundId={bet.round.id}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={!canClaim}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanTransactionUrl(bet.claimedHash)} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{t('Your Result')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getMultiplier } from '../../helpers'\r\nimport { PayoutRow, RoundResult } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.MGG_container};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResult round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResult>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\r\n          {bet.round.endBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getPayout } from '../../helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n  const canClaim = useBetCanClaim(account, bet.round.id)\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton\r\n            hasClaimed={!canClaim}\r\n            roundId={bet.round.id}\r\n            epoch={bet.round.epoch}\r\n            payout={payout}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Bet } from 'state/types'\r\nimport HistoricalBet from './HistoricalBet'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.id} bet={bet} />\r\n      ))}\r\n    </>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { formatBnb } from 'views/Predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst TREASURY_FEE = 0.03\r\n\r\nconst getNetPayout = (bet: Bet) => {\r\n  const rawPayout = getPayout(bet)\r\n  const fee = rawPayout * TREASURY_FEE\r\n  return rawPayout - fee - bet.amount\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.id, payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <UnlockButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: number\r\n}\r\n\r\nconst StyledEnteredTag = styled(Tag).attrs({\r\n  variant: 'secondary',\r\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\r\n})`\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: number\r\n  multiplier?: number\r\n  hasEntered?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import styled from 'styled-components'\r\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\r\n\r\nconst Card = styled(UIKitCard)`\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default Card\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  blockNumber: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.borderColor\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  border-radius: 16px 16px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useBetCanClaim } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  roundId: string\r\n  epoch: number\r\n  payout: number\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  roundId,\r\n  epoch,\r\n  payout,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const canClaim = useBetCanClaim(account, roundId)\r\n\r\n  if (!canClaim) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch, startBlock } = round\r\n  const estimatedEndBlock = startBlock + interval\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetBetByRoundId } from 'state/hooks'\r\nimport { RoundResult } from '../RoundResult'\r\nimport { getPayout } from '../../helpers'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const bet = useGetBetByRoundId(account, round.id)\r\n  const payout = getPayout(bet)\r\n\r\n  if (round.failed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          blockNumber={endBlock}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n          />\r\n          <RoundResult round={round} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\nimport { useBlock } from 'state/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n","import React from 'react'\r\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: Round\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useCountUp } from 'react-countup'\r\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, totalAmount } = round\r\n  const { currentBlock } = useBlock()\r\n  const totalInterval = useGetIntervalBlocks()\r\n  const price = useGetLastOraclePrice()\r\n  const isBull = price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlock = lockBlock + totalInterval\r\n  const priceDifference = price.minus(lockPrice).toNumber()\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: price.toNumber(),\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  useEffect(() => {\r\n    update(price.toNumber())\r\n  }, [price, update])\r\n\r\n  if (round.failed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (currentBlock > estimatedEndBlock) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              <div ref={targetRef}>\r\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n                </TooltipText>\r\n              </div>\r\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                {formatUsd(priceDifference)}\r\n              </PositionTag>\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { BetPosition } from 'state/types'\r\nimport { getDecimalAmount } from 'utils/formatBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\r\nimport PositionTag from '../PositionTag'\r\nimport { getBnbAmount } from '../../helpers'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\nimport Card from './Card'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\r\n}\r\n\r\n// /!\\ TEMPORARY /!\\\r\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\r\n// TODO: Remove on beta-v2 smart contract release.\r\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\r\n\r\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: BigNumber) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0) || value.isNaN()) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  const balanceDisplay = useMemo(() => {\r\n    return getBnbAmount(bnbBalance).toString()\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance)\r\n  }, [bnbBalance])\r\n  const minBetAmountBalance = useMemo(() => {\r\n    return getBnbAmount(minBetAmount)\r\n  }, [minBetAmount])\r\n\r\n  const valueAsBn = new BigNumber(value)\r\n\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const handleInputChange = (input: string) => {\r\n    if (input) {\r\n      const percentage = Math.floor(new BigNumber(input).dividedBy(maxBalance).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = maxBalance.dividedBy(100).multipliedBy(sliderPercent)\r\n      setValue(percentageOfStakingMax.toFormat(18))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmountBalance)\r\n\r\n  const handleEnterPosition = () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n    const decimalValue = getDecimalAmount(valueAsBn)\r\n\r\n    predictionsContract.methods[betMethod]()\r\n      .send({ from: account, value: decimalValue, gasPrice })\r\n      .once('sending', () => {\r\n        setIsTxPending(true)\r\n      })\r\n      .once('receipt', async (result) => {\r\n        setIsTxPending(false)\r\n        onSuccess(decimalValue, result.transactionHash as string)\r\n      })\r\n      .once('error', (error) => {\r\n        const errorMsg = t('An error occurred, unable to enter your position')\r\n\r\n        toastError(t('Error'), error?.message)\r\n        setIsTxPending(false)\r\n        console.error(errorMsg, error)\r\n      })\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const bnValue = new BigNumber(value)\r\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: minBetAmountBalance, token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent}%` : ''}\r\n          step={0.1}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\r\nimport { markPositionAsEntered } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnb, getBnbAmount } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + interval\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + interval\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\r\n    // Optimistically set the user bet so we see the entered position immediately.\r\n    dispatch(\r\n      markPositionAsEntered({\r\n        account,\r\n        roundId: round.id,\r\n        bet: {\r\n          hash,\r\n          round,\r\n          position,\r\n          amount: getBnbAmount(decimalValue).toNumber(),\r\n          claimed: false,\r\n          claimedHash: null,\r\n        },\r\n      }),\r\n    )\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport web3NoAccount from 'utils/web3'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await web3NoAccount.eth.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\r\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useRoundCountdown = (intervalsToAdd = 1) => {\r\n  const interval = useGetIntervalBlocks()\r\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\r\n  const blocksToAdd = intervalsToAdd * interval\r\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\r\n\r\n  return seconds\r\n}\r\n\r\nexport default useRoundCountdown\r\n","import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { getMultiplier } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const bet = useGetBetByRoundId(account, id)\r\n  const hasEntered = bet !== null\r\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={bet?.amount}\r\n        bullMultiplier={bullMultiplier}\r\n        bearMultiplier={bearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={bet?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={bullMultiplier}\r\n        bearMultiplier={bearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      betAmount={bet?.amount}\r\n      bullMultiplier={bullMultiplier}\r\n      bearMultiplier={bearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useRoundCountdown from '../hooks/useRoundCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 60px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: 16px;\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: price.toNumber(),\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  useEffect(() => {\r\n    update(price.toNumber())\r\n  }, [price, update])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const seconds = useRoundCountdown()\r\n  const countdown = formatRoundTime(seconds)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {seconds === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Card)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport { fetchCurrentBets } from 'state/predictions'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Fetch data on current unclaimed bets\r\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetSortedRounds } from 'state/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC = () => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const initialIndex = Math.floor(rounds.length / 2)\r\n\r\n  useOnNextRound()\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={initialIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.id}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\n\r\nenum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.MGG_container};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && (\r\n              <div>\r\n                <Positions />\r\n              </div>\r\n            )}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ChartDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\r\n        </Text>\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\r\n        </Text>\r\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n          {t('I understand')}\r\n        </Button>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          <LinkExternal\r\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n            external\r\n          >\r\n            {t('Learn More')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\r\nimport {\r\n  getMarketData,\r\n  getStaticPredictionsData,\r\n  makeFutureRoundResponse,\r\n  makeRoundData,\r\n  transformRoundResponse,\r\n} from 'state/predictions/helpers'\r\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\r\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollRoundData from './hooks/usePollRoundData'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\n\r\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\r\n\r\nconst Predictions = () => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk',\r\n  })\r\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_chart',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const handleAcceptChart = () => setHasAcceptedChart(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedChart && isChartPaneOpen) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\r\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\r\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\r\n\r\n      // Fetch data on current unclaimed bets\r\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\r\n\r\n      if (marketData.market.paused) {\r\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\r\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\r\n        const currentRoundStartBlock = Number(latestRound.startBlock)\r\n        const futureRounds = []\r\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\r\n\r\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\r\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\r\n        }\r\n\r\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\r\n\r\n        dispatch(\r\n          initialize({\r\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\r\n            historyFilter: HistoryFilter.ALL,\r\n            currentRoundStartBlockNumber: currentRoundStartBlock,\r\n            rounds: roundData,\r\n            history: {},\r\n            bets: {},\r\n          }),\r\n        )\r\n      } else {\r\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\r\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\r\n      }\r\n    }\r\n\r\n    // Do not start initialization until the first block has been retrieved\r\n    if (initialBlock > 0) {\r\n      fetchInitialData()\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollRoundData()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n"],"sourceRoot":""}