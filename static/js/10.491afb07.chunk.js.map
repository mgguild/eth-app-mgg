{"version":3,"sources":["components/Balance.tsx","hooks/usePersistState.ts","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","setValue","setItem","stringify","usePoolPrice","stakingTokenAddress","rewardTokenAddress","MoralisWeb3Api","useMoralisWeb3Api","chainId","useWeb3React","chainName","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","console","a","token","getTokenPrice","chain","address","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","_token1Price","_token2Price","account","getTokenBalances","token_addresses","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","BigNumber","balance","_totalToken2InPool","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","getAddress","symbol","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","sousId","isUsingBnb","dispatch","useAppDispatch","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","onUnstake","exit","useSousUnstake","enableEmergencyWithdraw","handleUnstake","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","useToast","toastError","toastSuccess","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","fullWidth","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","gt","ClaimModal","DepositModal","addTokenUrl","maxStake","requestedApproval","setRequestedApproval","setActiveSelect","userData","allowance","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","lpContract","useERC20","RewardTokenBalance","useTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","onApprove","useApprove","handleApprove","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","UnlockButton","HarvestAction","tokenRewardSymbol","rewardTokenPrice","earningsBigNumber","cakePrice","BIG_ZERO","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_EXCHANGE_URL","Number","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","getEthScanAddressUrl","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","tokenAddress","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","times","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","getBscScanAddressUrl","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","usePriceCakeBusd","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","mggFarm","isMain","farmV2Apr","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/10.491afb07.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport const useTokenPrice = (tokenAddress: string) => {\r\n  const MoralisWeb3Api = useMoralisWeb3Api()\r\n  const { chainId } = useWeb3React()\r\n\r\n  let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\r\n  switch (chainId){\r\n    case 1:\r\n      chainName = \"eth\"\r\n      break\r\n    case 3:\r\n      chainName = \"ropsten\"\r\n      break\r\n    case 56:\r\n      chainName = \"bsc\"\r\n      break\r\n    case 97:\r\n      chainName = \"bsc testnet\"\r\n      break\r\n    default:\r\n      chainName = \"eth\"\r\n      break\r\n  }\r\n\r\n  const [tokenPrice, setTokenPrice] = useState(0)\r\n  const web3 = useWeb3()\r\n\r\n  let _tokenAddress\r\n  try{\r\n    if (tokenAddress === undefined) throw new Error(\"Token address undefined\");\r\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\r\n  }\r\n  catch{\r\n      console.error('Invalid staking and reward address')\r\n  }\r\n\r\n  useEffect(() => {\r\n      const fetchData = async () => {\r\n      try {\r\n          const result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _tokenAddress})\r\n          const _tokenPrice = result.usdPrice\r\n          \r\n          setTokenPrice(_tokenPrice)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\r\n\r\n  return {tokenPrice}\r\n}\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n\r\n    let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\r\n    switch (chainId){\r\n      case 1:\r\n        chainName = \"eth\"\r\n        break\r\n      case 3:\r\n        chainName = \"ropsten\"\r\n        break\r\n      case 56:\r\n        chainName = \"bsc\"\r\n        break\r\n      case 97:\r\n        chainName = \"bsc testnet\"\r\n        break\r\n      default:\r\n        chainName = \"eth\"\r\n        break\r\n    }\r\n\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try{\r\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let result\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _stakingTokenAddress})\r\n            const _stakingTokenPrice = result.usdPrice\r\n\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\r\n            const _rewardTokenPrice = result.usdPrice\r\n            \r\n            setStakingPrice(_stakingTokenPrice)\r\n            setRewardPrice(_rewardTokenPrice)\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName])\r\n\r\n    return {stakingPrice, rewardPrice}\r\n}\r\n\r\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, lpAddress: string) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n\r\n    let chainName: \"eth\" | \"ropsten\" | \"bsc\" | \"bsc testnet\" = \"eth\"\r\n    switch (chainId){\r\n      case 1:\r\n        chainName = \"eth\"\r\n        break\r\n      case 3:\r\n        chainName = \"ropsten\"\r\n        break\r\n      case 56:\r\n        chainName = \"bsc\"\r\n        break\r\n      case 97:\r\n        chainName = \"bsc testnet\"\r\n        break\r\n      default:\r\n        chainName = \"eth\"\r\n        break\r\n    }\r\n    \r\n    // const options = { chain: chainName, address: _tokenAddress };\r\n    // const result = await MoralisWeb3Api.token.getTokenPrice(options)\r\n\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    let _lpAddress\r\n    try{\r\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n        _lpAddress = web3.utils.toChecksumAddress(lpAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n\r\n            let _totalToken1InPool\r\n            let _totalToken2InPool\r\n\r\n            let result\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\r\n            const _token1Price = result.usdPrice\r\n\r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\r\n            const _token2Price = result.usdPrice\r\n            \r\n            result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\r\n            const _rewardTokenPrice = result.usdPrice\r\n\r\n            result = await MoralisWeb3Api.account.getTokenBalances({chain: chainName, address: _lpAddress, token_addresses: [_token1Address,_token2Address]})\r\n            if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()){\r\n                _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), result[0].decimals)\r\n            }\r\n            else{\r\n                _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), result[0].decimals)\r\n            }\r\n\r\n            if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()){\r\n                _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), result[1].decimals)\r\n            }\r\n            else{\r\n                _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), result[1].decimals)\r\n            }\r\n\r\n            setLPPrice( ((_totalToken1InPool * _token1Price ) + (_totalToken2InPool * _token2Price )) / lpTotalSupply )\r\n            setRewardPrice(_rewardTokenPrice)\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _lpAddress, chainName, MoralisWeb3Api])\r\n\r\n    return {LPPrice, rewardPrice}\r\n}\r\n\r\nexport default usePoolPrice","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n    // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n                                                 max,\r\n                                                 // symbol,\r\n                                                 onChange,\r\n                                                 onSelectMax,\r\n                                                 value,\r\n                                                 // addLiquidityUrl,\r\n                                                 // inputTitle,\r\n                                                 decimals = 18,\r\n                                               }) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems='flex-end' justifyContent='space-around'>\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode='decimal'\r\n            step='any'\r\n            min='0'\r\n            onChange={onChange}\r\n            placeholder='0'\r\n            value={value}\r\n          />\r\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n\r\n\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\r\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\r\n  const firstPart =\r\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\r\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  farmSymbol?: string\r\n  tokenSymbol?: string\r\n  rewardToken?:string\r\n  token: Token\r\n  quoteToken: Token\r\n  pairToken?: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  farmSymbol,\r\n  rewardToken,\r\n  token,\r\n  pairToken\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"row\" alignItems=\"\">\r\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\r\n      </Flex>\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\r\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import * as React from 'react'\r\nimport { Box, CircularProgress } from '@material-ui/core'\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\r\n      <CircularProgress color='inherit' />\r\n    </Box>\r\n  );\r\n}\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Flex, Modal, Text } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from '../../../hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  farm?: any,\r\n  staked?: any,\r\n  earnings?: any,\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\r\n  {\r\n    farm,\r\n    staked,\r\n    earnings,\r\n    onConfirm,\r\n    onDismiss,\r\n    max, tokenName = '',\r\n  }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title='' onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\r\n        <Text>and withdrawing the staked amount of</Text>\r\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\r\n        <Button\r\n          disabled={pendingTx}\r\n          fullWidth onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onConfirm(val)\r\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\r\n            onDismiss()\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n        }}>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\n\r\nconst Container = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    height: auto;\r\n`\r\n\r\nconst DetailsCont = styled.div`\r\n    width: 30%;\r\n    height: auto;\r\n    overflow: visible;\r\n`\r\n\r\nconst ActionDiv = styled.div`\r\n    margin: 15px 0px;\r\n    padding: 10px;\r\n`\r\nconst ModalFooter = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport { DetailsCont, ActionDiv, ModalFooter }\r\nexport default Container;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \r\n\r\nconst Container = styled.div`\r\n    margin-top: -30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 500px;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n    padding: 10px 0px;\r\n`\r\nconst CancelButton = styled(Button)`\r\n    flex: 1;\r\n    margin-right: 10px;\r\n`\r\nconst DepositButton = styled(Button)`\r\n    flex: 1;\r\n    margin-left: 10px;\r\n`\r\n\r\nexport {StyledFlex, CancelButton, DepositButton}\r\nexport default Container;\r\n\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { Modal, Text } from '@metagg/mgg-uikit'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\r\nimport useToast from '../../../../hooks/useToast'\r\nimport { useTranslation } from '../../../../contexts/Localization'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\n\r\ninterface StakeModalInterface {\r\n  pid: number,\r\n  onDismiss?: () => void\r\n  max: BigNumber\r\n  symbol: string\r\n  placeholder?: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  lpStakingContract?: Contract\r\n}\r\n\r\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\r\n  const [val, setVal] = useState('0')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const onClick = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n      await onConfirm(val, lpStakingContract)\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        `${t('Staked')}!`,\r\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\r\n      )\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(\r\n        t('Error'),\r\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n      console.error(e)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n  return (\r\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\r\n      <Container>\r\n        <Text>Stake amount: </Text>\r\n        <ModalInput\r\n          value={val}\r\n          onSelectMax={handleSelectMax}\r\n          onChange={handleChange}\r\n          max={fullBalance}\r\n          symbol={symbol}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          //  inputTitle={t('Stake')}\r\n        />\r\n      </Container>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <Text>{ symbol } balance: </Text>\r\n        <Text>{ fullBalance }</Text>\r\n      </StyledFlex>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <CancelButton\r\n          onClick={onDismiss}\r\n        >\r\n         Close\r\n        </CancelButton>\r\n        <DepositButton\r\n          onClick={onClick}\r\n          // disable Deposit button if not yet approved\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n        >\r\n        Deposit\r\n        </DepositButton>\r\n      </StyledFlex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Stake\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\r\n\r\ninterface ClaimModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\r\n  \r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\r\n        <Button fullWidth>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\r\nimport { ModalHr } from './Divider'\r\nimport StakeModal from './Modals/Stake'\r\nimport ClaimModal from './Modals/ClaimModal'\r\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\r\n\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n  handleUnstake?: (amount: string) => void\r\n  maxStake?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = (\r\n  {\r\n    max,\r\n    onConfirm,\r\n    onDismiss,\r\n    tokenName = '',\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n    handleUnstake,\r\n    farm,\r\n    maxStake,\r\n  }) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const {\r\n    allowance,\r\n    tokenBalance,\r\n    stakedBalance,\r\n    earnings,\r\n  } = farm.userData || {}\r\n  const userRate = calculateUserRewardRate(farm)\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { pid, lpAddresses } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpContract = useERC20(lpAddress)\r\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\r\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\r\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\r\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\r\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\r\n\r\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\r\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setIsApproved(true)\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      pid={pid}\r\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      inputTitle={t('Stake')} />,\r\n  )\r\n\r\n  const [onPresentClaim] = useModal(<ClaimModal />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedTokenBalance}\r\n      earnings={formatTokenEarnings}\r\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\r\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\r\n        Staking, balances & earnings\r\n      </Text>\r\n      <Container>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {farm.quoteToken.symbol}\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\r\n              Get {farm.quoteToken.symbol}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {tokenName} Tokens\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\r\n              Get {tokenName}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            Your {tokenName} Deposits\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            {isApproved ?\r\n              <Button fullWidth onClick={onPresentStake}>\r\n                Stake {tokenName}\r\n              </Button>\r\n              :\r\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\r\n                Enable Farm\r\n              </Button>\r\n            }\r\n\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n      </Container>\r\n      <ModalHr />\r\n      <ModalFooter>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {userRate}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont\r\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n          onMouseEnter={() => setActiveSelect(true)}\r\n          onMouseLeave={() => setActiveSelect(false)}\r\n        >\r\n          <Button fullWidth onClick={onPresentWithdraw}>\r\n            <Text>Claim & Withdraw</Text>\r\n          </Button>\r\n        </DetailsCont>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake, { useExit } from 'hooks/useUnstake'\r\nimport { Farm } from 'state/types'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Loading from 'components/Loading'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady?: boolean\r\n  userRate?:string,\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  addTokenUrl,\r\n  farm,\r\n  userDataReady\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string, contract?: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      addTokenUrl={addTokenUrl}\r\n      farm={farm}\r\n      handleUnstake={handleUnstake}\r\n      maxStake={stakedBalance}\r\n    />\r\n  )\r\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\r\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedBalance}\r\n      earnings={earnings}\r\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    let buttonTxt = 'Deposit'\r\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\r\n      buttonTxt = 'Withdraw'\r\n    }\r\n    return (\r\n      <Button\r\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\r\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        fullWidth\r\n      >\r\n        {userDataReady?\r\n          buttonTxt\r\n          : <Loading /> }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = (\r\n  {\r\n    userDataReady,\r\n    farm,\r\n    account,\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n  }) => {\r\n  const { t } = useTranslation()\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n\r\n  const renderDepositButton = () => {\r\n    return (\r\n      <StakeAction\r\n        userDataReady={userDataReady}\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        addTokenUrl={addTokenUrl}\r\n        farm={farm}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useClaim } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\r\nimport useToast from '../../../../../hooks/useToast'\r\n\r\n\r\ninterface HarvestActionProps {\r\n  pid: number\r\n  stakingContract?: string,\r\n  tokenRewardSymbol?: string,\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n  }\r\n  userDataReady: boolean\r\n  rewardTokenPrice?: number\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\r\n  {\r\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady, rewardTokenPrice\r\n  }) => {\r\n    const earningsBigNumber = new BigNumber(userData.earnings)\r\n    const cakePrice = rewardTokenPrice\r\n    let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useClaim(stakingContract)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\r\n          {tokenRewardSymbol}\r\n        </Text>\r\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\r\n          )}\r\n        </div>\r\n        <Button\r\n          style={{borderRadius: '3px', height: '40px'}}\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Claimed')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml='4px'\r\n        >\r\n          {t('Claim')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useContext, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes, ThemeContext } from 'styled-components'\r\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { getFarmV2Apr } from 'utils/apr'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport DetailsSection from './DetailsSection'\r\nimport { getBscScanAddressUrl, getEthScanAddressUrl } from '../../../../utils/bscscan'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  max-width: 450px;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  // padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.card};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\r\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.quoteToken.symbol\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n\r\n  const stakingAddress = getAddress(farm.stakingAddresses);\r\n\r\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const AddTokenUrl = `${BASE_EXCHANGE_URL}/#/swap/${farm.token.address[farm.chain]}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  const theme = useContext(ThemeContext)\r\n\r\n\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[farm.chain], farm.pairToken.address[farm.chain], farm.quoteToken.address[farm.chain], farm.lpAddresses[farm.chain])\r\n\r\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\r\n  const apr = (aprBlackList.includes(farm.lpAddresses[farm.chain]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        farmSymbol={farm.lpSymbol}\r\n        tokenSymbol={farm.token.symbol}\r\n        rewardToken={farm.quoteToken.symbol}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n        pairToken={farm.pairToken}\r\n      />\r\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\r\n      {/* {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )} */}\r\n\r\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\r\n        <Text>{t('Total Deposits')}</Text>\r\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\r\n      </Flex> */}\r\n      <div style={{margin: '24px'}}>\r\n      <Flex>\r\n        <HarvestAction stakingContract={getAddress(farm.stakingAddresses)}\r\n                       tokenRewardSymbol={earnLabel} userDataReady={userDataReady} userData={farm.userData}\r\n                       pid={farm.pid} rewardTokenPrice={rewardPrice} />\r\n      </Flex>\r\n      {/* <Flex justifyContent='space-between'>\r\n        <Text>{t('APR')}</Text>\r\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\r\n      </Flex> */}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{t('Rate')}</Text>\r\n        <Text color='textSubtle'>\r\n          {formatTotalRewardRate ?? <Skeleton width={60} display='inline-block' />} {earnLabel} / week</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{t('Duration')}</Text>\r\n        <Text color='textSubtle'>{farm.remainingDays ??  <Skeleton width={60} display='inline-block' />} Days</Text>\r\n      </Flex>\r\n      <CardActionsContainer userDataReady={userDataReady} farm={farm} account={account}\r\n                            addLiquidityUrl={addLiquidityUrl} addTokenUrl={AddTokenUrl} />\r\n\r\n      <DetailsSection\r\n        removed={removed}\r\n        stakingAddress={getEthScanAddressUrl(stakingAddress)}\r\n        lpInfoAddress={`${farm.infoURL?? BASE_INFO_URL}/${getAddress(farm.token.address)}`}\r\n        lpLabel={lpLabel}\r\n      />\r\n\r\n      {/* <Divider />\r\n       <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={farm.totalDeposits}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n      <Flex justifyContent='center'>\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\r\n      </Flex> */}\r\n      </div>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const mainTokenAddress = quoteTokenAddress;\r\n  const pairTokenAddress = tokenAddress\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  token,\r\n  pairToken,\r\n  userDataReady,\r\n  stakingAddresses,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: token.address,\r\n    pairTokenAddress: pairToken.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string, contract: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const lpStakingAddress = getAddress(stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.boxShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport useMedia from 'use-media'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\r\n  const { account, chainId } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('earned')\r\n  const theme = useContext(ThemeContext)\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n            || latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        // case 'promoted':\r\n        //   return orderBy(\r\n        //     farms,\r\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\r\n        //     'desc',\r\n        //   )\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'duration':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\r\n            'desc',\r\n          )\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const handleItemClick = (index: number) => setActiveTab(index)\r\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n    // Uncomment this if !comingsoon\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken, totalRewardRate } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div style={{marginTop: '25x', paddingTop: '25px' }}>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed />\r\n            ))}\r\n          </Route>\r\n          {/* {farmsList(activeFarms).map((farm) => ( */}\r\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\r\n          {/* ))} */}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const renderInactiveContent = (): JSX.Element => {\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '20px' }}>\r\n          <Text fontSize='24px' bold> Inactive Liquidity Pools </Text>\r\n        </div>\r\n\r\n        <FlexLayout>\r\n          {farmsList(inactiveFarms).map((farm) => (\r\n            <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                      removed />\r\n          ))}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  \r\n  const mggFarm = farmsStakedMemoized.filter(farm => farm.isMain)[0];\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(mggFarm.lpTotalSupply), mggFarm.token.address[mggFarm.chain], mggFarm.pairToken.address[mggFarm.chain], mggFarm.quoteToken.address[mggFarm.chain], mggFarm.lpAddresses[mggFarm.chain])\r\n  const farmV2Apr = useMemo(() => getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate)), [LPPrice, rewardPrice, mggFarm.totalDeposits, mggFarm.rewardRate])\r\n  const apr = farmV2Apr > 0 ? farmV2Apr.toFixed(4) : \"-\"\r\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)\r\n  const tvr = useMemo(() => (new BigNumber(totalStaked).times(LPPrice)).toFixed(4), [totalStaked, LPPrice]) \r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex alignItems='center' justifyContent='space-around' flexDirection={['column', null, 'row']}\r\n              style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n              padding='24px'>\r\n\r\n        <Flex flexDirection='column' flex=\"2\">\r\n          <Flex justifyContent='space-around' flexDirection='column' padding=\"25px 25px 25px 0px\" mr={['8px', 0]} style={{borderBottom: `1px solid ${theme.colors.MGG_active}`}}>\r\n            <Text color={theme.colors.primary} fontSize='60px' bold>\r\n              Liquidity Staking\r\n            </Text>\r\n            <Text color='text' bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n              Earn MGG and other tokens by staking!\r\n            </Text>\r\n          </Flex>\r\n          <InfoBox style={{width: '100%'}} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Tokens Staked</Text>\r\n             <Text fontSize='20px'> {totalStaked} {mggFarm.lpSymbol}</Text>\r\n           </Flex>\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Value Locked</Text>\r\n             <Text fontSize='20px'>{Number(tvr) > 0 ? tvr : \"-\"} USD</Text>\r\n           </Flex>\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>APR</Text>\r\n             <Text fontSize='20px'>{apr} % </Text>\r\n           </Flex>\r\n        </InfoBox>\r\n        </Flex>\r\n          {/* <Flex style={isMobile ? {\r\n            fontSize: '150px',\r\n            margin: 'auto',\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n          } : { fontSize: '240px', marginRight: '-118px' }}>\r\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\r\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        { /* <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          {/* <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  // {\r\n                  //   label: t('APR'),\r\n                  //   value: 'apr',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Multiplier'),\r\n                  //   value: 'multiplier',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Promoted'),\r\n                  //   value: 'promoted',\r\n                  // },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Duration'),\r\n                    value: 'duration',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform='uppercase'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer> */}\r\n\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}