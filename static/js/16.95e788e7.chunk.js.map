{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","hooks/usePersistState.ts","utils/getTimePeriods.ts","views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useERC721","getErc721Contract","useCake","getCakeContract","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","getEthScanAddressUrl","BASE_ETH_SCAN_URL","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","value","ref","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","fastRefresh","useRefresh","a","contract","methods","allowance","call","res","BigNumber","console","error","prev","fetchBalance","useGetBnbBalance","setBalance","eth","getBalance","walletBalance","refresh","useTokenBalance","balanceOf","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","HistoryTabs","useGetLatestOraclePrice","price","setPrice","chainlinkOracleContract","latestAnswer","response","getBalanceAmount","fetchPrice","usePollOraclePrice","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","MGG_gradient","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","href","message","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","borderColor","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","claimedHash","getResultColor","StyledBetDetails","MGG_container","BetDetails","bullMultiplier","bearMultiplier","LIVE","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","gradients","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","BIG_TEN","pow","BIG_NINE","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","togglePosition","onBack","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","minBetAmount","useGetMinBetAmount","balanceDisplay","maxBalance","minBetAmountBalance","valueAsBn","showFieldWarning","percent","setPercent","handlePercentChange","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","toFormat","lte","eq","isNaN","key","lt","getButtonProps","bnValue","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","percentage","min","isWarning","inputProps","name","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","Number","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader"],"mappings":"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","file":"static/js/16.95e788e7.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { BASE_BSC_SCAN_URL, BASE_ETH_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n\n// Etherscan\n\nexport const getEthScanAddressUrl = (address: string) => {\n  return `${BASE_ETH_SCAN_URL}/address/${address}`\n}\n\nexport const getEthScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_ETH_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getEthScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_ETH_SCAN_URL}/block/${block}`\n}\n\nexport const getEthScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_ETH_SCAN_URL}/block/countdown/${block}`\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {t('Connect Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.MGG_gradient};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { markBetAsCollected } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.borderColor\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanTransactionUrl(bet.claimedHash)} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.MGG_container};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.borderColor\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: BigNumber) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = useMemo(() => {\n    return getBnbAmount(bnbBalance).toString()\n  }, [bnbBalance])\n  const maxBalance = useMemo(() => {\n    return getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance)\n  }, [bnbBalance])\n  const minBetAmountBalance = useMemo(() => {\n    return getBnbAmount(minBetAmount)\n  }, [minBetAmount])\n\n  const valueAsBn = new BigNumber(value)\n\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const [percent, setPercent] = useState(0)\n\n  const handleInputChange = (input: string) => {\n    if (input) {\n      const percentage = Math.floor(new BigNumber(input).dividedBy(maxBalance).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = maxBalance.dividedBy(100).multipliedBy(sliderPercent)\n      setValue(percentageOfStakingMax.toFormat(18))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue, gasPrice })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError(t('Error'), error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent}%` : ''}\n          step={0.1}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n          claimedHash: null,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const currentBlock = await web3NoAccount.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictions'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.MGG_container};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk',\n  })\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_chart',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"],"sourceRoot":""}