{"version":3,"sources":["components/Balance.tsx","hooks/usePersistState.ts","utils/getTimePeriods.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/chainHelpers.ts","hooks/price.ts","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","hooks/refHelpers.ts","utils/index.ts","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","setValue","setItem","stringify","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","address","getAddress","symbol","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","sousId","isUsingBnb","dispatch","useAppDispatch","useWeb3React","account","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","a","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","contract","txHash","console","info","useExit","stakingContract","useLPStakingContract","onUnstake","exit","useSousUnstake","enableEmergencyWithdraw","handleUnstake","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","farm","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","BigNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","tokenAddress","price","_token1Price","_token2Price","res","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","balance","Number","_totalToken2InPool","FlexLayout","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","usePrevious","ref","React","getBscScanLink","type","ChainId","MAINNET","BASE_BSC_SCAN_URLS","getEthScanLink","BASE_ETH_SCAN_URLS","ViewMode","StyledCard","keyframes","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","cake","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useContext","ThemeContext","flexDirection","height","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","useTheme","as","external","BASE_EXCHANGE_URL","ModalBody","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","userData","stakingLimit","stakingTokenContract","useERC20","useToast","toastSuccess","toastError","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","fullDecimalStakeAmount","plus","gte","handleConfirmClick","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","handleStakeInputChange","currentTarget","addLiquidityUrl","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","className","window","open","BASE_SWAP_URL","isDepositDisabled","border","borderTop","onMouseEnter","onMouseLeave","eq","target","isWithdrawDisabled","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","startBlock","endBlock","accountHasStakedBalance","toString","currentBlock","useSelector","state","block","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","rate","UnlockButton","getBscScanAddressUrl","getEthScanAddressUrl","AprRow","tooltipContent","getAprData","earningsPercentageToDisplay","apyModalLink","process","onPresentApyModal","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","withdrawalFee","feeAsDecimal","parseInt","noFeeToPay","shouldShowTimer","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","accountHasVaultShares","useMemo","cakePool","map","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","poolsToSort","orderBy","sortPools","slice","cardLayout","setFetchData","useRouteMatch","mggPool","path","url","isExact","mainPool","rewardPerBlock","prevStakingPrice","prevRewardPrice","poolApr","getPoolApr","tvr","minHeight","padding","flex","borderBottom","Page"],"mappings":"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","file":"static/js/8.37001bdd.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  align-items: center;\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (farm: any, chain: any, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [web3.utils, farm, chain, isFetchData, setLPPrice, setRewardPrice, chainName, MoralisWeb3Api])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal> }\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n    // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n                                                 max,\n                                                 // symbol,\n                                                 onChange,\n                                                 onSelectMax,\n                                                 value,\n                                                 // addLiquidityUrl,\n                                                 // inputTitle,\n                                                 decimals = 18,\n                                               }) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems='flex-end' justifyContent='space-around'>\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode='decimal'\n            step='any'\n            min='0'\n            onChange={onChange}\n            placeholder='0'\n            value={value}\n          />\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n\n\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","\nimport React, {useRef, useEffect} from 'react';\n\nfunction usePrevious(value) {\n    const ref = React.useRef();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); \n    return ref.current;\n}\n\nexport default usePrevious;","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId, CurrencyAmount, JSBI, Percent } from '@pancakeswap-libs/sdk'\nimport { BASE_BSC_SCAN_URLS, BASE_ETH_SCAN_URLS } from '../config'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nexport function getBscScanLink(\n  data: string | number,\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\n  chainId: ChainId = ChainId.MAINNET,\n): string {\n  switch (type) {\n    case 'transaction': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\n    }\n    case 'token': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\n    }\n    case 'block': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\n    }\n    case 'countdown': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\n    }\n    default: {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\n    }\n  }\n}\nexport function getEthScanLink(\n  data: string | number,\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\n  chainId: ChainId = ChainId.MAINNET,\n): string {\n  switch (type) {\n    case 'transaction': {\n      return `${BASE_ETH_SCAN_URLS[chainId]}/tx/${data}`\n    }\n    case 'token': {\n      return `${BASE_ETH_SCAN_URLS[chainId]}/token/${data}`\n    }\n    case 'block': {\n      return `${BASE_ETH_SCAN_URLS[chainId]}/block/${data}`\n    }\n    case 'countdown': {\n      return `${BASE_ETH_SCAN_URLS[chainId]}/block/countdown/${data}`\n    }\n    default: {\n      return `${BASE_ETH_SCAN_URLS[chainId]}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card } from '@sparkpointio/sparkswap-uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  justify-content: space-around;\n  background: ${(props) => props.theme.colors.MGG_container};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React, { useContext } from 'react'\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n//  background: ${({ isFinished, background, theme }) =>\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n// border-radius: ${({ theme, isPromotedPool }) =>\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const background = 'cardHeader'\n\n/*\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n*/\n\n  const getCardTitle = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t(`Stake CAKE to Earn CAKE`)\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\n  }\n  const theme = useContext(ThemeContext);\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\n          <Heading color='text' size=\"lg\">\n            {`Stake ${stakingToken.symbol}`} <br/>\n            to <br />\n            {`Earn ${earningToken.symbol}`}\n          </Heading>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { Modal, Text, Flex, Image, Button } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport ModalInput from 'components/ModalInput'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onSelectMax?: () => void\n  onDismiss?: () => void\n  isApprove?: boolean\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst ModalBody = styled(Flex)`\n  width: 450px;\n  margin-top: -20px;\n  padding: 20px;\n`\nconst StakeActionModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n  isApprove = false,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const approveBtn = useRef(null)\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  // const [approvedTx, setApprovedTx] = useState(false)\n  const [isApproved, setIsApproved] = useState(isApprove)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const userLimit = stakingLimit.minus(userData.stakedBalance)\n  const totalStakedTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : BIG_ZERO\n  const numTotalStaked = totalStakedTokens\n  const totalStakingTokens = userData?.stakingTokenBalance\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\n    : BIG_ZERO\n  const remainingStakeTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals)\n    : BIG_ZERO\n  const totalAllowance = useTokenAllowance(stakingToken.address[pool.chainId], pool.contractAddress[pool.chainId])\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n    getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals),\n  )\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\n  }\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\n  }, [\n    requestedApproval,\n    stakeAmount,\n    stakingLimit,\n    userData,\n    stakingToken,\n    isRemovingStake,\n    totalAllowance,\n    setHasReachedStakedLimit,\n  ])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // const handleApproveClick = async () => {\n  //   setApprovedTx(true)\n  // }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        setIsApproved(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <ModalBody flexDirection=\"column\">\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n            {t('Max stake for this pool: %amount% %token%', {\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n\n        <Flex justifyContent=\"center\">\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center' }}>\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\n              tokensymbol: pool.stakingToken.symbol,\n            })}\n          </Text>\n        </Flex>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text bold>Stake amount</Text>\n          {/* <Flex alignItems=\"center\">\n            <Image\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n              width={24}\n              height={24}\n              alt={stakingToken.symbol}\n            />\n            <Text ml=\"4px\" bold>\n              {stakingToken.symbol}\n            </Text>\n          </Flex> */}\n        </Flex>\n        <ModalInput\n          value={stakeAmount}\n          onSelectMax={() => {\n            handleChangePercent(100)\n          }}\n          onChange={(e) => handleStakeInputChange(e.currentTarget.value)}\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\n          symbol={stakingToken.symbol}\n          addLiquidityUrl=\"\"\n        />\n\n        {/* Fetch and display actual balance */}\n\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\n        </Text>\n\n        <div>\n          <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\n            {/* {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })} */}\n            Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\n          </Text>\n        </div>\n\n        {/* {hasReachedStakeLimit && (\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n            {t('Maximum total stake: %amount% %token%', {\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n        {/* <Flex>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\n          {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })}\n        </Text>\n        </Flex> */}\n        {/* <Slider\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handleChangePercent}\n          name=\"stake\"\n          valueLabel={`${percent}%`}\n          step={1}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n        </Flex> */}\n\n        <Flex justifyContent=\"space-between\" marginTop=\"17px\" marginBottom=\"17px\">\n          <Text bold>Approved Tokens</Text>\n          <Text>\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\n          </Text>\n        </Flex>\n        <Flex style={{ width: '100%' }}>\n          <Button\n            isLoading={pendingTx}\n            // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            // onClick={handleApproveClick}\n            // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\n            onClick={handleApprove}\n            disabled={!stakeAmount || isApproved}\n            mt=\"24px\"\n            fullWidth\n            marginRight=\"20px\"\n          >\n            Approve\n          </Button>\n          <Button\n            isLoading={pendingTx}\n            endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            onClick={handleConfirmClick}\n            disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\n            // disabled={!approvedTx}\n            mt=\"24px\"\n            fullWidth\n            marginLeft=\"20px\"\n          >\n            {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\n            {t('Deposit')}\n          </Button>\n        </Flex>\n        {/* {!isRemovingStake && (\n          <StyledLink external href={BASE_EXCHANGE_URL}>\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\n            </Button>\n          </StyledLink>\n        )} */}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default StakeActionModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport BigNumber from 'bignumber.js'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { Pool } from 'state/types'\n\nimport StakeTokenModal from './Stake'\nimport { getAddress } from '../../../../../utils/addressHelpers'\nimport { BASE_SWAP_URL } from '../../../../../config'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n  addTokenUrl?: string\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\nconst StyledFlex = styled(Flex)`\n  justify-content: center;\n\n  & > * {\n    flex: 1;\n    margin: 0px 10px;\n  }\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const { chainId } = useWeb3React()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\n  const { toastSuccess, toastError } = useToast()\n  const totalStakingTokens = userData?.stakingTokenBalance\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\n    : 0\n  const totalStakedTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : 0\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const [pendingTx, setPendingTx] = useState(false)\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n  const [onPresentStakeAction] = useModal(\n    <StakeTokenModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `${t('Claimed')}!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(\n        getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18),\n        stakingToken.decimals,\n      )\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <Flex flexDirection=\"column\" style={{ marginTop: '-50px', width: '550px' }}>\n        <Text fontSize=\"20px\" marginBottom=\"10px\" marginLeft=\"10px\">\n          Account Info\n        </Text>\n        <Text fontSize=\"15px\" marginLeft=\"10px\">\n          Staking, balances & earnings\n        </Text>\n\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\n        <StyledFlex marginTop=\"21px\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalStakingTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\n              {pool.stakingToken.symbol} Tokens\n            </Text>\n            <Button\n              disabled={isAddTokenDisabled}\n              fullWidth\n              className=\"disabled\"\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[chainId]}`, '_blank')\n              }}\n            >\n              Add More\n            </Button>\n          </Flex>\n          {pool.stakingToken.symbol !== pool.earningToken.symbol && (\n            <Flex flexDirection=\"column\">\n              <Text fontSize=\"24px\">{formatNumber(totalEarningTokens, 2, 5)}</Text>\n              <Text color=\"textSubtle\" marginBottom=\"24px\">\n                {pool.earningToken.symbol} Tokens\n              </Text>\n              <Button\n                fullWidth\n                onClick={() => {\n                  window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[chainId]}`, '_blank')\n                }}\n              >\n                Add More\n              </Button>\n            </Flex>\n          )}\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalStakedTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\n              {pool.stakingToken.symbol} Staked\n            </Text>\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>\n              Stake Tokens\n            </Button>\n          </Flex>\n        </StyledFlex>\n\n        <StyledFlex>\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\n        </StyledFlex>\n        <StyledFlex marginTop=\"30px\" marginBottom=\"20px\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(rewardRate, 2, 10)}</Text>\n            <Text color=\"textSubtle\" fontSize=\"17px\">\n              Your Rate {pool.earningToken.symbol}/block\n            </Text>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalEarnedTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" fontSize=\"17px\">\n              {pool.earningToken.symbol} Token Earnings\n            </Text>\n          </Flex>\n          <Flex\n            flexDirection=\"column\"\n            mb=\"16px\"\n            marginLeft=\"5px\"\n            onMouseEnter={() => setActiveSelect(true)}\n            onMouseLeave={() => setActiveSelect(false)}\n          >\n            {userData.stakedBalance.eq(0) ? (\n              <Button disabled fullWidth>\n                {' '}\n                Withdraw{' '}\n              </Button>\n            ) : (\n              <Dropdown\n                position=\"top\"\n                target={\n                  // Disable component if total staked tokens is empty\n                  <Button fullWidth variant=\"secondary\" disabled={pool.isWithdrawDisabled}>\n                    <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n                  </Button>\n                }\n              >\n                {/* Disable Claim & Withdraw if no staked tokens */}\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\n                  Claim\n                </Button>\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\n                  Claim & Withdraw\n                </Button>\n              </Dropdown>\n            )}\n          </Flex>\n        </StyledFlex>\n        {!!pool.isWithdrawDisabled && (\n          <Text className=\"yellow\" fontSize=\"15px\" marginLeft=\"10px\">\n            MGG Withdrawals and Deposits are locked for 48 hours during launchpad\n          </Text>\n        )}\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    // isStaked ? (\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\n    //     <Flex flexDirection=\"column\">\n    //       <>\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n    //         {stakingTokenPrice !== 0 && (\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\n    //             <Balance\n    //               fontSize=\"12px\"\n    //               color=\"textSubtle\"\n    //               decimals={2}\n    //               value={stakedTokenDollarBalance}\n    //               prefix=\"~\"\n    //               unit=\" USD\"\n    //             />\n    //           </Text>\n    //         )}\n    //       </>\n    //     </Flex>\n    //     <Flex>\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\n    //       </IconButton>\n    //       {reachStakingLimit ? (\n    //         <span ref={targetRef}>\n    //           <IconButton variant=\"secondary\" disabled>\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n    //           </IconButton>\n    //         </span>\n    //       ) : (\n    //         <IconButton\n    //           variant=\"secondary\"\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n    //           disabled={isFinished}\n    //         >\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n    //         </IconButton>\n    //       )}\n    //     </Flex>\n    //     {tooltipVisible && tooltip}\n    //   </Flex>\n    // ) :\n\n    // Reserve function for future use\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\n    return (\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={onPresentStake}>\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake'}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst StyledFlex = styled(Flex)`\n  & > * {\n    flex: 1;\n    height: 60px;\n  }\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const totalStaked = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : 0\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            {/* <Flex justifyContent=\"space-between\">\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${stakingToken.symbol} Staked`}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${earningToken.symbol} Earned`}\n                </Text>\n              </Box>\n            </Flex> */}\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                  {!isComingSoon && formatNumber(totalStaked, 2, 5)} {isComingSoon && '-'} {stakingToken.symbol}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                  {!isComingSoon && formatNumber(totalEarned, 2, 5)} {isComingSoon && '-'} {earningToken.symbol}\n                </Text>\n              </Box>\n            </Flex>\n          </>\n        )}\n        {/* <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n        <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n          {/* <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            /> */}\n        </StyledFlex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { ThemeContext } from 'styled-components'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport {\n  ActionContainer,\n  ActionContent,\n  ActionTitles,\n  Earned,\n} from '../../../Farms/components/FarmTable/Actions/styles'\n\ninterface StakeActionsProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  addTokenUrl?: string\n}\n\nconst ClaimAction: React.FC<StakeActionsProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const [pendingTx, setPendingTx] = useState(false)\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `Claimed!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n    } catch (e) {\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {earningToken.symbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\n        </div>\n        <Button\n          disabled={userData.stakedBalance.eq(0)}\n          onClick={handleHarvestConfirm}\n          style={{ borderRadius: '3px', height: '40px' }}\n          ml=\"4px\"\n        >\n          Claim\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default ClaimAction\n","import BigNumber from 'bignumber.js'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\nimport { ThemeContext } from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport { PoolCategory } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport usePrevious from 'hooks/refHelpers'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl, getEthScanAddressUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink, getEthScanLink } from 'utils'\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport ClaimAction from '../ClaimAction'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData,\n    startBlock,\n    endBlock,\n    isComingSoon,\n    stakingTokenPrice,\n    poolCategory,\n  } = pool\n  const { t } = useTranslation()\n  const { chainId } = useWeb3React()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const theme = useContext(ThemeContext)\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n  const stakingAddress = getAddress(pool.contractAddress)\n\n  // const [ isFetchData, setFetchData ] = useState<boolean | null>(true)\n  // const { stakingPrice, rewardPrice } = usePoolPrice(getAddress(stakingToken.address), getAddress(earningToken.address), isFetchData)\n  // const prevStakingPrice = usePrevious(stakingPrice);\n  // const prevRewardPrice = usePrevious(rewardPrice)\n\n  // useEffect(() => {\n  //   if ((stakingPrice > 0) || (rewardPrice > 0)) {\n  //     setFetchData(false);\n  //   }   \n  //   setTimeout(() => {\n  //     setFetchData(true);\n  //     if ((stakingPrice !== prevStakingPrice) || (rewardPrice !== prevRewardPrice)) {\n  //       setFetchData(true);\n  //     } else {\n  //       setFetchData(false);\n  //     }\n  //   }, 60000);\n  //   if ((prevStakingPrice === stakingPrice) || (prevRewardPrice === rewardPrice)) {\n  //     setFetchData(false);\n  //   }   \n  // }, [stakingPrice, rewardPrice, setFetchData, prevStakingPrice, prevRewardPrice])\n\n  const rate = rewardRate ? formatNumber(rewardRate, 2, 10) : '-'\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  // const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const isLoading = !userData\n  return (\n    <StyledCard isFinished={isFinished && sousId !== 0}>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\n        <Flex>\n          <ClaimAction\n            stakingTokenBalance={stakingTokenBalance}\n            isBnbPool={isBnbPool}\n            pool={pool}\n            stakingTokenPrice={stakingTokenPrice}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>Duration</Text>\n          <Link\n            external\n            href={\n              chainId === 56 || chainId === 97\n                ? getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')\n                : getEthScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')\n            }\n          >\n            <Text color=\"textSubtle\">\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n            </Text>\n          </Link>\n        </Flex>\n\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n            <Text>Total Deposit</Text>\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\n          </Flex> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n              <Text>Reward per block</Text>\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\n          </Flex> */}\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>{t('Rate')}</Text>\n          <Text>\n            {!isComingSoon ? rate : '-'} {pool.earningToken.symbol}/block\n          </Text>\n        </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\n        {/* <CardFooter pool={pool} account={account} /> */}\n        <DetailsSection\n          stakingAddress={\n            chainId === 56 || chainId === 97\n              ? getBscScanAddressUrl(stakingAddress)\n              : getEthScanAddressUrl(stakingAddress)\n          }\n        />\n      </Flex>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('Info site')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\nimport {Box,CardBody} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\nimport styled, { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport ReactLoading from 'react-loading'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { SvgIcon } from '@material-ui/core'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePoolPrice } from 'hooks/price'\nimport usePrevious from 'hooks/refHelpers'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport { getPoolApr } from 'utils/apr'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { StyledHr } from 'views/Farms/components/Divider'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport useMedia from 'use-media'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\n\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n  margin: 25px 0px;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const theme = useContext(ThemeContext)\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const isMobile = useMedia({ maxWidth: 500 })\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [ finishedPools, openPools ] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const [ upcomingPools, notUpcomingPools ] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n    finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n  const showUpcomingPools = location.pathname.includes('upcoming')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = []\n    if (showUpcomingPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const [ isFetchData, setFetchData] = useState<boolean | null>(true); \n\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n  const { path, url, isExact } = useRouteMatch()\n  const mggPool = openPools.filter((pool) => pool.mainPool)[0];\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[mggPool.chainId], mggPool.earningToken.address[mggPool.chainId], isFetchData)\n\n  const prevStakingPrice = usePrevious(stakingPrice);\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if ((stakingPrice > 0) || (rewardPrice > 0)) {\n      setFetchData(false);\n    }   \n    setTimeout(() => {\n      setFetchData(true);\n      if ((stakingPrice !== prevStakingPrice) || (rewardPrice !== prevRewardPrice)) {\n        setFetchData(true);\n      } else {\n        setFetchData(false);\n      }\n    }, 60000);\n    if ((prevStakingPrice === stakingPrice) || (prevRewardPrice === rewardPrice)) {\n      setFetchData(false);\n    }\n    \n    \n  }, [stakingPrice, rewardPrice, setFetchData, prevStakingPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\"/>\n  const tvr = useMemo(\n    () => new BigNumber(totalStaked).times(stakingPrice).toFixed(4),\n    [totalStaked, stakingPrice])\n    \n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Pool Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG and other tokens by staking!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total MGG Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked ? ` ${totalStaked} ${mggPool.stakingToken.symbol}`:<ReactLoading type=\"spin\" height=\"20px\" width=\"20px\"/>} </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">{Number(tvr) > 0? `${tvr} USD` : <ReactLoading type=\"spin\" height=\"20px\" width=\"20px\"/> }</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\"> {apr} </Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* {!showFinishedPools && !showUpcomingPools && (\n          <div>\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\n            {' '}\n            Stake tokens to earn{' '}\n          </Text>\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\n\n           // Header title for Active Pools  \n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('Stake tokens to earn')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </div>\n        )} */}\n\n        {/* UPCOMING  */}\n        {showUpcomingPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are coming in the near future. Stay tuned.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* ENDED  */}\n        {showFinishedPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\n\n        {cardLayout}\n\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"sourceRoot":""}